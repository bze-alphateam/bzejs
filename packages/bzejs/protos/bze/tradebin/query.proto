syntax = "proto3";

package bze.tradebin;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "bze/tradebin/params.proto";
import "bze/tradebin/store.proto";

option go_package = "github.com/bze-alphateam/bze/x/tradebin/types";

// Query defines the gRPC querier service.
service Query {
  
  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/bze/tradebin/params";
  
  }
  
  // Queries a list of Market items.
  rpc Market (QueryMarketRequest) returns (QueryMarketResponse) {
    option (google.api.http).get = "/bze/tradebin/market";
  
  }
  
  // Queries a list of AllMarkets items.
  rpc AllMarkets (QueryAllMarketsRequest) returns (QueryAllMarketsResponse) {
    option (google.api.http).get = "/bze/tradebin/all_markets";
  
  }
  
  // Queries a list of AssetMarkets items.
  rpc AssetMarkets (QueryAssetMarketsRequest) returns (QueryAssetMarketsResponse) {
    option (google.api.http).get = "/bze/tradebin/asset_markets";
  
  }
  
  // Queries a list of UserMarketOrders items.
  rpc UserMarketOrders (QueryUserMarketOrdersRequest) returns (QueryUserMarketOrdersResponse) {
    option (google.api.http).get = "/bze/tradebin/user_market_orders/{address}";
  
  }
  
  // Queries a list of MarketAggregatedOrders items.
  rpc MarketAggregatedOrders (QueryMarketAggregatedOrdersRequest) returns (QueryMarketAggregatedOrdersResponse) {
    option (google.api.http).get = "/bze/tradebin/market_aggregated_orders";
  
  }
  
  // Queries a list of MarketHistory items.
  rpc MarketHistory (QueryMarketHistoryRequest) returns (QueryMarketHistoryResponse) {
    option (google.api.http).get = "/bze/tradebin/market_history";
  
  }
  
  // Queries a list of MarketOrder items.
  rpc MarketOrder (QueryMarketOrderRequest) returns (QueryMarketOrderResponse) {
    option (google.api.http).get = "/bze/tradebin/market_order";
  
  }
  
  // Queries a list of AllUserDust items.
  rpc AllUserDust (QueryAllUserDustRequest) returns (QueryAllUserDustResponse) {
    option (google.api.http).get = "/bze/tradebin/all_user_dust";
  
  }
  
  // Queries a list of AllLiquidityPools items.
  rpc AllLiquidityPools (QueryAllLiquidityPoolsRequest) returns (QueryAllLiquidityPoolsResponse) {
    option (google.api.http).get = "/bze/tradebin/all_liquidity_pools";
  
  }
  
  // Queries a list of LiquidityPool items.
  rpc LiquidityPool (QueryLiquidityPoolRequest) returns (QueryLiquidityPoolResponse) {
    option (google.api.http).get = "/bze/tradebin/liquidity_pool";
  
  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

message QueryMarketRequest {
  string base  = 1;
  string quote = 2;
}

message QueryMarketResponse {
  Market market = 1 [(gogoproto.nullable) = false];
}

message QueryAllMarketsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllMarketsResponse {
  repeated Market                                 market     = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryAssetMarketsRequest {
  string asset = 1;
}

message QueryAssetMarketsResponse {
  repeated Market base  = 1 [(gogoproto.nullable) = false];
  repeated Market quote = 2 [(gogoproto.nullable) = false];
}

message QueryUserMarketOrdersRequest {
  string                                address    = 1;
  string                                market     = 2;
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

message QueryUserMarketOrdersResponse {
  repeated OrderReference                         list       = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryMarketAggregatedOrdersRequest {
  string                                market     = 1;
  string                                order_type = 2;
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

message QueryMarketAggregatedOrdersResponse {
  repeated AggregatedOrder                        list       = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryMarketHistoryRequest {
  string                                market     = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryMarketHistoryResponse {
  repeated HistoryOrder                           list       = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryMarketOrderRequest {
  string market     = 1;
  string order_type = 2;
  string order_id   = 3;
}

message QueryMarketOrderResponse {
  Order order = 1 [(gogoproto.nullable) = false];
}

message QueryAllUserDustRequest {
  string address = 1;
}

message QueryAllUserDustResponse {
  repeated UserDust list = 1 [(gogoproto.nullable) = false];
}

message QueryAllLiquidityPoolsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllLiquidityPoolsResponse {
  repeated LiquidityPool list = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryLiquidityPoolRequest {
  string pool_id = 1;
}

message QueryLiquidityPoolResponse {
  LiquidityPool pool = 1;
}

