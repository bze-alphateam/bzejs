import * as _46 from "./app/v1alpha1/config";
import * as _47 from "./app/v1alpha1/module";
import * as _48 from "./app/v1alpha1/query";
import * as _49 from "./auth/v1beta1/auth";
import * as _50 from "./auth/v1beta1/genesis";
import * as _51 from "./auth/v1beta1/query";
import * as _52 from "./authz/v1beta1/authz";
import * as _53 from "./authz/v1beta1/event";
import * as _54 from "./authz/v1beta1/genesis";
import * as _55 from "./authz/v1beta1/query";
import * as _56 from "./authz/v1beta1/tx";
import * as _57 from "./bank/v1beta1/authz";
import * as _58 from "./bank/v1beta1/bank";
import * as _59 from "./bank/v1beta1/genesis";
import * as _60 from "./bank/v1beta1/query";
import * as _61 from "./bank/v1beta1/tx";
import * as _62 from "./base/abci/v1beta1/abci";
import * as _63 from "./base/kv/v1beta1/kv";
import * as _64 from "./base/query/v1beta1/pagination";
import * as _65 from "./base/reflection/v1beta1/reflection";
import * as _66 from "./base/reflection/v2alpha1/reflection";
import * as _67 from "./base/snapshots/v1beta1/snapshot";
import * as _68 from "./base/store/v1beta1/commit_info";
import * as _69 from "./base/store/v1beta1/listening";
import * as _70 from "./base/tendermint/v1beta1/query";
import * as _71 from "./base/v1beta1/coin";
import * as _72 from "./capability/v1beta1/capability";
import * as _73 from "./capability/v1beta1/genesis";
import * as _74 from "./crisis/v1beta1/genesis";
import * as _75 from "./crisis/v1beta1/tx";
import * as _76 from "./crypto/ed25519/keys";
import * as _77 from "./crypto/hd/v1/hd";
import * as _78 from "./crypto/keyring/v1/record";
import * as _79 from "./crypto/multisig/keys";
import * as _80 from "./crypto/secp256k1/keys";
import * as _81 from "./crypto/secp256r1/keys";
import * as _82 from "./distribution/v1beta1/distribution";
import * as _83 from "./distribution/v1beta1/genesis";
import * as _84 from "./distribution/v1beta1/query";
import * as _85 from "./distribution/v1beta1/tx";
import * as _86 from "./evidence/v1beta1/evidence";
import * as _87 from "./evidence/v1beta1/genesis";
import * as _88 from "./evidence/v1beta1/query";
import * as _89 from "./evidence/v1beta1/tx";
import * as _90 from "./feegrant/v1beta1/feegrant";
import * as _91 from "./feegrant/v1beta1/genesis";
import * as _92 from "./feegrant/v1beta1/query";
import * as _93 from "./feegrant/v1beta1/tx";
import * as _94 from "./genutil/v1beta1/genesis";
import * as _95 from "./gov/v1/genesis";
import * as _96 from "./gov/v1/gov";
import * as _97 from "./gov/v1/query";
import * as _98 from "./gov/v1/tx";
import * as _99 from "./gov/v1beta1/genesis";
import * as _100 from "./gov/v1beta1/gov";
import * as _101 from "./gov/v1beta1/query";
import * as _102 from "./gov/v1beta1/tx";
import * as _103 from "./group/v1/events";
import * as _104 from "./group/v1/genesis";
import * as _105 from "./group/v1/query";
import * as _106 from "./group/v1/tx";
import * as _107 from "./group/v1/types";
import * as _108 from "./mint/v1beta1/genesis";
import * as _109 from "./mint/v1beta1/mint";
import * as _110 from "./mint/v1beta1/query";
import * as _112 from "./nft/v1beta1/event";
import * as _113 from "./nft/v1beta1/genesis";
import * as _114 from "./nft/v1beta1/nft";
import * as _115 from "./nft/v1beta1/query";
import * as _116 from "./nft/v1beta1/tx";
import * as _117 from "./orm/v1/orm";
import * as _118 from "./orm/v1alpha1/schema";
import * as _119 from "./params/v1beta1/params";
import * as _120 from "./params/v1beta1/query";
import * as _121 from "./slashing/v1beta1/genesis";
import * as _122 from "./slashing/v1beta1/query";
import * as _123 from "./slashing/v1beta1/slashing";
import * as _124 from "./slashing/v1beta1/tx";
import * as _125 from "./staking/v1beta1/authz";
import * as _126 from "./staking/v1beta1/genesis";
import * as _127 from "./staking/v1beta1/query";
import * as _128 from "./staking/v1beta1/staking";
import * as _129 from "./staking/v1beta1/tx";
import * as _130 from "./tx/signing/v1beta1/signing";
import * as _131 from "./tx/v1beta1/service";
import * as _132 from "./tx/v1beta1/tx";
import * as _133 from "./upgrade/v1beta1/query";
import * as _134 from "./upgrade/v1beta1/tx";
import * as _135 from "./upgrade/v1beta1/upgrade";
import * as _136 from "./vesting/v1beta1/tx";
import * as _137 from "./vesting/v1beta1/vesting";
import * as _236 from "./auth/v1beta1/query.lcd";
import * as _237 from "./authz/v1beta1/query.lcd";
import * as _238 from "./bank/v1beta1/query.lcd";
import * as _239 from "./base/tendermint/v1beta1/query.lcd";
import * as _240 from "./distribution/v1beta1/query.lcd";
import * as _241 from "./evidence/v1beta1/query.lcd";
import * as _242 from "./feegrant/v1beta1/query.lcd";
import * as _243 from "./gov/v1/query.lcd";
import * as _244 from "./gov/v1beta1/query.lcd";
import * as _245 from "./group/v1/query.lcd";
import * as _246 from "./mint/v1beta1/query.lcd";
import * as _247 from "./nft/v1beta1/query.lcd";
import * as _248 from "./params/v1beta1/query.lcd";
import * as _249 from "./slashing/v1beta1/query.lcd";
import * as _250 from "./staking/v1beta1/query.lcd";
import * as _251 from "./tx/v1beta1/service.lcd";
import * as _252 from "./upgrade/v1beta1/query.lcd";
import * as _253 from "./app/v1alpha1/query.rpc.Query";
import * as _254 from "./auth/v1beta1/query.rpc.Query";
import * as _255 from "./authz/v1beta1/query.rpc.Query";
import * as _256 from "./bank/v1beta1/query.rpc.Query";
import * as _257 from "./base/tendermint/v1beta1/query.rpc.Service";
import * as _258 from "./distribution/v1beta1/query.rpc.Query";
import * as _259 from "./evidence/v1beta1/query.rpc.Query";
import * as _260 from "./feegrant/v1beta1/query.rpc.Query";
import * as _261 from "./gov/v1/query.rpc.Query";
import * as _262 from "./gov/v1beta1/query.rpc.Query";
import * as _263 from "./group/v1/query.rpc.Query";
import * as _264 from "./mint/v1beta1/query.rpc.Query";
import * as _265 from "./nft/v1beta1/query.rpc.Query";
import * as _266 from "./params/v1beta1/query.rpc.Query";
import * as _267 from "./slashing/v1beta1/query.rpc.Query";
import * as _268 from "./staking/v1beta1/query.rpc.Query";
import * as _269 from "./tx/v1beta1/service.rpc.Service";
import * as _270 from "./upgrade/v1beta1/query.rpc.Query";
import * as _271 from "./authz/v1beta1/tx.rpc.msg";
import * as _272 from "./bank/v1beta1/tx.rpc.msg";
import * as _273 from "./crisis/v1beta1/tx.rpc.msg";
import * as _274 from "./distribution/v1beta1/tx.rpc.msg";
import * as _275 from "./evidence/v1beta1/tx.rpc.msg";
import * as _276 from "./feegrant/v1beta1/tx.rpc.msg";
import * as _277 from "./gov/v1/tx.rpc.msg";
import * as _278 from "./gov/v1beta1/tx.rpc.msg";
import * as _279 from "./group/v1/tx.rpc.msg";
import * as _280 from "./nft/v1beta1/tx.rpc.msg";
import * as _281 from "./slashing/v1beta1/tx.rpc.msg";
import * as _282 from "./staking/v1beta1/tx.rpc.msg";
import * as _283 from "./upgrade/v1beta1/tx.rpc.msg";
import * as _284 from "./vesting/v1beta1/tx.rpc.msg";
export declare namespace cosmos {
    namespace app {
        const v1alpha1: {
            QueryClientImpl: typeof _253.QueryClientImpl;
            createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                config(request?: _48.QueryConfigRequest): Promise<_48.QueryConfigResponse>;
            };
            QueryConfigRequest: {
                encode(_: _48.QueryConfigRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _48.QueryConfigRequest;
                fromPartial(_: {}): _48.QueryConfigRequest;
            };
            QueryConfigResponse: {
                encode(message: _48.QueryConfigResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _48.QueryConfigResponse;
                fromPartial(object: {
                    config?: {
                        modules?: {
                            name?: string;
                            config?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                        }[];
                    };
                }): _48.QueryConfigResponse;
            };
            ModuleDescriptor: {
                encode(message: _47.ModuleDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _47.ModuleDescriptor;
                fromPartial(object: {
                    goImport?: string;
                    usePackage?: {
                        name?: string;
                        revision?: number;
                    }[];
                    canMigrateFrom?: {
                        module?: string;
                    }[];
                }): _47.ModuleDescriptor;
            };
            PackageReference: {
                encode(message: _47.PackageReference, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _47.PackageReference;
                fromPartial(object: {
                    name?: string;
                    revision?: number;
                }): _47.PackageReference;
            };
            MigrateFromInfo: {
                encode(message: _47.MigrateFromInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _47.MigrateFromInfo;
                fromPartial(object: {
                    module?: string;
                }): _47.MigrateFromInfo;
            };
            Config: {
                encode(message: _46.Config, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _46.Config;
                fromPartial(object: {
                    modules?: {
                        name?: string;
                        config?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }[];
                }): _46.Config;
            };
            ModuleConfig: {
                encode(message: _46.ModuleConfig, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _46.ModuleConfig;
                fromPartial(object: {
                    name?: string;
                    config?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                }): _46.ModuleConfig;
            };
        };
    }
    namespace auth {
        const v1beta1: {
            QueryClientImpl: typeof _254.QueryClientImpl;
            createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                accounts(request?: _51.QueryAccountsRequest): Promise<_51.QueryAccountsResponse>;
                account(request: _51.QueryAccountRequest): Promise<_51.QueryAccountResponse>;
                params(request?: _51.QueryParamsRequest): Promise<_51.QueryParamsResponse>;
                moduleAccounts(request?: _51.QueryModuleAccountsRequest): Promise<_51.QueryModuleAccountsResponse>;
                bech32Prefix(request?: _51.Bech32PrefixRequest): Promise<_51.Bech32PrefixResponse>;
                addressBytesToString(request: _51.AddressBytesToStringRequest): Promise<_51.AddressBytesToStringResponse>;
                addressStringToBytes(request: _51.AddressStringToBytesRequest): Promise<_51.AddressStringToBytesResponse>;
            };
            LCDQueryClient: typeof _236.LCDQueryClient;
            QueryAccountsRequest: {
                encode(message: _51.QueryAccountsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _51.QueryAccountsRequest;
                fromPartial(object: {
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _51.QueryAccountsRequest;
            };
            QueryAccountsResponse: {
                encode(message: _51.QueryAccountsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _51.QueryAccountsResponse;
                fromPartial(object: {
                    accounts?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _51.QueryAccountsResponse;
            };
            QueryAccountRequest: {
                encode(message: _51.QueryAccountRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _51.QueryAccountRequest;
                fromPartial(object: {
                    address?: string;
                }): _51.QueryAccountRequest;
            };
            QueryModuleAccountsRequest: {
                encode(_: _51.QueryModuleAccountsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _51.QueryModuleAccountsRequest;
                fromPartial(_: {}): _51.QueryModuleAccountsRequest;
            };
            QueryParamsResponse: {
                encode(message: _51.QueryParamsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _51.QueryParamsResponse;
                fromPartial(object: {
                    params?: {
                        maxMemoCharacters?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        txSigLimit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        txSizeCostPerByte?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        sigVerifyCostEd25519?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        sigVerifyCostSecp256k1?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _51.QueryParamsResponse;
            };
            QueryAccountResponse: {
                encode(message: _51.QueryAccountResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _51.QueryAccountResponse;
                fromPartial(object: {
                    account?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                }): _51.QueryAccountResponse;
            };
            QueryParamsRequest: {
                encode(_: _51.QueryParamsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _51.QueryParamsRequest;
                fromPartial(_: {}): _51.QueryParamsRequest;
            };
            QueryModuleAccountsResponse: {
                encode(message: _51.QueryModuleAccountsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _51.QueryModuleAccountsResponse;
                fromPartial(object: {
                    accounts?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                }): _51.QueryModuleAccountsResponse;
            };
            Bech32PrefixRequest: {
                encode(_: _51.Bech32PrefixRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _51.Bech32PrefixRequest;
                fromPartial(_: {}): _51.Bech32PrefixRequest;
            };
            Bech32PrefixResponse: {
                encode(message: _51.Bech32PrefixResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _51.Bech32PrefixResponse;
                fromPartial(object: {
                    bech32Prefix?: string;
                }): _51.Bech32PrefixResponse;
            };
            AddressBytesToStringRequest: {
                encode(message: _51.AddressBytesToStringRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _51.AddressBytesToStringRequest;
                fromPartial(object: {
                    addressBytes?: Uint8Array;
                }): _51.AddressBytesToStringRequest;
            };
            AddressBytesToStringResponse: {
                encode(message: _51.AddressBytesToStringResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _51.AddressBytesToStringResponse;
                fromPartial(object: {
                    addressString?: string;
                }): _51.AddressBytesToStringResponse;
            };
            AddressStringToBytesRequest: {
                encode(message: _51.AddressStringToBytesRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _51.AddressStringToBytesRequest;
                fromPartial(object: {
                    addressString?: string;
                }): _51.AddressStringToBytesRequest;
            };
            AddressStringToBytesResponse: {
                encode(message: _51.AddressStringToBytesResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _51.AddressStringToBytesResponse;
                fromPartial(object: {
                    addressBytes?: Uint8Array;
                }): _51.AddressStringToBytesResponse;
            };
            GenesisState: {
                encode(message: _50.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _50.GenesisState;
                fromPartial(object: {
                    params?: {
                        maxMemoCharacters?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        txSigLimit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        txSizeCostPerByte?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        sigVerifyCostEd25519?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        sigVerifyCostSecp256k1?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                    accounts?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                }): _50.GenesisState;
            };
            BaseAccount: {
                encode(message: _49.BaseAccount, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _49.BaseAccount;
                fromPartial(object: {
                    address?: string;
                    pubKey?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                    accountNumber?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    sequence?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }): _49.BaseAccount;
            };
            ModuleAccount: {
                encode(message: _49.ModuleAccount, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _49.ModuleAccount;
                fromPartial(object: {
                    baseAccount?: {
                        address?: string;
                        pubKey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        accountNumber?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        sequence?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                    name?: string;
                    permissions?: string[];
                }): _49.ModuleAccount;
            };
            Params: {
                encode(message: _49.Params, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _49.Params;
                fromPartial(object: {
                    maxMemoCharacters?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    txSigLimit?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    txSizeCostPerByte?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    sigVerifyCostEd25519?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    sigVerifyCostSecp256k1?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }): _49.Params;
            };
        };
    }
    namespace authz {
        const v1beta1: {
            MsgClientImpl: typeof _271.MsgClientImpl;
            QueryClientImpl: typeof _255.QueryClientImpl;
            createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                grants(request: _55.QueryGrantsRequest): Promise<_55.QueryGrantsResponse>;
                granterGrants(request: _55.QueryGranterGrantsRequest): Promise<_55.QueryGranterGrantsResponse>;
                granteeGrants(request: _55.QueryGranteeGrantsRequest): Promise<_55.QueryGranteeGrantsResponse>;
            };
            LCDQueryClient: typeof _237.LCDQueryClient;
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    grant(value: _56.MsgGrant): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    exec(value: _56.MsgExec): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    revoke(value: _56.MsgRevoke): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    grant(value: _56.MsgGrant): {
                        typeUrl: string;
                        value: _56.MsgGrant;
                    };
                    exec(value: _56.MsgExec): {
                        typeUrl: string;
                        value: _56.MsgExec;
                    };
                    revoke(value: _56.MsgRevoke): {
                        typeUrl: string;
                        value: _56.MsgRevoke;
                    };
                };
                fromPartial: {
                    grant(value: _56.MsgGrant): {
                        typeUrl: string;
                        value: _56.MsgGrant;
                    };
                    exec(value: _56.MsgExec): {
                        typeUrl: string;
                        value: _56.MsgExec;
                    };
                    revoke(value: _56.MsgRevoke): {
                        typeUrl: string;
                        value: _56.MsgRevoke;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.authz.v1beta1.MsgGrant": {
                    aminoType: string;
                    toAmino: ({ granter, grantee, grant }: _56.MsgGrant) => {
                        granter: string;
                        grantee: string;
                        grant: {
                            authorization: {
                                type_url: string;
                                value: Uint8Array;
                            };
                            expiration: {
                                seconds: string;
                                nanos: number;
                            };
                        };
                    };
                    fromAmino: ({ granter, grantee, grant }: {
                        granter: string;
                        grantee: string;
                        grant: {
                            authorization: {
                                type_url: string;
                                value: Uint8Array;
                            };
                            expiration: {
                                seconds: string;
                                nanos: number;
                            };
                        };
                    }) => _56.MsgGrant;
                };
                "/cosmos.authz.v1beta1.MsgExec": {
                    aminoType: string;
                    toAmino: ({ grantee, msgs }: _56.MsgExec) => {
                        grantee: string;
                        msgs: {
                            type_url: string;
                            value: Uint8Array;
                        }[];
                    };
                    fromAmino: ({ grantee, msgs }: {
                        grantee: string;
                        msgs: {
                            type_url: string;
                            value: Uint8Array;
                        }[];
                    }) => _56.MsgExec;
                };
                "/cosmos.authz.v1beta1.MsgRevoke": {
                    aminoType: string;
                    toAmino: ({ granter, grantee, msgTypeUrl }: _56.MsgRevoke) => {
                        granter: string;
                        grantee: string;
                        msg_type_url: string;
                    };
                    fromAmino: ({ granter, grantee, msg_type_url }: {
                        granter: string;
                        grantee: string;
                        msg_type_url: string;
                    }) => _56.MsgRevoke;
                };
            };
            MsgGrant: {
                encode(message: _56.MsgGrant, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _56.MsgGrant;
                fromPartial(object: {
                    granter?: string;
                    grantee?: string;
                    grant?: {
                        authorization?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        expiration?: Date;
                    };
                }): _56.MsgGrant;
            };
            MsgExecResponse: {
                encode(message: _56.MsgExecResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _56.MsgExecResponse;
                fromPartial(object: {
                    results?: Uint8Array[];
                }): _56.MsgExecResponse;
            };
            MsgExec: {
                encode(message: _56.MsgExec, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _56.MsgExec;
                fromPartial(object: {
                    grantee?: string;
                    msgs?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                }): _56.MsgExec;
            };
            MsgGrantResponse: {
                encode(_: _56.MsgGrantResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _56.MsgGrantResponse;
                fromPartial(_: {}): _56.MsgGrantResponse;
            };
            MsgRevoke: {
                encode(message: _56.MsgRevoke, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _56.MsgRevoke;
                fromPartial(object: {
                    granter?: string;
                    grantee?: string;
                    msgTypeUrl?: string;
                }): _56.MsgRevoke;
            };
            MsgRevokeResponse: {
                encode(_: _56.MsgRevokeResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _56.MsgRevokeResponse;
                fromPartial(_: {}): _56.MsgRevokeResponse;
            };
            QueryGrantsRequest: {
                encode(message: _55.QueryGrantsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _55.QueryGrantsRequest;
                fromPartial(object: {
                    granter?: string;
                    grantee?: string;
                    msgTypeUrl?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _55.QueryGrantsRequest;
            };
            QueryGrantsResponse: {
                encode(message: _55.QueryGrantsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _55.QueryGrantsResponse;
                fromPartial(object: {
                    grants?: {
                        authorization?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        expiration?: Date;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _55.QueryGrantsResponse;
            };
            QueryGranterGrantsRequest: {
                encode(message: _55.QueryGranterGrantsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _55.QueryGranterGrantsRequest;
                fromPartial(object: {
                    granter?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _55.QueryGranterGrantsRequest;
            };
            QueryGranterGrantsResponse: {
                encode(message: _55.QueryGranterGrantsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _55.QueryGranterGrantsResponse;
                fromPartial(object: {
                    grants?: {
                        granter?: string;
                        grantee?: string;
                        authorization?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        expiration?: Date;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _55.QueryGranterGrantsResponse;
            };
            QueryGranteeGrantsRequest: {
                encode(message: _55.QueryGranteeGrantsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _55.QueryGranteeGrantsRequest;
                fromPartial(object: {
                    grantee?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _55.QueryGranteeGrantsRequest;
            };
            QueryGranteeGrantsResponse: {
                encode(message: _55.QueryGranteeGrantsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _55.QueryGranteeGrantsResponse;
                fromPartial(object: {
                    grants?: {
                        granter?: string;
                        grantee?: string;
                        authorization?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        expiration?: Date;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _55.QueryGranteeGrantsResponse;
            };
            GenesisState: {
                encode(message: _54.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _54.GenesisState;
                fromPartial(object: {
                    authorization?: {
                        granter?: string;
                        grantee?: string;
                        authorization?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        expiration?: Date;
                    }[];
                }): _54.GenesisState;
            };
            EventGrant: {
                encode(message: _53.EventGrant, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _53.EventGrant;
                fromPartial(object: {
                    msgTypeUrl?: string;
                    granter?: string;
                    grantee?: string;
                }): _53.EventGrant;
            };
            EventRevoke: {
                encode(message: _53.EventRevoke, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _53.EventRevoke;
                fromPartial(object: {
                    msgTypeUrl?: string;
                    granter?: string;
                    grantee?: string;
                }): _53.EventRevoke;
            };
            GenericAuthorization: {
                encode(message: _52.GenericAuthorization, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _52.GenericAuthorization;
                fromPartial(object: {
                    msg?: string;
                }): _52.GenericAuthorization;
            };
            Grant: {
                encode(message: _52.Grant, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _52.Grant;
                fromPartial(object: {
                    authorization?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                    expiration?: Date;
                }): _52.Grant;
            };
            GrantAuthorization: {
                encode(message: _52.GrantAuthorization, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _52.GrantAuthorization;
                fromPartial(object: {
                    granter?: string;
                    grantee?: string;
                    authorization?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                    expiration?: Date;
                }): _52.GrantAuthorization;
            };
            GrantQueueItem: {
                encode(message: _52.GrantQueueItem, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _52.GrantQueueItem;
                fromPartial(object: {
                    msgTypeUrls?: string[];
                }): _52.GrantQueueItem;
            };
        };
    }
    namespace bank {
        const v1beta1: {
            MsgClientImpl: typeof _272.MsgClientImpl;
            QueryClientImpl: typeof _256.QueryClientImpl;
            createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                balance(request: _60.QueryBalanceRequest): Promise<_60.QueryBalanceResponse>;
                allBalances(request: _60.QueryAllBalancesRequest): Promise<_60.QueryAllBalancesResponse>;
                spendableBalances(request: _60.QuerySpendableBalancesRequest): Promise<_60.QuerySpendableBalancesResponse>;
                totalSupply(request?: _60.QueryTotalSupplyRequest): Promise<_60.QueryTotalSupplyResponse>;
                supplyOf(request: _60.QuerySupplyOfRequest): Promise<_60.QuerySupplyOfResponse>;
                params(request?: _60.QueryParamsRequest): Promise<_60.QueryParamsResponse>;
                denomMetadata(request: _60.QueryDenomMetadataRequest): Promise<_60.QueryDenomMetadataResponse>;
                denomsMetadata(request?: _60.QueryDenomsMetadataRequest): Promise<_60.QueryDenomsMetadataResponse>;
                denomOwners(request: _60.QueryDenomOwnersRequest): Promise<_60.QueryDenomOwnersResponse>;
            };
            LCDQueryClient: typeof _238.LCDQueryClient;
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    send(value: _61.MsgSend): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    multiSend(value: _61.MsgMultiSend): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    send(value: _61.MsgSend): {
                        typeUrl: string;
                        value: _61.MsgSend;
                    };
                    multiSend(value: _61.MsgMultiSend): {
                        typeUrl: string;
                        value: _61.MsgMultiSend;
                    };
                };
                fromPartial: {
                    send(value: _61.MsgSend): {
                        typeUrl: string;
                        value: _61.MsgSend;
                    };
                    multiSend(value: _61.MsgMultiSend): {
                        typeUrl: string;
                        value: _61.MsgMultiSend;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.bank.v1beta1.MsgSend": {
                    aminoType: string;
                    toAmino: ({ fromAddress, toAddress, amount }: _61.MsgSend) => {
                        from_address: string;
                        to_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        }[];
                    };
                    fromAmino: ({ from_address, to_address, amount }: {
                        from_address: string;
                        to_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        }[];
                    }) => _61.MsgSend;
                };
                "/cosmos.bank.v1beta1.MsgMultiSend": {
                    aminoType: string;
                    toAmino: ({ inputs, outputs }: _61.MsgMultiSend) => {
                        inputs: {
                            address: string;
                            coins: {
                                denom: string;
                                amount: string;
                            }[];
                        }[];
                        outputs: {
                            address: string;
                            coins: {
                                denom: string;
                                amount: string;
                            }[];
                        }[];
                    };
                    fromAmino: ({ inputs, outputs }: {
                        inputs: {
                            address: string;
                            coins: {
                                denom: string;
                                amount: string;
                            }[];
                        }[];
                        outputs: {
                            address: string;
                            coins: {
                                denom: string;
                                amount: string;
                            }[];
                        }[];
                    }) => _61.MsgMultiSend;
                };
            };
            MsgSend: {
                encode(message: _61.MsgSend, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _61.MsgSend;
                fromPartial(object: {
                    fromAddress?: string;
                    toAddress?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _61.MsgSend;
            };
            MsgSendResponse: {
                encode(_: _61.MsgSendResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _61.MsgSendResponse;
                fromPartial(_: {}): _61.MsgSendResponse;
            };
            MsgMultiSend: {
                encode(message: _61.MsgMultiSend, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _61.MsgMultiSend;
                fromPartial(object: {
                    inputs?: {
                        address?: string;
                        coins?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[];
                    outputs?: {
                        address?: string;
                        coins?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[];
                }): _61.MsgMultiSend;
            };
            MsgMultiSendResponse: {
                encode(_: _61.MsgMultiSendResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _61.MsgMultiSendResponse;
                fromPartial(_: {}): _61.MsgMultiSendResponse;
            };
            QueryBalanceRequest: {
                encode(message: _60.QueryBalanceRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _60.QueryBalanceRequest;
                fromPartial(object: {
                    address?: string;
                    denom?: string;
                }): _60.QueryBalanceRequest;
            };
            QueryBalanceResponse: {
                encode(message: _60.QueryBalanceResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _60.QueryBalanceResponse;
                fromPartial(object: {
                    balance?: {
                        denom?: string;
                        amount?: string;
                    };
                }): _60.QueryBalanceResponse;
            };
            QueryAllBalancesRequest: {
                encode(message: _60.QueryAllBalancesRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _60.QueryAllBalancesRequest;
                fromPartial(object: {
                    address?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _60.QueryAllBalancesRequest;
            };
            QueryAllBalancesResponse: {
                encode(message: _60.QueryAllBalancesResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _60.QueryAllBalancesResponse;
                fromPartial(object: {
                    balances?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _60.QueryAllBalancesResponse;
            };
            QuerySpendableBalancesRequest: {
                encode(message: _60.QuerySpendableBalancesRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _60.QuerySpendableBalancesRequest;
                fromPartial(object: {
                    address?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _60.QuerySpendableBalancesRequest;
            };
            QuerySpendableBalancesResponse: {
                encode(message: _60.QuerySpendableBalancesResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _60.QuerySpendableBalancesResponse;
                fromPartial(object: {
                    balances?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _60.QuerySpendableBalancesResponse;
            };
            QueryTotalSupplyRequest: {
                encode(message: _60.QueryTotalSupplyRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _60.QueryTotalSupplyRequest;
                fromPartial(object: {
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _60.QueryTotalSupplyRequest;
            };
            QueryTotalSupplyResponse: {
                encode(message: _60.QueryTotalSupplyResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _60.QueryTotalSupplyResponse;
                fromPartial(object: {
                    supply?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _60.QueryTotalSupplyResponse;
            };
            QuerySupplyOfRequest: {
                encode(message: _60.QuerySupplyOfRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _60.QuerySupplyOfRequest;
                fromPartial(object: {
                    denom?: string;
                }): _60.QuerySupplyOfRequest;
            };
            QuerySupplyOfResponse: {
                encode(message: _60.QuerySupplyOfResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _60.QuerySupplyOfResponse;
                fromPartial(object: {
                    amount?: {
                        denom?: string;
                        amount?: string;
                    };
                }): _60.QuerySupplyOfResponse;
            };
            QueryParamsRequest: {
                encode(_: _60.QueryParamsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _60.QueryParamsRequest;
                fromPartial(_: {}): _60.QueryParamsRequest;
            };
            QueryParamsResponse: {
                encode(message: _60.QueryParamsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _60.QueryParamsResponse;
                fromPartial(object: {
                    params?: {
                        sendEnabled?: {
                            denom?: string;
                            enabled?: boolean;
                        }[];
                        defaultSendEnabled?: boolean;
                    };
                }): _60.QueryParamsResponse;
            };
            QueryDenomsMetadataRequest: {
                encode(message: _60.QueryDenomsMetadataRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _60.QueryDenomsMetadataRequest;
                fromPartial(object: {
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _60.QueryDenomsMetadataRequest;
            };
            QueryDenomsMetadataResponse: {
                encode(message: _60.QueryDenomsMetadataResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _60.QueryDenomsMetadataResponse;
                fromPartial(object: {
                    metadatas?: {
                        description?: string;
                        denomUnits?: {
                            denom?: string;
                            exponent?: number;
                            aliases?: string[];
                        }[];
                        base?: string;
                        display?: string;
                        name?: string;
                        symbol?: string;
                        uri?: string;
                        uriHash?: string;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _60.QueryDenomsMetadataResponse;
            };
            QueryDenomMetadataRequest: {
                encode(message: _60.QueryDenomMetadataRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _60.QueryDenomMetadataRequest;
                fromPartial(object: {
                    denom?: string;
                }): _60.QueryDenomMetadataRequest;
            };
            QueryDenomMetadataResponse: {
                encode(message: _60.QueryDenomMetadataResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _60.QueryDenomMetadataResponse;
                fromPartial(object: {
                    metadata?: {
                        description?: string;
                        denomUnits?: {
                            denom?: string;
                            exponent?: number;
                            aliases?: string[];
                        }[];
                        base?: string;
                        display?: string;
                        name?: string;
                        symbol?: string;
                        uri?: string;
                        uriHash?: string;
                    };
                }): _60.QueryDenomMetadataResponse;
            };
            QueryDenomOwnersRequest: {
                encode(message: _60.QueryDenomOwnersRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _60.QueryDenomOwnersRequest;
                fromPartial(object: {
                    denom?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _60.QueryDenomOwnersRequest;
            };
            DenomOwner: {
                encode(message: _60.DenomOwner, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _60.DenomOwner;
                fromPartial(object: {
                    address?: string;
                    balance?: {
                        denom?: string;
                        amount?: string;
                    };
                }): _60.DenomOwner;
            };
            QueryDenomOwnersResponse: {
                encode(message: _60.QueryDenomOwnersResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _60.QueryDenomOwnersResponse;
                fromPartial(object: {
                    denomOwners?: {
                        address?: string;
                        balance?: {
                            denom?: string;
                            amount?: string;
                        };
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _60.QueryDenomOwnersResponse;
            };
            GenesisState: {
                encode(message: _59.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _59.GenesisState;
                fromPartial(object: {
                    params?: {
                        sendEnabled?: {
                            denom?: string;
                            enabled?: boolean;
                        }[];
                        defaultSendEnabled?: boolean;
                    };
                    balances?: {
                        address?: string;
                        coins?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[];
                    supply?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    denomMetadata?: {
                        description?: string;
                        denomUnits?: {
                            denom?: string;
                            exponent?: number;
                            aliases?: string[];
                        }[];
                        base?: string;
                        display?: string;
                        name?: string;
                        symbol?: string;
                        uri?: string;
                        uriHash?: string;
                    }[];
                }): _59.GenesisState;
            };
            Balance: {
                encode(message: _59.Balance, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _59.Balance;
                fromPartial(object: {
                    address?: string;
                    coins?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _59.Balance;
            };
            Params: {
                encode(message: _58.Params, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _58.Params;
                fromPartial(object: {
                    sendEnabled?: {
                        denom?: string;
                        enabled?: boolean;
                    }[];
                    defaultSendEnabled?: boolean;
                }): _58.Params;
            };
            SendEnabled: {
                encode(message: _58.SendEnabled, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _58.SendEnabled;
                fromPartial(object: {
                    denom?: string;
                    enabled?: boolean;
                }): _58.SendEnabled;
            };
            Input: {
                encode(message: _58.Input, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _58.Input;
                fromPartial(object: {
                    address?: string;
                    coins?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _58.Input;
            };
            Output: {
                encode(message: _58.Output, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _58.Output;
                fromPartial(object: {
                    address?: string;
                    coins?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _58.Output;
            };
            Supply: {
                encode(message: _58.Supply, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _58.Supply;
                fromPartial(object: {
                    total?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _58.Supply;
            };
            DenomUnit: {
                encode(message: _58.DenomUnit, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _58.DenomUnit;
                fromPartial(object: {
                    denom?: string;
                    exponent?: number;
                    aliases?: string[];
                }): _58.DenomUnit;
            };
            Metadata: {
                encode(message: _58.Metadata, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _58.Metadata;
                fromPartial(object: {
                    description?: string;
                    denomUnits?: {
                        denom?: string;
                        exponent?: number;
                        aliases?: string[];
                    }[];
                    base?: string;
                    display?: string;
                    name?: string;
                    symbol?: string;
                    uri?: string;
                    uriHash?: string;
                }): _58.Metadata;
            };
            SendAuthorization: {
                encode(message: _57.SendAuthorization, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _57.SendAuthorization;
                fromPartial(object: {
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _57.SendAuthorization;
            };
        };
    }
    namespace base {
        namespace abci {
            const v1beta1: {
                TxResponse: {
                    encode(message: _62.TxResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _62.TxResponse;
                    fromPartial(object: {
                        height?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        txhash?: string;
                        codespace?: string;
                        code?: number;
                        data?: string;
                        rawLog?: string;
                        logs?: {
                            msgIndex?: number;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[];
                        }[];
                        info?: string;
                        gasWanted?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        gasUsed?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        tx?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        timestamp?: string;
                        events?: {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        }[];
                    }): _62.TxResponse;
                };
                ABCIMessageLog: {
                    encode(message: _62.ABCIMessageLog, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _62.ABCIMessageLog;
                    fromPartial(object: {
                        msgIndex?: number;
                        log?: string;
                        events?: {
                            type?: string;
                            attributes?: {
                                key?: string;
                                value?: string;
                            }[];
                        }[];
                    }): _62.ABCIMessageLog;
                };
                StringEvent: {
                    encode(message: _62.StringEvent, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _62.StringEvent;
                    fromPartial(object: {
                        type?: string;
                        attributes?: {
                            key?: string;
                            value?: string;
                        }[];
                    }): _62.StringEvent;
                };
                Attribute: {
                    encode(message: _62.Attribute, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _62.Attribute;
                    fromPartial(object: {
                        key?: string;
                        value?: string;
                    }): _62.Attribute;
                };
                GasInfo: {
                    encode(message: _62.GasInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _62.GasInfo;
                    fromPartial(object: {
                        gasWanted?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        gasUsed?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    }): _62.GasInfo;
                };
                Result: {
                    encode(message: _62.Result, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _62.Result;
                    fromPartial(object: {
                        data?: Uint8Array;
                        log?: string;
                        events?: {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        }[];
                        msgResponses?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                    }): _62.Result;
                };
                SimulationResponse: {
                    encode(message: _62.SimulationResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _62.SimulationResponse;
                    fromPartial(object: {
                        gasInfo?: {
                            gasWanted?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            gasUsed?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                        };
                        result?: {
                            data?: Uint8Array;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: Uint8Array;
                                    value?: Uint8Array;
                                    index?: boolean;
                                }[];
                            }[];
                            msgResponses?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                        };
                    }): _62.SimulationResponse;
                };
                MsgData: {
                    encode(message: _62.MsgData, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _62.MsgData;
                    fromPartial(object: {
                        msgType?: string;
                        data?: Uint8Array;
                    }): _62.MsgData;
                };
                TxMsgData: {
                    encode(message: _62.TxMsgData, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _62.TxMsgData;
                    fromPartial(object: {
                        data?: {
                            msgType?: string;
                            data?: Uint8Array;
                        }[];
                        msgResponses?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                    }): _62.TxMsgData;
                };
                SearchTxsResult: {
                    encode(message: _62.SearchTxsResult, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _62.SearchTxsResult;
                    fromPartial(object: {
                        totalCount?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        count?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        pageNumber?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        pageTotal?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        txs?: {
                            height?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            txhash?: string;
                            codespace?: string;
                            code?: number;
                            data?: string;
                            rawLog?: string;
                            logs?: {
                                msgIndex?: number;
                                log?: string;
                                events?: {
                                    type?: string;
                                    attributes?: {
                                        key?: string;
                                        value?: string;
                                    }[];
                                }[];
                            }[];
                            info?: string;
                            gasWanted?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            gasUsed?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            tx?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            timestamp?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: Uint8Array;
                                    value?: Uint8Array;
                                    index?: boolean;
                                }[];
                            }[];
                        }[];
                    }): _62.SearchTxsResult;
                };
            };
        }
        namespace kv {
            const v1beta1: {
                Pairs: {
                    encode(message: _63.Pairs, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _63.Pairs;
                    fromPartial(object: {
                        pairs?: {
                            key?: Uint8Array;
                            value?: Uint8Array;
                        }[];
                    }): _63.Pairs;
                };
                Pair: {
                    encode(message: _63.Pair, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _63.Pair;
                    fromPartial(object: {
                        key?: Uint8Array;
                        value?: Uint8Array;
                    }): _63.Pair;
                };
            };
        }
        namespace query {
            const v1beta1: {
                PageRequest: {
                    encode(message: _64.PageRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _64.PageRequest;
                    fromPartial(object: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    }): _64.PageRequest;
                };
                PageResponse: {
                    encode(message: _64.PageResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _64.PageResponse;
                    fromPartial(object: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    }): _64.PageResponse;
                };
            };
        }
        namespace reflection {
            const v1beta1: {
                ListAllInterfacesRequest: {
                    encode(_: _65.ListAllInterfacesRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _65.ListAllInterfacesRequest;
                    fromPartial(_: {}): _65.ListAllInterfacesRequest;
                };
                ListAllInterfacesResponse: {
                    encode(message: _65.ListAllInterfacesResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _65.ListAllInterfacesResponse;
                    fromPartial(object: {
                        interfaceNames?: string[];
                    }): _65.ListAllInterfacesResponse;
                };
                ListImplementationsRequest: {
                    encode(message: _65.ListImplementationsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _65.ListImplementationsRequest;
                    fromPartial(object: {
                        interfaceName?: string;
                    }): _65.ListImplementationsRequest;
                };
                ListImplementationsResponse: {
                    encode(message: _65.ListImplementationsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _65.ListImplementationsResponse;
                    fromPartial(object: {
                        implementationMessageNames?: string[];
                    }): _65.ListImplementationsResponse;
                };
            };
            const v2alpha1: {
                AppDescriptor: {
                    encode(message: _66.AppDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _66.AppDescriptor;
                    fromPartial(object: {
                        authn?: {
                            signModes?: {
                                name?: string;
                                number?: number;
                                authnInfoProviderMethodFullname?: string;
                            }[];
                        };
                        chain?: {
                            id?: string;
                        };
                        codec?: {
                            interfaces?: {
                                fullname?: string;
                                interfaceAcceptingMessages?: {
                                    fullname?: string;
                                    fieldDescriptorNames?: string[];
                                }[];
                                interfaceImplementers?: {
                                    fullname?: string;
                                    typeUrl?: string;
                                }[];
                            }[];
                        };
                        configuration?: {
                            bech32AccountAddressPrefix?: string;
                        };
                        queryServices?: {
                            queryServices?: {
                                fullname?: string;
                                isModule?: boolean;
                                methods?: {
                                    name?: string;
                                    fullQueryPath?: string;
                                }[];
                            }[];
                        };
                        tx?: {
                            fullname?: string;
                            msgs?: {
                                msgTypeUrl?: string;
                            }[];
                        };
                    }): _66.AppDescriptor;
                };
                TxDescriptor: {
                    encode(message: _66.TxDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _66.TxDescriptor;
                    fromPartial(object: {
                        fullname?: string;
                        msgs?: {
                            msgTypeUrl?: string;
                        }[];
                    }): _66.TxDescriptor;
                };
                AuthnDescriptor: {
                    encode(message: _66.AuthnDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _66.AuthnDescriptor;
                    fromPartial(object: {
                        signModes?: {
                            name?: string;
                            number?: number;
                            authnInfoProviderMethodFullname?: string;
                        }[];
                    }): _66.AuthnDescriptor;
                };
                SigningModeDescriptor: {
                    encode(message: _66.SigningModeDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _66.SigningModeDescriptor;
                    fromPartial(object: {
                        name?: string;
                        number?: number;
                        authnInfoProviderMethodFullname?: string;
                    }): _66.SigningModeDescriptor;
                };
                ChainDescriptor: {
                    encode(message: _66.ChainDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _66.ChainDescriptor;
                    fromPartial(object: {
                        id?: string;
                    }): _66.ChainDescriptor;
                };
                CodecDescriptor: {
                    encode(message: _66.CodecDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _66.CodecDescriptor;
                    fromPartial(object: {
                        interfaces?: {
                            fullname?: string;
                            interfaceAcceptingMessages?: {
                                fullname?: string;
                                fieldDescriptorNames?: string[];
                            }[];
                            interfaceImplementers?: {
                                fullname?: string;
                                typeUrl?: string;
                            }[];
                        }[];
                    }): _66.CodecDescriptor;
                };
                InterfaceDescriptor: {
                    encode(message: _66.InterfaceDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _66.InterfaceDescriptor;
                    fromPartial(object: {
                        fullname?: string;
                        interfaceAcceptingMessages?: {
                            fullname?: string;
                            fieldDescriptorNames?: string[];
                        }[];
                        interfaceImplementers?: {
                            fullname?: string;
                            typeUrl?: string;
                        }[];
                    }): _66.InterfaceDescriptor;
                };
                InterfaceImplementerDescriptor: {
                    encode(message: _66.InterfaceImplementerDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _66.InterfaceImplementerDescriptor;
                    fromPartial(object: {
                        fullname?: string;
                        typeUrl?: string;
                    }): _66.InterfaceImplementerDescriptor;
                };
                InterfaceAcceptingMessageDescriptor: {
                    encode(message: _66.InterfaceAcceptingMessageDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _66.InterfaceAcceptingMessageDescriptor;
                    fromPartial(object: {
                        fullname?: string;
                        fieldDescriptorNames?: string[];
                    }): _66.InterfaceAcceptingMessageDescriptor;
                };
                ConfigurationDescriptor: {
                    encode(message: _66.ConfigurationDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _66.ConfigurationDescriptor;
                    fromPartial(object: {
                        bech32AccountAddressPrefix?: string;
                    }): _66.ConfigurationDescriptor;
                };
                MsgDescriptor: {
                    encode(message: _66.MsgDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _66.MsgDescriptor;
                    fromPartial(object: {
                        msgTypeUrl?: string;
                    }): _66.MsgDescriptor;
                };
                GetAuthnDescriptorRequest: {
                    encode(_: _66.GetAuthnDescriptorRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _66.GetAuthnDescriptorRequest;
                    fromPartial(_: {}): _66.GetAuthnDescriptorRequest;
                };
                GetAuthnDescriptorResponse: {
                    encode(message: _66.GetAuthnDescriptorResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _66.GetAuthnDescriptorResponse;
                    fromPartial(object: {
                        authn?: {
                            signModes?: {
                                name?: string;
                                number?: number;
                                authnInfoProviderMethodFullname?: string;
                            }[];
                        };
                    }): _66.GetAuthnDescriptorResponse;
                };
                GetChainDescriptorRequest: {
                    encode(_: _66.GetChainDescriptorRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _66.GetChainDescriptorRequest;
                    fromPartial(_: {}): _66.GetChainDescriptorRequest;
                };
                GetChainDescriptorResponse: {
                    encode(message: _66.GetChainDescriptorResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _66.GetChainDescriptorResponse;
                    fromPartial(object: {
                        chain?: {
                            id?: string;
                        };
                    }): _66.GetChainDescriptorResponse;
                };
                GetCodecDescriptorRequest: {
                    encode(_: _66.GetCodecDescriptorRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _66.GetCodecDescriptorRequest;
                    fromPartial(_: {}): _66.GetCodecDescriptorRequest;
                };
                GetCodecDescriptorResponse: {
                    encode(message: _66.GetCodecDescriptorResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _66.GetCodecDescriptorResponse;
                    fromPartial(object: {
                        codec?: {
                            interfaces?: {
                                fullname?: string;
                                interfaceAcceptingMessages?: {
                                    fullname?: string;
                                    fieldDescriptorNames?: string[];
                                }[];
                                interfaceImplementers?: {
                                    fullname?: string;
                                    typeUrl?: string;
                                }[];
                            }[];
                        };
                    }): _66.GetCodecDescriptorResponse;
                };
                GetConfigurationDescriptorRequest: {
                    encode(_: _66.GetConfigurationDescriptorRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _66.GetConfigurationDescriptorRequest;
                    fromPartial(_: {}): _66.GetConfigurationDescriptorRequest;
                };
                GetConfigurationDescriptorResponse: {
                    encode(message: _66.GetConfigurationDescriptorResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _66.GetConfigurationDescriptorResponse;
                    fromPartial(object: {
                        config?: {
                            bech32AccountAddressPrefix?: string;
                        };
                    }): _66.GetConfigurationDescriptorResponse;
                };
                GetQueryServicesDescriptorRequest: {
                    encode(_: _66.GetQueryServicesDescriptorRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _66.GetQueryServicesDescriptorRequest;
                    fromPartial(_: {}): _66.GetQueryServicesDescriptorRequest;
                };
                GetQueryServicesDescriptorResponse: {
                    encode(message: _66.GetQueryServicesDescriptorResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _66.GetQueryServicesDescriptorResponse;
                    fromPartial(object: {
                        queries?: {
                            queryServices?: {
                                fullname?: string;
                                isModule?: boolean;
                                methods?: {
                                    name?: string;
                                    fullQueryPath?: string;
                                }[];
                            }[];
                        };
                    }): _66.GetQueryServicesDescriptorResponse;
                };
                GetTxDescriptorRequest: {
                    encode(_: _66.GetTxDescriptorRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _66.GetTxDescriptorRequest;
                    fromPartial(_: {}): _66.GetTxDescriptorRequest;
                };
                GetTxDescriptorResponse: {
                    encode(message: _66.GetTxDescriptorResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _66.GetTxDescriptorResponse;
                    fromPartial(object: {
                        tx?: {
                            fullname?: string;
                            msgs?: {
                                msgTypeUrl?: string;
                            }[];
                        };
                    }): _66.GetTxDescriptorResponse;
                };
                QueryServicesDescriptor: {
                    encode(message: _66.QueryServicesDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _66.QueryServicesDescriptor;
                    fromPartial(object: {
                        queryServices?: {
                            fullname?: string;
                            isModule?: boolean;
                            methods?: {
                                name?: string;
                                fullQueryPath?: string;
                            }[];
                        }[];
                    }): _66.QueryServicesDescriptor;
                };
                QueryServiceDescriptor: {
                    encode(message: _66.QueryServiceDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _66.QueryServiceDescriptor;
                    fromPartial(object: {
                        fullname?: string;
                        isModule?: boolean;
                        methods?: {
                            name?: string;
                            fullQueryPath?: string;
                        }[];
                    }): _66.QueryServiceDescriptor;
                };
                QueryMethodDescriptor: {
                    encode(message: _66.QueryMethodDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _66.QueryMethodDescriptor;
                    fromPartial(object: {
                        name?: string;
                        fullQueryPath?: string;
                    }): _66.QueryMethodDescriptor;
                };
            };
        }
        namespace snapshots {
            const v1beta1: {
                Snapshot: {
                    encode(message: _67.Snapshot, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _67.Snapshot;
                    fromPartial(object: {
                        height?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        format?: number;
                        chunks?: number;
                        hash?: Uint8Array;
                        metadata?: {
                            chunkHashes?: Uint8Array[];
                        };
                    }): _67.Snapshot;
                };
                Metadata: {
                    encode(message: _67.Metadata, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _67.Metadata;
                    fromPartial(object: {
                        chunkHashes?: Uint8Array[];
                    }): _67.Metadata;
                };
                SnapshotItem: {
                    encode(message: _67.SnapshotItem, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _67.SnapshotItem;
                    fromPartial(object: {
                        store?: {
                            name?: string;
                        };
                        iavl?: {
                            key?: Uint8Array;
                            value?: Uint8Array;
                            version?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            height?: number;
                        };
                        extension?: {
                            name?: string;
                            format?: number;
                        };
                        extensionPayload?: {
                            payload?: Uint8Array;
                        };
                        kv?: {
                            key?: Uint8Array;
                            value?: Uint8Array;
                        };
                        schema?: {
                            keys?: Uint8Array[];
                        };
                    }): _67.SnapshotItem;
                };
                SnapshotStoreItem: {
                    encode(message: _67.SnapshotStoreItem, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _67.SnapshotStoreItem;
                    fromPartial(object: {
                        name?: string;
                    }): _67.SnapshotStoreItem;
                };
                SnapshotIAVLItem: {
                    encode(message: _67.SnapshotIAVLItem, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _67.SnapshotIAVLItem;
                    fromPartial(object: {
                        key?: Uint8Array;
                        value?: Uint8Array;
                        version?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        height?: number;
                    }): _67.SnapshotIAVLItem;
                };
                SnapshotExtensionMeta: {
                    encode(message: _67.SnapshotExtensionMeta, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _67.SnapshotExtensionMeta;
                    fromPartial(object: {
                        name?: string;
                        format?: number;
                    }): _67.SnapshotExtensionMeta;
                };
                SnapshotExtensionPayload: {
                    encode(message: _67.SnapshotExtensionPayload, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _67.SnapshotExtensionPayload;
                    fromPartial(object: {
                        payload?: Uint8Array;
                    }): _67.SnapshotExtensionPayload;
                };
                SnapshotKVItem: {
                    encode(message: _67.SnapshotKVItem, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _67.SnapshotKVItem;
                    fromPartial(object: {
                        key?: Uint8Array;
                        value?: Uint8Array;
                    }): _67.SnapshotKVItem;
                };
                SnapshotSchema: {
                    encode(message: _67.SnapshotSchema, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _67.SnapshotSchema;
                    fromPartial(object: {
                        keys?: Uint8Array[];
                    }): _67.SnapshotSchema;
                };
            };
        }
        namespace store {
            const v1beta1: {
                StoreKVPair: {
                    encode(message: _69.StoreKVPair, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _69.StoreKVPair;
                    fromPartial(object: {
                        storeKey?: string;
                        delete?: boolean;
                        key?: Uint8Array;
                        value?: Uint8Array;
                    }): _69.StoreKVPair;
                };
                CommitInfo: {
                    encode(message: _68.CommitInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _68.CommitInfo;
                    fromPartial(object: {
                        version?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        storeInfos?: {
                            name?: string;
                            commitId?: {
                                version?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                hash?: Uint8Array;
                            };
                        }[];
                    }): _68.CommitInfo;
                };
                StoreInfo: {
                    encode(message: _68.StoreInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _68.StoreInfo;
                    fromPartial(object: {
                        name?: string;
                        commitId?: {
                            version?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            hash?: Uint8Array;
                        };
                    }): _68.StoreInfo;
                };
                CommitID: {
                    encode(message: _68.CommitID, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _68.CommitID;
                    fromPartial(object: {
                        version?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        hash?: Uint8Array;
                    }): _68.CommitID;
                };
            };
        }
        namespace tendermint {
            const v1beta1: {
                ServiceClientImpl: typeof _257.ServiceClientImpl;
                createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                    getNodeInfo(request?: _70.GetNodeInfoRequest): Promise<_70.GetNodeInfoResponse>;
                    getSyncing(request?: _70.GetSyncingRequest): Promise<_70.GetSyncingResponse>;
                    getLatestBlock(request?: _70.GetLatestBlockRequest): Promise<_70.GetLatestBlockResponse>;
                    getBlockByHeight(request: _70.GetBlockByHeightRequest): Promise<_70.GetBlockByHeightResponse>;
                    getLatestValidatorSet(request?: _70.GetLatestValidatorSetRequest): Promise<_70.GetLatestValidatorSetResponse>;
                    getValidatorSetByHeight(request: _70.GetValidatorSetByHeightRequest): Promise<_70.GetValidatorSetByHeightResponse>;
                };
                LCDQueryClient: typeof _239.LCDQueryClient;
                GetValidatorSetByHeightRequest: {
                    encode(message: _70.GetValidatorSetByHeightRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _70.GetValidatorSetByHeightRequest;
                    fromPartial(object: {
                        height?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        pagination?: {
                            key?: Uint8Array;
                            offset?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            limit?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            countTotal?: boolean;
                            reverse?: boolean;
                        };
                    }): _70.GetValidatorSetByHeightRequest;
                };
                GetValidatorSetByHeightResponse: {
                    encode(message: _70.GetValidatorSetByHeightResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _70.GetValidatorSetByHeightResponse;
                    fromPartial(object: {
                        blockHeight?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        validators?: {
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            votingPower?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            proposerPriority?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                        }[];
                        pagination?: {
                            nextKey?: Uint8Array;
                            total?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                        };
                    }): _70.GetValidatorSetByHeightResponse;
                };
                GetLatestValidatorSetRequest: {
                    encode(message: _70.GetLatestValidatorSetRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _70.GetLatestValidatorSetRequest;
                    fromPartial(object: {
                        pagination?: {
                            key?: Uint8Array;
                            offset?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            limit?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            countTotal?: boolean;
                            reverse?: boolean;
                        };
                    }): _70.GetLatestValidatorSetRequest;
                };
                GetLatestValidatorSetResponse: {
                    encode(message: _70.GetLatestValidatorSetResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _70.GetLatestValidatorSetResponse;
                    fromPartial(object: {
                        blockHeight?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        validators?: {
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            votingPower?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            proposerPriority?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                        }[];
                        pagination?: {
                            nextKey?: Uint8Array;
                            total?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                        };
                    }): _70.GetLatestValidatorSetResponse;
                };
                Validator: {
                    encode(message: _70.Validator, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _70.Validator;
                    fromPartial(object: {
                        address?: string;
                        pubKey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        votingPower?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        proposerPriority?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    }): _70.Validator;
                };
                GetBlockByHeightRequest: {
                    encode(message: _70.GetBlockByHeightRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _70.GetBlockByHeightRequest;
                    fromPartial(object: {
                        height?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    }): _70.GetBlockByHeightRequest;
                };
                GetBlockByHeightResponse: {
                    encode(message: _70.GetBlockByHeightResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _70.GetBlockByHeightResponse;
                    fromPartial(object: {
                        blockId?: {
                            hash?: Uint8Array;
                            partSetHeader?: {
                                total?: number;
                                hash?: Uint8Array;
                            };
                        };
                        block?: {
                            header?: {
                                version?: {
                                    block?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                        and?: (other: string | number | import("long").default) => import("long").default;
                                        compare?: (other: string | number | import("long").default) => number;
                                        comp?: (other: string | number | import("long").default) => number;
                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                        equals?: (other: string | number | import("long").default) => boolean;
                                        eq?: (other: string | number | import("long").default) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                        gt?: (other: string | number | import("long").default) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        gte?: (other: string | number | import("long").default) => boolean;
                                        ge?: (other: string | number | import("long").default) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                        lt?: (other: string | number | import("long").default) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        lte?: (other: string | number | import("long").default) => boolean;
                                        le?: (other: string | number | import("long").default) => boolean;
                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                        negate?: () => import("long").default;
                                        neg?: () => import("long").default;
                                        not?: () => import("long").default;
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                        neq?: (other: string | number | import("long").default) => boolean;
                                        ne?: (other: string | number | import("long").default) => boolean;
                                        or?: (other: string | number | import("long").default) => import("long").default;
                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long").default;
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long").default;
                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                    };
                                    app?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                        and?: (other: string | number | import("long").default) => import("long").default;
                                        compare?: (other: string | number | import("long").default) => number;
                                        comp?: (other: string | number | import("long").default) => number;
                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                        equals?: (other: string | number | import("long").default) => boolean;
                                        eq?: (other: string | number | import("long").default) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                        gt?: (other: string | number | import("long").default) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        gte?: (other: string | number | import("long").default) => boolean;
                                        ge?: (other: string | number | import("long").default) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                        lt?: (other: string | number | import("long").default) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        lte?: (other: string | number | import("long").default) => boolean;
                                        le?: (other: string | number | import("long").default) => boolean;
                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                        negate?: () => import("long").default;
                                        neg?: () => import("long").default;
                                        not?: () => import("long").default;
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                        neq?: (other: string | number | import("long").default) => boolean;
                                        ne?: (other: string | number | import("long").default) => boolean;
                                        or?: (other: string | number | import("long").default) => import("long").default;
                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long").default;
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long").default;
                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                    };
                                };
                                chainId?: string;
                                height?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                time?: Date;
                                lastBlockId?: {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    };
                                };
                                lastCommitHash?: Uint8Array;
                                dataHash?: Uint8Array;
                                validatorsHash?: Uint8Array;
                                nextValidatorsHash?: Uint8Array;
                                consensusHash?: Uint8Array;
                                appHash?: Uint8Array;
                                lastResultsHash?: Uint8Array;
                                evidenceHash?: Uint8Array;
                                proposerAddress?: Uint8Array;
                            };
                            data?: {
                                txs?: Uint8Array[];
                            };
                            evidence?: {
                                evidence?: {
                                    duplicateVoteEvidence?: {
                                        voteA?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: {
                                                high?: number;
                                                low?: number;
                                                unsigned?: boolean;
                                                add?: (addend: string | number | import("long").default) => import("long").default;
                                                and?: (other: string | number | import("long").default) => import("long").default;
                                                compare?: (other: string | number | import("long").default) => number;
                                                comp?: (other: string | number | import("long").default) => number;
                                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                                equals?: (other: string | number | import("long").default) => boolean;
                                                eq?: (other: string | number | import("long").default) => boolean;
                                                getHighBits?: () => number;
                                                getHighBitsUnsigned?: () => number;
                                                getLowBits?: () => number;
                                                getLowBitsUnsigned?: () => number;
                                                getNumBitsAbs?: () => number;
                                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                                gt?: (other: string | number | import("long").default) => boolean;
                                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                gte?: (other: string | number | import("long").default) => boolean;
                                                ge?: (other: string | number | import("long").default) => boolean;
                                                isEven?: () => boolean;
                                                isNegative?: () => boolean;
                                                isOdd?: () => boolean;
                                                isPositive?: () => boolean;
                                                isZero?: () => boolean;
                                                eqz?: () => boolean;
                                                lessThan?: (other: string | number | import("long").default) => boolean;
                                                lt?: (other: string | number | import("long").default) => boolean;
                                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                lte?: (other: string | number | import("long").default) => boolean;
                                                le?: (other: string | number | import("long").default) => boolean;
                                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                                mod?: (other: string | number | import("long").default) => import("long").default;
                                                rem?: (other: string | number | import("long").default) => import("long").default;
                                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                negate?: () => import("long").default;
                                                neg?: () => import("long").default;
                                                not?: () => import("long").default;
                                                countLeadingZeros?: () => number;
                                                clz?: () => number;
                                                countTrailingZeros?: () => number;
                                                ctz?: () => number;
                                                notEquals?: (other: string | number | import("long").default) => boolean;
                                                neq?: (other: string | number | import("long").default) => boolean;
                                                ne?: (other: string | number | import("long").default) => boolean;
                                                or?: (other: string | number | import("long").default) => import("long").default;
                                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                shl?: (numBits: number | import("long").default) => import("long").default;
                                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                shr?: (numBits: number | import("long").default) => import("long").default;
                                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                shru?: (numBits: number | import("long").default) => import("long").default;
                                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                toInt?: () => number;
                                                toNumber?: () => number;
                                                toBytes?: (le?: boolean) => number[];
                                                toBytesLE?: () => number[];
                                                toBytesBE?: () => number[];
                                                toSigned?: () => import("long").default;
                                                toString?: (radix?: number) => string;
                                                toUnsigned?: () => import("long").default;
                                                xor?: (other: string | number | import("long").default) => import("long").default;
                                            };
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        };
                                        voteB?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: {
                                                high?: number;
                                                low?: number;
                                                unsigned?: boolean;
                                                add?: (addend: string | number | import("long").default) => import("long").default;
                                                and?: (other: string | number | import("long").default) => import("long").default;
                                                compare?: (other: string | number | import("long").default) => number;
                                                comp?: (other: string | number | import("long").default) => number;
                                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                                equals?: (other: string | number | import("long").default) => boolean;
                                                eq?: (other: string | number | import("long").default) => boolean;
                                                getHighBits?: () => number;
                                                getHighBitsUnsigned?: () => number;
                                                getLowBits?: () => number;
                                                getLowBitsUnsigned?: () => number;
                                                getNumBitsAbs?: () => number;
                                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                                gt?: (other: string | number | import("long").default) => boolean;
                                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                gte?: (other: string | number | import("long").default) => boolean;
                                                ge?: (other: string | number | import("long").default) => boolean;
                                                isEven?: () => boolean;
                                                isNegative?: () => boolean;
                                                isOdd?: () => boolean;
                                                isPositive?: () => boolean;
                                                isZero?: () => boolean;
                                                eqz?: () => boolean;
                                                lessThan?: (other: string | number | import("long").default) => boolean;
                                                lt?: (other: string | number | import("long").default) => boolean;
                                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                lte?: (other: string | number | import("long").default) => boolean;
                                                le?: (other: string | number | import("long").default) => boolean;
                                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                                mod?: (other: string | number | import("long").default) => import("long").default;
                                                rem?: (other: string | number | import("long").default) => import("long").default;
                                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                negate?: () => import("long").default;
                                                neg?: () => import("long").default;
                                                not?: () => import("long").default;
                                                countLeadingZeros?: () => number;
                                                clz?: () => number;
                                                countTrailingZeros?: () => number;
                                                ctz?: () => number;
                                                notEquals?: (other: string | number | import("long").default) => boolean;
                                                neq?: (other: string | number | import("long").default) => boolean;
                                                ne?: (other: string | number | import("long").default) => boolean;
                                                or?: (other: string | number | import("long").default) => import("long").default;
                                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                shl?: (numBits: number | import("long").default) => import("long").default;
                                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                shr?: (numBits: number | import("long").default) => import("long").default;
                                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                shru?: (numBits: number | import("long").default) => import("long").default;
                                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                toInt?: () => number;
                                                toNumber?: () => number;
                                                toBytes?: (le?: boolean) => number[];
                                                toBytesLE?: () => number[];
                                                toBytesBE?: () => number[];
                                                toSigned?: () => import("long").default;
                                                toString?: (radix?: number) => string;
                                                toUnsigned?: () => import("long").default;
                                                xor?: (other: string | number | import("long").default) => import("long").default;
                                            };
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        };
                                        totalVotingPower?: {
                                            high?: number;
                                            low?: number;
                                            unsigned?: boolean;
                                            add?: (addend: string | number | import("long").default) => import("long").default;
                                            and?: (other: string | number | import("long").default) => import("long").default;
                                            compare?: (other: string | number | import("long").default) => number;
                                            comp?: (other: string | number | import("long").default) => number;
                                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                                            div?: (divisor: string | number | import("long").default) => import("long").default;
                                            equals?: (other: string | number | import("long").default) => boolean;
                                            eq?: (other: string | number | import("long").default) => boolean;
                                            getHighBits?: () => number;
                                            getHighBitsUnsigned?: () => number;
                                            getLowBits?: () => number;
                                            getLowBitsUnsigned?: () => number;
                                            getNumBitsAbs?: () => number;
                                            greaterThan?: (other: string | number | import("long").default) => boolean;
                                            gt?: (other: string | number | import("long").default) => boolean;
                                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            gte?: (other: string | number | import("long").default) => boolean;
                                            ge?: (other: string | number | import("long").default) => boolean;
                                            isEven?: () => boolean;
                                            isNegative?: () => boolean;
                                            isOdd?: () => boolean;
                                            isPositive?: () => boolean;
                                            isZero?: () => boolean;
                                            eqz?: () => boolean;
                                            lessThan?: (other: string | number | import("long").default) => boolean;
                                            lt?: (other: string | number | import("long").default) => boolean;
                                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            lte?: (other: string | number | import("long").default) => boolean;
                                            le?: (other: string | number | import("long").default) => boolean;
                                            modulo?: (other: string | number | import("long").default) => import("long").default;
                                            mod?: (other: string | number | import("long").default) => import("long").default;
                                            rem?: (other: string | number | import("long").default) => import("long").default;
                                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                            negate?: () => import("long").default;
                                            neg?: () => import("long").default;
                                            not?: () => import("long").default;
                                            countLeadingZeros?: () => number;
                                            clz?: () => number;
                                            countTrailingZeros?: () => number;
                                            ctz?: () => number;
                                            notEquals?: (other: string | number | import("long").default) => boolean;
                                            neq?: (other: string | number | import("long").default) => boolean;
                                            ne?: (other: string | number | import("long").default) => boolean;
                                            or?: (other: string | number | import("long").default) => import("long").default;
                                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                            shl?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                            shr?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                            shru?: (numBits: number | import("long").default) => import("long").default;
                                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                            rotl?: (numBits: number | import("long").default) => import("long").default;
                                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                            rotr?: (numBits: number | import("long").default) => import("long").default;
                                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            toInt?: () => number;
                                            toNumber?: () => number;
                                            toBytes?: (le?: boolean) => number[];
                                            toBytesLE?: () => number[];
                                            toBytesBE?: () => number[];
                                            toSigned?: () => import("long").default;
                                            toString?: (radix?: number) => string;
                                            toUnsigned?: () => import("long").default;
                                            xor?: (other: string | number | import("long").default) => import("long").default;
                                        };
                                        validatorPower?: {
                                            high?: number;
                                            low?: number;
                                            unsigned?: boolean;
                                            add?: (addend: string | number | import("long").default) => import("long").default;
                                            and?: (other: string | number | import("long").default) => import("long").default;
                                            compare?: (other: string | number | import("long").default) => number;
                                            comp?: (other: string | number | import("long").default) => number;
                                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                                            div?: (divisor: string | number | import("long").default) => import("long").default;
                                            equals?: (other: string | number | import("long").default) => boolean;
                                            eq?: (other: string | number | import("long").default) => boolean;
                                            getHighBits?: () => number;
                                            getHighBitsUnsigned?: () => number;
                                            getLowBits?: () => number;
                                            getLowBitsUnsigned?: () => number;
                                            getNumBitsAbs?: () => number;
                                            greaterThan?: (other: string | number | import("long").default) => boolean;
                                            gt?: (other: string | number | import("long").default) => boolean;
                                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            gte?: (other: string | number | import("long").default) => boolean;
                                            ge?: (other: string | number | import("long").default) => boolean;
                                            isEven?: () => boolean;
                                            isNegative?: () => boolean;
                                            isOdd?: () => boolean;
                                            isPositive?: () => boolean;
                                            isZero?: () => boolean;
                                            eqz?: () => boolean;
                                            lessThan?: (other: string | number | import("long").default) => boolean;
                                            lt?: (other: string | number | import("long").default) => boolean;
                                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            lte?: (other: string | number | import("long").default) => boolean;
                                            le?: (other: string | number | import("long").default) => boolean;
                                            modulo?: (other: string | number | import("long").default) => import("long").default;
                                            mod?: (other: string | number | import("long").default) => import("long").default;
                                            rem?: (other: string | number | import("long").default) => import("long").default;
                                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                            negate?: () => import("long").default;
                                            neg?: () => import("long").default;
                                            not?: () => import("long").default;
                                            countLeadingZeros?: () => number;
                                            clz?: () => number;
                                            countTrailingZeros?: () => number;
                                            ctz?: () => number;
                                            notEquals?: (other: string | number | import("long").default) => boolean;
                                            neq?: (other: string | number | import("long").default) => boolean;
                                            ne?: (other: string | number | import("long").default) => boolean;
                                            or?: (other: string | number | import("long").default) => import("long").default;
                                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                            shl?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                            shr?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                            shru?: (numBits: number | import("long").default) => import("long").default;
                                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                            rotl?: (numBits: number | import("long").default) => import("long").default;
                                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                            rotr?: (numBits: number | import("long").default) => import("long").default;
                                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            toInt?: () => number;
                                            toNumber?: () => number;
                                            toBytes?: (le?: boolean) => number[];
                                            toBytesLE?: () => number[];
                                            toBytesBE?: () => number[];
                                            toSigned?: () => import("long").default;
                                            toString?: (radix?: number) => string;
                                            toUnsigned?: () => import("long").default;
                                            xor?: (other: string | number | import("long").default) => import("long").default;
                                        };
                                        timestamp?: Date;
                                    };
                                    lightClientAttackEvidence?: {
                                        conflictingBlock?: {
                                            signedHeader?: {
                                                header?: {
                                                    version?: {
                                                        block?: {
                                                            high?: number;
                                                            low?: number;
                                                            unsigned?: boolean;
                                                            add?: (addend: string | number | import("long").default) => import("long").default;
                                                            and?: (other: string | number | import("long").default) => import("long").default;
                                                            compare?: (other: string | number | import("long").default) => number;
                                                            comp?: (other: string | number | import("long").default) => number;
                                                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                            div?: (divisor: string | number | import("long").default) => import("long").default;
                                                            equals?: (other: string | number | import("long").default) => boolean;
                                                            eq?: (other: string | number | import("long").default) => boolean;
                                                            getHighBits?: () => number;
                                                            getHighBitsUnsigned?: () => number;
                                                            getLowBits?: () => number;
                                                            getLowBitsUnsigned?: () => number;
                                                            getNumBitsAbs?: () => number;
                                                            greaterThan?: (other: string | number | import("long").default) => boolean;
                                                            gt?: (other: string | number | import("long").default) => boolean;
                                                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                            gte?: (other: string | number | import("long").default) => boolean;
                                                            ge?: (other: string | number | import("long").default) => boolean;
                                                            isEven?: () => boolean;
                                                            isNegative?: () => boolean;
                                                            isOdd?: () => boolean;
                                                            isPositive?: () => boolean;
                                                            isZero?: () => boolean;
                                                            eqz?: () => boolean;
                                                            lessThan?: (other: string | number | import("long").default) => boolean;
                                                            lt?: (other: string | number | import("long").default) => boolean;
                                                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                            lte?: (other: string | number | import("long").default) => boolean;
                                                            le?: (other: string | number | import("long").default) => boolean;
                                                            modulo?: (other: string | number | import("long").default) => import("long").default;
                                                            mod?: (other: string | number | import("long").default) => import("long").default;
                                                            rem?: (other: string | number | import("long").default) => import("long").default;
                                                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                            negate?: () => import("long").default;
                                                            neg?: () => import("long").default;
                                                            not?: () => import("long").default;
                                                            countLeadingZeros?: () => number;
                                                            clz?: () => number;
                                                            countTrailingZeros?: () => number;
                                                            ctz?: () => number;
                                                            notEquals?: (other: string | number | import("long").default) => boolean;
                                                            neq?: (other: string | number | import("long").default) => boolean;
                                                            ne?: (other: string | number | import("long").default) => boolean;
                                                            or?: (other: string | number | import("long").default) => import("long").default;
                                                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                            shl?: (numBits: number | import("long").default) => import("long").default;
                                                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                            shr?: (numBits: number | import("long").default) => import("long").default;
                                                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                            shru?: (numBits: number | import("long").default) => import("long").default;
                                                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                            rotl?: (numBits: number | import("long").default) => import("long").default;
                                                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                            rotr?: (numBits: number | import("long").default) => import("long").default;
                                                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                            toInt?: () => number;
                                                            toNumber?: () => number;
                                                            toBytes?: (le?: boolean) => number[];
                                                            toBytesLE?: () => number[];
                                                            toBytesBE?: () => number[];
                                                            toSigned?: () => import("long").default;
                                                            toString?: (radix?: number) => string;
                                                            toUnsigned?: () => import("long").default;
                                                            xor?: (other: string | number | import("long").default) => import("long").default;
                                                        };
                                                        app?: {
                                                            high?: number;
                                                            low?: number;
                                                            unsigned?: boolean;
                                                            add?: (addend: string | number | import("long").default) => import("long").default;
                                                            and?: (other: string | number | import("long").default) => import("long").default;
                                                            compare?: (other: string | number | import("long").default) => number;
                                                            comp?: (other: string | number | import("long").default) => number;
                                                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                            div?: (divisor: string | number | import("long").default) => import("long").default;
                                                            equals?: (other: string | number | import("long").default) => boolean;
                                                            eq?: (other: string | number | import("long").default) => boolean;
                                                            getHighBits?: () => number;
                                                            getHighBitsUnsigned?: () => number;
                                                            getLowBits?: () => number;
                                                            getLowBitsUnsigned?: () => number;
                                                            getNumBitsAbs?: () => number;
                                                            greaterThan?: (other: string | number | import("long").default) => boolean;
                                                            gt?: (other: string | number | import("long").default) => boolean;
                                                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                            gte?: (other: string | number | import("long").default) => boolean;
                                                            ge?: (other: string | number | import("long").default) => boolean;
                                                            isEven?: () => boolean;
                                                            isNegative?: () => boolean;
                                                            isOdd?: () => boolean;
                                                            isPositive?: () => boolean;
                                                            isZero?: () => boolean;
                                                            eqz?: () => boolean;
                                                            lessThan?: (other: string | number | import("long").default) => boolean;
                                                            lt?: (other: string | number | import("long").default) => boolean;
                                                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                            lte?: (other: string | number | import("long").default) => boolean;
                                                            le?: (other: string | number | import("long").default) => boolean;
                                                            modulo?: (other: string | number | import("long").default) => import("long").default;
                                                            mod?: (other: string | number | import("long").default) => import("long").default;
                                                            rem?: (other: string | number | import("long").default) => import("long").default;
                                                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                            negate?: () => import("long").default;
                                                            neg?: () => import("long").default;
                                                            not?: () => import("long").default;
                                                            countLeadingZeros?: () => number;
                                                            clz?: () => number;
                                                            countTrailingZeros?: () => number;
                                                            ctz?: () => number;
                                                            notEquals?: (other: string | number | import("long").default) => boolean;
                                                            neq?: (other: string | number | import("long").default) => boolean;
                                                            ne?: (other: string | number | import("long").default) => boolean;
                                                            or?: (other: string | number | import("long").default) => import("long").default;
                                                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                            shl?: (numBits: number | import("long").default) => import("long").default;
                                                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                            shr?: (numBits: number | import("long").default) => import("long").default;
                                                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                            shru?: (numBits: number | import("long").default) => import("long").default;
                                                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                            rotl?: (numBits: number | import("long").default) => import("long").default;
                                                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                            rotr?: (numBits: number | import("long").default) => import("long").default;
                                                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                            toInt?: () => number;
                                                            toNumber?: () => number;
                                                            toBytes?: (le?: boolean) => number[];
                                                            toBytesLE?: () => number[];
                                                            toBytesBE?: () => number[];
                                                            toSigned?: () => import("long").default;
                                                            toString?: (radix?: number) => string;
                                                            toUnsigned?: () => import("long").default;
                                                            xor?: (other: string | number | import("long").default) => import("long").default;
                                                        };
                                                    };
                                                    chainId?: string;
                                                    height?: {
                                                        high?: number;
                                                        low?: number;
                                                        unsigned?: boolean;
                                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                                        and?: (other: string | number | import("long").default) => import("long").default;
                                                        compare?: (other: string | number | import("long").default) => number;
                                                        comp?: (other: string | number | import("long").default) => number;
                                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                                        equals?: (other: string | number | import("long").default) => boolean;
                                                        eq?: (other: string | number | import("long").default) => boolean;
                                                        getHighBits?: () => number;
                                                        getHighBitsUnsigned?: () => number;
                                                        getLowBits?: () => number;
                                                        getLowBitsUnsigned?: () => number;
                                                        getNumBitsAbs?: () => number;
                                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                                        gt?: (other: string | number | import("long").default) => boolean;
                                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                        gte?: (other: string | number | import("long").default) => boolean;
                                                        ge?: (other: string | number | import("long").default) => boolean;
                                                        isEven?: () => boolean;
                                                        isNegative?: () => boolean;
                                                        isOdd?: () => boolean;
                                                        isPositive?: () => boolean;
                                                        isZero?: () => boolean;
                                                        eqz?: () => boolean;
                                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                                        lt?: (other: string | number | import("long").default) => boolean;
                                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                        lte?: (other: string | number | import("long").default) => boolean;
                                                        le?: (other: string | number | import("long").default) => boolean;
                                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                        negate?: () => import("long").default;
                                                        neg?: () => import("long").default;
                                                        not?: () => import("long").default;
                                                        countLeadingZeros?: () => number;
                                                        clz?: () => number;
                                                        countTrailingZeros?: () => number;
                                                        ctz?: () => number;
                                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                                        neq?: (other: string | number | import("long").default) => boolean;
                                                        ne?: (other: string | number | import("long").default) => boolean;
                                                        or?: (other: string | number | import("long").default) => import("long").default;
                                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                        toInt?: () => number;
                                                        toNumber?: () => number;
                                                        toBytes?: (le?: boolean) => number[];
                                                        toBytesLE?: () => number[];
                                                        toBytesBE?: () => number[];
                                                        toSigned?: () => import("long").default;
                                                        toString?: (radix?: number) => string;
                                                        toUnsigned?: () => import("long").default;
                                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                                    };
                                                    time?: Date;
                                                    lastBlockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    lastCommitHash?: Uint8Array;
                                                    dataHash?: Uint8Array;
                                                    validatorsHash?: Uint8Array;
                                                    nextValidatorsHash?: Uint8Array;
                                                    consensusHash?: Uint8Array;
                                                    appHash?: Uint8Array;
                                                    lastResultsHash?: Uint8Array;
                                                    evidenceHash?: Uint8Array;
                                                    proposerAddress?: Uint8Array;
                                                };
                                                commit?: {
                                                    height?: {
                                                        high?: number;
                                                        low?: number;
                                                        unsigned?: boolean;
                                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                                        and?: (other: string | number | import("long").default) => import("long").default;
                                                        compare?: (other: string | number | import("long").default) => number;
                                                        comp?: (other: string | number | import("long").default) => number;
                                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                                        equals?: (other: string | number | import("long").default) => boolean;
                                                        eq?: (other: string | number | import("long").default) => boolean;
                                                        getHighBits?: () => number;
                                                        getHighBitsUnsigned?: () => number;
                                                        getLowBits?: () => number;
                                                        getLowBitsUnsigned?: () => number;
                                                        getNumBitsAbs?: () => number;
                                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                                        gt?: (other: string | number | import("long").default) => boolean;
                                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                        gte?: (other: string | number | import("long").default) => boolean;
                                                        ge?: (other: string | number | import("long").default) => boolean;
                                                        isEven?: () => boolean;
                                                        isNegative?: () => boolean;
                                                        isOdd?: () => boolean;
                                                        isPositive?: () => boolean;
                                                        isZero?: () => boolean;
                                                        eqz?: () => boolean;
                                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                                        lt?: (other: string | number | import("long").default) => boolean;
                                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                        lte?: (other: string | number | import("long").default) => boolean;
                                                        le?: (other: string | number | import("long").default) => boolean;
                                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                        negate?: () => import("long").default;
                                                        neg?: () => import("long").default;
                                                        not?: () => import("long").default;
                                                        countLeadingZeros?: () => number;
                                                        clz?: () => number;
                                                        countTrailingZeros?: () => number;
                                                        ctz?: () => number;
                                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                                        neq?: (other: string | number | import("long").default) => boolean;
                                                        ne?: (other: string | number | import("long").default) => boolean;
                                                        or?: (other: string | number | import("long").default) => import("long").default;
                                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                        toInt?: () => number;
                                                        toNumber?: () => number;
                                                        toBytes?: (le?: boolean) => number[];
                                                        toBytesLE?: () => number[];
                                                        toBytesBE?: () => number[];
                                                        toSigned?: () => import("long").default;
                                                        toString?: (radix?: number) => string;
                                                        toUnsigned?: () => import("long").default;
                                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                                    };
                                                    round?: number;
                                                    blockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    signatures?: {
                                                        blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                        validatorAddress?: Uint8Array;
                                                        timestamp?: Date;
                                                        signature?: Uint8Array;
                                                    }[];
                                                };
                                            };
                                            validatorSet?: {
                                                validators?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: {
                                                        high?: number;
                                                        low?: number;
                                                        unsigned?: boolean;
                                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                                        and?: (other: string | number | import("long").default) => import("long").default;
                                                        compare?: (other: string | number | import("long").default) => number;
                                                        comp?: (other: string | number | import("long").default) => number;
                                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                                        equals?: (other: string | number | import("long").default) => boolean;
                                                        eq?: (other: string | number | import("long").default) => boolean;
                                                        getHighBits?: () => number;
                                                        getHighBitsUnsigned?: () => number;
                                                        getLowBits?: () => number;
                                                        getLowBitsUnsigned?: () => number;
                                                        getNumBitsAbs?: () => number;
                                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                                        gt?: (other: string | number | import("long").default) => boolean;
                                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                        gte?: (other: string | number | import("long").default) => boolean;
                                                        ge?: (other: string | number | import("long").default) => boolean;
                                                        isEven?: () => boolean;
                                                        isNegative?: () => boolean;
                                                        isOdd?: () => boolean;
                                                        isPositive?: () => boolean;
                                                        isZero?: () => boolean;
                                                        eqz?: () => boolean;
                                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                                        lt?: (other: string | number | import("long").default) => boolean;
                                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                        lte?: (other: string | number | import("long").default) => boolean;
                                                        le?: (other: string | number | import("long").default) => boolean;
                                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                        negate?: () => import("long").default;
                                                        neg?: () => import("long").default;
                                                        not?: () => import("long").default;
                                                        countLeadingZeros?: () => number;
                                                        clz?: () => number;
                                                        countTrailingZeros?: () => number;
                                                        ctz?: () => number;
                                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                                        neq?: (other: string | number | import("long").default) => boolean;
                                                        ne?: (other: string | number | import("long").default) => boolean;
                                                        or?: (other: string | number | import("long").default) => import("long").default;
                                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                        toInt?: () => number;
                                                        toNumber?: () => number;
                                                        toBytes?: (le?: boolean) => number[];
                                                        toBytesLE?: () => number[];
                                                        toBytesBE?: () => number[];
                                                        toSigned?: () => import("long").default;
                                                        toString?: (radix?: number) => string;
                                                        toUnsigned?: () => import("long").default;
                                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                                    };
                                                    proposerPriority?: {
                                                        high?: number;
                                                        low?: number;
                                                        unsigned?: boolean;
                                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                                        and?: (other: string | number | import("long").default) => import("long").default;
                                                        compare?: (other: string | number | import("long").default) => number;
                                                        comp?: (other: string | number | import("long").default) => number;
                                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                                        equals?: (other: string | number | import("long").default) => boolean;
                                                        eq?: (other: string | number | import("long").default) => boolean;
                                                        getHighBits?: () => number;
                                                        getHighBitsUnsigned?: () => number;
                                                        getLowBits?: () => number;
                                                        getLowBitsUnsigned?: () => number;
                                                        getNumBitsAbs?: () => number;
                                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                                        gt?: (other: string | number | import("long").default) => boolean;
                                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                        gte?: (other: string | number | import("long").default) => boolean;
                                                        ge?: (other: string | number | import("long").default) => boolean;
                                                        isEven?: () => boolean;
                                                        isNegative?: () => boolean;
                                                        isOdd?: () => boolean;
                                                        isPositive?: () => boolean;
                                                        isZero?: () => boolean;
                                                        eqz?: () => boolean;
                                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                                        lt?: (other: string | number | import("long").default) => boolean;
                                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                        lte?: (other: string | number | import("long").default) => boolean;
                                                        le?: (other: string | number | import("long").default) => boolean;
                                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                        negate?: () => import("long").default;
                                                        neg?: () => import("long").default;
                                                        not?: () => import("long").default;
                                                        countLeadingZeros?: () => number;
                                                        clz?: () => number;
                                                        countTrailingZeros?: () => number;
                                                        ctz?: () => number;
                                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                                        neq?: (other: string | number | import("long").default) => boolean;
                                                        ne?: (other: string | number | import("long").default) => boolean;
                                                        or?: (other: string | number | import("long").default) => import("long").default;
                                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                        toInt?: () => number;
                                                        toNumber?: () => number;
                                                        toBytes?: (le?: boolean) => number[];
                                                        toBytesLE?: () => number[];
                                                        toBytesBE?: () => number[];
                                                        toSigned?: () => import("long").default;
                                                        toString?: (radix?: number) => string;
                                                        toUnsigned?: () => import("long").default;
                                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                                    };
                                                }[];
                                                proposer?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: {
                                                        high?: number;
                                                        low?: number;
                                                        unsigned?: boolean;
                                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                                        and?: (other: string | number | import("long").default) => import("long").default;
                                                        compare?: (other: string | number | import("long").default) => number;
                                                        comp?: (other: string | number | import("long").default) => number;
                                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                                        equals?: (other: string | number | import("long").default) => boolean;
                                                        eq?: (other: string | number | import("long").default) => boolean;
                                                        getHighBits?: () => number;
                                                        getHighBitsUnsigned?: () => number;
                                                        getLowBits?: () => number;
                                                        getLowBitsUnsigned?: () => number;
                                                        getNumBitsAbs?: () => number;
                                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                                        gt?: (other: string | number | import("long").default) => boolean;
                                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                        gte?: (other: string | number | import("long").default) => boolean;
                                                        ge?: (other: string | number | import("long").default) => boolean;
                                                        isEven?: () => boolean;
                                                        isNegative?: () => boolean;
                                                        isOdd?: () => boolean;
                                                        isPositive?: () => boolean;
                                                        isZero?: () => boolean;
                                                        eqz?: () => boolean;
                                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                                        lt?: (other: string | number | import("long").default) => boolean;
                                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                        lte?: (other: string | number | import("long").default) => boolean;
                                                        le?: (other: string | number | import("long").default) => boolean;
                                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                        negate?: () => import("long").default;
                                                        neg?: () => import("long").default;
                                                        not?: () => import("long").default;
                                                        countLeadingZeros?: () => number;
                                                        clz?: () => number;
                                                        countTrailingZeros?: () => number;
                                                        ctz?: () => number;
                                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                                        neq?: (other: string | number | import("long").default) => boolean;
                                                        ne?: (other: string | number | import("long").default) => boolean;
                                                        or?: (other: string | number | import("long").default) => import("long").default;
                                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                        toInt?: () => number;
                                                        toNumber?: () => number;
                                                        toBytes?: (le?: boolean) => number[];
                                                        toBytesLE?: () => number[];
                                                        toBytesBE?: () => number[];
                                                        toSigned?: () => import("long").default;
                                                        toString?: (radix?: number) => string;
                                                        toUnsigned?: () => import("long").default;
                                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                                    };
                                                    proposerPriority?: {
                                                        high?: number;
                                                        low?: number;
                                                        unsigned?: boolean;
                                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                                        and?: (other: string | number | import("long").default) => import("long").default;
                                                        compare?: (other: string | number | import("long").default) => number;
                                                        comp?: (other: string | number | import("long").default) => number;
                                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                                        equals?: (other: string | number | import("long").default) => boolean;
                                                        eq?: (other: string | number | import("long").default) => boolean;
                                                        getHighBits?: () => number;
                                                        getHighBitsUnsigned?: () => number;
                                                        getLowBits?: () => number;
                                                        getLowBitsUnsigned?: () => number;
                                                        getNumBitsAbs?: () => number;
                                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                                        gt?: (other: string | number | import("long").default) => boolean;
                                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                        gte?: (other: string | number | import("long").default) => boolean;
                                                        ge?: (other: string | number | import("long").default) => boolean;
                                                        isEven?: () => boolean;
                                                        isNegative?: () => boolean;
                                                        isOdd?: () => boolean;
                                                        isPositive?: () => boolean;
                                                        isZero?: () => boolean;
                                                        eqz?: () => boolean;
                                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                                        lt?: (other: string | number | import("long").default) => boolean;
                                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                        lte?: (other: string | number | import("long").default) => boolean;
                                                        le?: (other: string | number | import("long").default) => boolean;
                                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                        negate?: () => import("long").default;
                                                        neg?: () => import("long").default;
                                                        not?: () => import("long").default;
                                                        countLeadingZeros?: () => number;
                                                        clz?: () => number;
                                                        countTrailingZeros?: () => number;
                                                        ctz?: () => number;
                                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                                        neq?: (other: string | number | import("long").default) => boolean;
                                                        ne?: (other: string | number | import("long").default) => boolean;
                                                        or?: (other: string | number | import("long").default) => import("long").default;
                                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                        toInt?: () => number;
                                                        toNumber?: () => number;
                                                        toBytes?: (le?: boolean) => number[];
                                                        toBytesLE?: () => number[];
                                                        toBytesBE?: () => number[];
                                                        toSigned?: () => import("long").default;
                                                        toString?: (radix?: number) => string;
                                                        toUnsigned?: () => import("long").default;
                                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                                    };
                                                };
                                                totalVotingPower?: {
                                                    high?: number;
                                                    low?: number;
                                                    unsigned?: boolean;
                                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                                    and?: (other: string | number | import("long").default) => import("long").default;
                                                    compare?: (other: string | number | import("long").default) => number;
                                                    comp?: (other: string | number | import("long").default) => number;
                                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                                    equals?: (other: string | number | import("long").default) => boolean;
                                                    eq?: (other: string | number | import("long").default) => boolean;
                                                    getHighBits?: () => number;
                                                    getHighBitsUnsigned?: () => number;
                                                    getLowBits?: () => number;
                                                    getLowBitsUnsigned?: () => number;
                                                    getNumBitsAbs?: () => number;
                                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                                    gt?: (other: string | number | import("long").default) => boolean;
                                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                    gte?: (other: string | number | import("long").default) => boolean;
                                                    ge?: (other: string | number | import("long").default) => boolean;
                                                    isEven?: () => boolean;
                                                    isNegative?: () => boolean;
                                                    isOdd?: () => boolean;
                                                    isPositive?: () => boolean;
                                                    isZero?: () => boolean;
                                                    eqz?: () => boolean;
                                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                                    lt?: (other: string | number | import("long").default) => boolean;
                                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                    lte?: (other: string | number | import("long").default) => boolean;
                                                    le?: (other: string | number | import("long").default) => boolean;
                                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                    negate?: () => import("long").default;
                                                    neg?: () => import("long").default;
                                                    not?: () => import("long").default;
                                                    countLeadingZeros?: () => number;
                                                    clz?: () => number;
                                                    countTrailingZeros?: () => number;
                                                    ctz?: () => number;
                                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                                    neq?: (other: string | number | import("long").default) => boolean;
                                                    ne?: (other: string | number | import("long").default) => boolean;
                                                    or?: (other: string | number | import("long").default) => import("long").default;
                                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                    toInt?: () => number;
                                                    toNumber?: () => number;
                                                    toBytes?: (le?: boolean) => number[];
                                                    toBytesLE?: () => number[];
                                                    toBytesBE?: () => number[];
                                                    toSigned?: () => import("long").default;
                                                    toString?: (radix?: number) => string;
                                                    toUnsigned?: () => import("long").default;
                                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                                };
                                            };
                                        };
                                        commonHeight?: {
                                            high?: number;
                                            low?: number;
                                            unsigned?: boolean;
                                            add?: (addend: string | number | import("long").default) => import("long").default;
                                            and?: (other: string | number | import("long").default) => import("long").default;
                                            compare?: (other: string | number | import("long").default) => number;
                                            comp?: (other: string | number | import("long").default) => number;
                                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                                            div?: (divisor: string | number | import("long").default) => import("long").default;
                                            equals?: (other: string | number | import("long").default) => boolean;
                                            eq?: (other: string | number | import("long").default) => boolean;
                                            getHighBits?: () => number;
                                            getHighBitsUnsigned?: () => number;
                                            getLowBits?: () => number;
                                            getLowBitsUnsigned?: () => number;
                                            getNumBitsAbs?: () => number;
                                            greaterThan?: (other: string | number | import("long").default) => boolean;
                                            gt?: (other: string | number | import("long").default) => boolean;
                                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            gte?: (other: string | number | import("long").default) => boolean;
                                            ge?: (other: string | number | import("long").default) => boolean;
                                            isEven?: () => boolean;
                                            isNegative?: () => boolean;
                                            isOdd?: () => boolean;
                                            isPositive?: () => boolean;
                                            isZero?: () => boolean;
                                            eqz?: () => boolean;
                                            lessThan?: (other: string | number | import("long").default) => boolean;
                                            lt?: (other: string | number | import("long").default) => boolean;
                                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            lte?: (other: string | number | import("long").default) => boolean;
                                            le?: (other: string | number | import("long").default) => boolean;
                                            modulo?: (other: string | number | import("long").default) => import("long").default;
                                            mod?: (other: string | number | import("long").default) => import("long").default;
                                            rem?: (other: string | number | import("long").default) => import("long").default;
                                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                            negate?: () => import("long").default;
                                            neg?: () => import("long").default;
                                            not?: () => import("long").default;
                                            countLeadingZeros?: () => number;
                                            clz?: () => number;
                                            countTrailingZeros?: () => number;
                                            ctz?: () => number;
                                            notEquals?: (other: string | number | import("long").default) => boolean;
                                            neq?: (other: string | number | import("long").default) => boolean;
                                            ne?: (other: string | number | import("long").default) => boolean;
                                            or?: (other: string | number | import("long").default) => import("long").default;
                                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                            shl?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                            shr?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                            shru?: (numBits: number | import("long").default) => import("long").default;
                                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                            rotl?: (numBits: number | import("long").default) => import("long").default;
                                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                            rotr?: (numBits: number | import("long").default) => import("long").default;
                                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            toInt?: () => number;
                                            toNumber?: () => number;
                                            toBytes?: (le?: boolean) => number[];
                                            toBytesLE?: () => number[];
                                            toBytesBE?: () => number[];
                                            toSigned?: () => import("long").default;
                                            toString?: (radix?: number) => string;
                                            toUnsigned?: () => import("long").default;
                                            xor?: (other: string | number | import("long").default) => import("long").default;
                                        };
                                        byzantineValidators?: {
                                            address?: Uint8Array;
                                            pubKey?: {
                                                ed25519?: Uint8Array;
                                                secp256k1?: Uint8Array;
                                            };
                                            votingPower?: {
                                                high?: number;
                                                low?: number;
                                                unsigned?: boolean;
                                                add?: (addend: string | number | import("long").default) => import("long").default;
                                                and?: (other: string | number | import("long").default) => import("long").default;
                                                compare?: (other: string | number | import("long").default) => number;
                                                comp?: (other: string | number | import("long").default) => number;
                                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                                equals?: (other: string | number | import("long").default) => boolean;
                                                eq?: (other: string | number | import("long").default) => boolean;
                                                getHighBits?: () => number;
                                                getHighBitsUnsigned?: () => number;
                                                getLowBits?: () => number;
                                                getLowBitsUnsigned?: () => number;
                                                getNumBitsAbs?: () => number;
                                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                                gt?: (other: string | number | import("long").default) => boolean;
                                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                gte?: (other: string | number | import("long").default) => boolean;
                                                ge?: (other: string | number | import("long").default) => boolean;
                                                isEven?: () => boolean;
                                                isNegative?: () => boolean;
                                                isOdd?: () => boolean;
                                                isPositive?: () => boolean;
                                                isZero?: () => boolean;
                                                eqz?: () => boolean;
                                                lessThan?: (other: string | number | import("long").default) => boolean;
                                                lt?: (other: string | number | import("long").default) => boolean;
                                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                lte?: (other: string | number | import("long").default) => boolean;
                                                le?: (other: string | number | import("long").default) => boolean;
                                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                                mod?: (other: string | number | import("long").default) => import("long").default;
                                                rem?: (other: string | number | import("long").default) => import("long").default;
                                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                negate?: () => import("long").default;
                                                neg?: () => import("long").default;
                                                not?: () => import("long").default;
                                                countLeadingZeros?: () => number;
                                                clz?: () => number;
                                                countTrailingZeros?: () => number;
                                                ctz?: () => number;
                                                notEquals?: (other: string | number | import("long").default) => boolean;
                                                neq?: (other: string | number | import("long").default) => boolean;
                                                ne?: (other: string | number | import("long").default) => boolean;
                                                or?: (other: string | number | import("long").default) => import("long").default;
                                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                shl?: (numBits: number | import("long").default) => import("long").default;
                                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                shr?: (numBits: number | import("long").default) => import("long").default;
                                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                shru?: (numBits: number | import("long").default) => import("long").default;
                                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                toInt?: () => number;
                                                toNumber?: () => number;
                                                toBytes?: (le?: boolean) => number[];
                                                toBytesLE?: () => number[];
                                                toBytesBE?: () => number[];
                                                toSigned?: () => import("long").default;
                                                toString?: (radix?: number) => string;
                                                toUnsigned?: () => import("long").default;
                                                xor?: (other: string | number | import("long").default) => import("long").default;
                                            };
                                            proposerPriority?: {
                                                high?: number;
                                                low?: number;
                                                unsigned?: boolean;
                                                add?: (addend: string | number | import("long").default) => import("long").default;
                                                and?: (other: string | number | import("long").default) => import("long").default;
                                                compare?: (other: string | number | import("long").default) => number;
                                                comp?: (other: string | number | import("long").default) => number;
                                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                                equals?: (other: string | number | import("long").default) => boolean;
                                                eq?: (other: string | number | import("long").default) => boolean;
                                                getHighBits?: () => number;
                                                getHighBitsUnsigned?: () => number;
                                                getLowBits?: () => number;
                                                getLowBitsUnsigned?: () => number;
                                                getNumBitsAbs?: () => number;
                                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                                gt?: (other: string | number | import("long").default) => boolean;
                                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                gte?: (other: string | number | import("long").default) => boolean;
                                                ge?: (other: string | number | import("long").default) => boolean;
                                                isEven?: () => boolean;
                                                isNegative?: () => boolean;
                                                isOdd?: () => boolean;
                                                isPositive?: () => boolean;
                                                isZero?: () => boolean;
                                                eqz?: () => boolean;
                                                lessThan?: (other: string | number | import("long").default) => boolean;
                                                lt?: (other: string | number | import("long").default) => boolean;
                                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                lte?: (other: string | number | import("long").default) => boolean;
                                                le?: (other: string | number | import("long").default) => boolean;
                                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                                mod?: (other: string | number | import("long").default) => import("long").default;
                                                rem?: (other: string | number | import("long").default) => import("long").default;
                                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                negate?: () => import("long").default;
                                                neg?: () => import("long").default;
                                                not?: () => import("long").default;
                                                countLeadingZeros?: () => number;
                                                clz?: () => number;
                                                countTrailingZeros?: () => number;
                                                ctz?: () => number;
                                                notEquals?: (other: string | number | import("long").default) => boolean;
                                                neq?: (other: string | number | import("long").default) => boolean;
                                                ne?: (other: string | number | import("long").default) => boolean;
                                                or?: (other: string | number | import("long").default) => import("long").default;
                                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                shl?: (numBits: number | import("long").default) => import("long").default;
                                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                shr?: (numBits: number | import("long").default) => import("long").default;
                                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                shru?: (numBits: number | import("long").default) => import("long").default;
                                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                toInt?: () => number;
                                                toNumber?: () => number;
                                                toBytes?: (le?: boolean) => number[];
                                                toBytesLE?: () => number[];
                                                toBytesBE?: () => number[];
                                                toSigned?: () => import("long").default;
                                                toString?: (radix?: number) => string;
                                                toUnsigned?: () => import("long").default;
                                                xor?: (other: string | number | import("long").default) => import("long").default;
                                            };
                                        }[];
                                        totalVotingPower?: {
                                            high?: number;
                                            low?: number;
                                            unsigned?: boolean;
                                            add?: (addend: string | number | import("long").default) => import("long").default;
                                            and?: (other: string | number | import("long").default) => import("long").default;
                                            compare?: (other: string | number | import("long").default) => number;
                                            comp?: (other: string | number | import("long").default) => number;
                                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                                            div?: (divisor: string | number | import("long").default) => import("long").default;
                                            equals?: (other: string | number | import("long").default) => boolean;
                                            eq?: (other: string | number | import("long").default) => boolean;
                                            getHighBits?: () => number;
                                            getHighBitsUnsigned?: () => number;
                                            getLowBits?: () => number;
                                            getLowBitsUnsigned?: () => number;
                                            getNumBitsAbs?: () => number;
                                            greaterThan?: (other: string | number | import("long").default) => boolean;
                                            gt?: (other: string | number | import("long").default) => boolean;
                                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            gte?: (other: string | number | import("long").default) => boolean;
                                            ge?: (other: string | number | import("long").default) => boolean;
                                            isEven?: () => boolean;
                                            isNegative?: () => boolean;
                                            isOdd?: () => boolean;
                                            isPositive?: () => boolean;
                                            isZero?: () => boolean;
                                            eqz?: () => boolean;
                                            lessThan?: (other: string | number | import("long").default) => boolean;
                                            lt?: (other: string | number | import("long").default) => boolean;
                                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            lte?: (other: string | number | import("long").default) => boolean;
                                            le?: (other: string | number | import("long").default) => boolean;
                                            modulo?: (other: string | number | import("long").default) => import("long").default;
                                            mod?: (other: string | number | import("long").default) => import("long").default;
                                            rem?: (other: string | number | import("long").default) => import("long").default;
                                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                            negate?: () => import("long").default;
                                            neg?: () => import("long").default;
                                            not?: () => import("long").default;
                                            countLeadingZeros?: () => number;
                                            clz?: () => number;
                                            countTrailingZeros?: () => number;
                                            ctz?: () => number;
                                            notEquals?: (other: string | number | import("long").default) => boolean;
                                            neq?: (other: string | number | import("long").default) => boolean;
                                            ne?: (other: string | number | import("long").default) => boolean;
                                            or?: (other: string | number | import("long").default) => import("long").default;
                                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                            shl?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                            shr?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                            shru?: (numBits: number | import("long").default) => import("long").default;
                                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                            rotl?: (numBits: number | import("long").default) => import("long").default;
                                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                            rotr?: (numBits: number | import("long").default) => import("long").default;
                                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            toInt?: () => number;
                                            toNumber?: () => number;
                                            toBytes?: (le?: boolean) => number[];
                                            toBytesLE?: () => number[];
                                            toBytesBE?: () => number[];
                                            toSigned?: () => import("long").default;
                                            toString?: (radix?: number) => string;
                                            toUnsigned?: () => import("long").default;
                                            xor?: (other: string | number | import("long").default) => import("long").default;
                                        };
                                        timestamp?: Date;
                                    };
                                }[];
                            };
                            lastCommit?: {
                                height?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                round?: number;
                                blockId?: {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    };
                                };
                                signatures?: {
                                    blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                    validatorAddress?: Uint8Array;
                                    timestamp?: Date;
                                    signature?: Uint8Array;
                                }[];
                            };
                        };
                    }): _70.GetBlockByHeightResponse;
                };
                GetLatestBlockRequest: {
                    encode(_: _70.GetLatestBlockRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _70.GetLatestBlockRequest;
                    fromPartial(_: {}): _70.GetLatestBlockRequest;
                };
                GetLatestBlockResponse: {
                    encode(message: _70.GetLatestBlockResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _70.GetLatestBlockResponse;
                    fromPartial(object: {
                        blockId?: {
                            hash?: Uint8Array;
                            partSetHeader?: {
                                total?: number;
                                hash?: Uint8Array;
                            };
                        };
                        block?: {
                            header?: {
                                version?: {
                                    block?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                        and?: (other: string | number | import("long").default) => import("long").default;
                                        compare?: (other: string | number | import("long").default) => number;
                                        comp?: (other: string | number | import("long").default) => number;
                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                        equals?: (other: string | number | import("long").default) => boolean;
                                        eq?: (other: string | number | import("long").default) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                        gt?: (other: string | number | import("long").default) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        gte?: (other: string | number | import("long").default) => boolean;
                                        ge?: (other: string | number | import("long").default) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                        lt?: (other: string | number | import("long").default) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        lte?: (other: string | number | import("long").default) => boolean;
                                        le?: (other: string | number | import("long").default) => boolean;
                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                        negate?: () => import("long").default;
                                        neg?: () => import("long").default;
                                        not?: () => import("long").default;
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                        neq?: (other: string | number | import("long").default) => boolean;
                                        ne?: (other: string | number | import("long").default) => boolean;
                                        or?: (other: string | number | import("long").default) => import("long").default;
                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long").default;
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long").default;
                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                    };
                                    app?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                        and?: (other: string | number | import("long").default) => import("long").default;
                                        compare?: (other: string | number | import("long").default) => number;
                                        comp?: (other: string | number | import("long").default) => number;
                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                        equals?: (other: string | number | import("long").default) => boolean;
                                        eq?: (other: string | number | import("long").default) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                        gt?: (other: string | number | import("long").default) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        gte?: (other: string | number | import("long").default) => boolean;
                                        ge?: (other: string | number | import("long").default) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                        lt?: (other: string | number | import("long").default) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        lte?: (other: string | number | import("long").default) => boolean;
                                        le?: (other: string | number | import("long").default) => boolean;
                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                        negate?: () => import("long").default;
                                        neg?: () => import("long").default;
                                        not?: () => import("long").default;
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                        neq?: (other: string | number | import("long").default) => boolean;
                                        ne?: (other: string | number | import("long").default) => boolean;
                                        or?: (other: string | number | import("long").default) => import("long").default;
                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long").default;
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long").default;
                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                    };
                                };
                                chainId?: string;
                                height?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                time?: Date;
                                lastBlockId?: {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    };
                                };
                                lastCommitHash?: Uint8Array;
                                dataHash?: Uint8Array;
                                validatorsHash?: Uint8Array;
                                nextValidatorsHash?: Uint8Array;
                                consensusHash?: Uint8Array;
                                appHash?: Uint8Array;
                                lastResultsHash?: Uint8Array;
                                evidenceHash?: Uint8Array;
                                proposerAddress?: Uint8Array;
                            };
                            data?: {
                                txs?: Uint8Array[];
                            };
                            evidence?: {
                                evidence?: {
                                    duplicateVoteEvidence?: {
                                        voteA?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: {
                                                high?: number;
                                                low?: number;
                                                unsigned?: boolean;
                                                add?: (addend: string | number | import("long").default) => import("long").default;
                                                and?: (other: string | number | import("long").default) => import("long").default;
                                                compare?: (other: string | number | import("long").default) => number;
                                                comp?: (other: string | number | import("long").default) => number;
                                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                                equals?: (other: string | number | import("long").default) => boolean;
                                                eq?: (other: string | number | import("long").default) => boolean;
                                                getHighBits?: () => number;
                                                getHighBitsUnsigned?: () => number;
                                                getLowBits?: () => number;
                                                getLowBitsUnsigned?: () => number;
                                                getNumBitsAbs?: () => number;
                                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                                gt?: (other: string | number | import("long").default) => boolean;
                                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                gte?: (other: string | number | import("long").default) => boolean;
                                                ge?: (other: string | number | import("long").default) => boolean;
                                                isEven?: () => boolean;
                                                isNegative?: () => boolean;
                                                isOdd?: () => boolean;
                                                isPositive?: () => boolean;
                                                isZero?: () => boolean;
                                                eqz?: () => boolean;
                                                lessThan?: (other: string | number | import("long").default) => boolean;
                                                lt?: (other: string | number | import("long").default) => boolean;
                                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                lte?: (other: string | number | import("long").default) => boolean;
                                                le?: (other: string | number | import("long").default) => boolean;
                                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                                mod?: (other: string | number | import("long").default) => import("long").default;
                                                rem?: (other: string | number | import("long").default) => import("long").default;
                                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                negate?: () => import("long").default;
                                                neg?: () => import("long").default;
                                                not?: () => import("long").default;
                                                countLeadingZeros?: () => number;
                                                clz?: () => number;
                                                countTrailingZeros?: () => number;
                                                ctz?: () => number;
                                                notEquals?: (other: string | number | import("long").default) => boolean;
                                                neq?: (other: string | number | import("long").default) => boolean;
                                                ne?: (other: string | number | import("long").default) => boolean;
                                                or?: (other: string | number | import("long").default) => import("long").default;
                                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                shl?: (numBits: number | import("long").default) => import("long").default;
                                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                shr?: (numBits: number | import("long").default) => import("long").default;
                                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                shru?: (numBits: number | import("long").default) => import("long").default;
                                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                toInt?: () => number;
                                                toNumber?: () => number;
                                                toBytes?: (le?: boolean) => number[];
                                                toBytesLE?: () => number[];
                                                toBytesBE?: () => number[];
                                                toSigned?: () => import("long").default;
                                                toString?: (radix?: number) => string;
                                                toUnsigned?: () => import("long").default;
                                                xor?: (other: string | number | import("long").default) => import("long").default;
                                            };
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        };
                                        voteB?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: {
                                                high?: number;
                                                low?: number;
                                                unsigned?: boolean;
                                                add?: (addend: string | number | import("long").default) => import("long").default;
                                                and?: (other: string | number | import("long").default) => import("long").default;
                                                compare?: (other: string | number | import("long").default) => number;
                                                comp?: (other: string | number | import("long").default) => number;
                                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                                equals?: (other: string | number | import("long").default) => boolean;
                                                eq?: (other: string | number | import("long").default) => boolean;
                                                getHighBits?: () => number;
                                                getHighBitsUnsigned?: () => number;
                                                getLowBits?: () => number;
                                                getLowBitsUnsigned?: () => number;
                                                getNumBitsAbs?: () => number;
                                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                                gt?: (other: string | number | import("long").default) => boolean;
                                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                gte?: (other: string | number | import("long").default) => boolean;
                                                ge?: (other: string | number | import("long").default) => boolean;
                                                isEven?: () => boolean;
                                                isNegative?: () => boolean;
                                                isOdd?: () => boolean;
                                                isPositive?: () => boolean;
                                                isZero?: () => boolean;
                                                eqz?: () => boolean;
                                                lessThan?: (other: string | number | import("long").default) => boolean;
                                                lt?: (other: string | number | import("long").default) => boolean;
                                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                lte?: (other: string | number | import("long").default) => boolean;
                                                le?: (other: string | number | import("long").default) => boolean;
                                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                                mod?: (other: string | number | import("long").default) => import("long").default;
                                                rem?: (other: string | number | import("long").default) => import("long").default;
                                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                negate?: () => import("long").default;
                                                neg?: () => import("long").default;
                                                not?: () => import("long").default;
                                                countLeadingZeros?: () => number;
                                                clz?: () => number;
                                                countTrailingZeros?: () => number;
                                                ctz?: () => number;
                                                notEquals?: (other: string | number | import("long").default) => boolean;
                                                neq?: (other: string | number | import("long").default) => boolean;
                                                ne?: (other: string | number | import("long").default) => boolean;
                                                or?: (other: string | number | import("long").default) => import("long").default;
                                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                shl?: (numBits: number | import("long").default) => import("long").default;
                                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                shr?: (numBits: number | import("long").default) => import("long").default;
                                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                shru?: (numBits: number | import("long").default) => import("long").default;
                                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                toInt?: () => number;
                                                toNumber?: () => number;
                                                toBytes?: (le?: boolean) => number[];
                                                toBytesLE?: () => number[];
                                                toBytesBE?: () => number[];
                                                toSigned?: () => import("long").default;
                                                toString?: (radix?: number) => string;
                                                toUnsigned?: () => import("long").default;
                                                xor?: (other: string | number | import("long").default) => import("long").default;
                                            };
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        };
                                        totalVotingPower?: {
                                            high?: number;
                                            low?: number;
                                            unsigned?: boolean;
                                            add?: (addend: string | number | import("long").default) => import("long").default;
                                            and?: (other: string | number | import("long").default) => import("long").default;
                                            compare?: (other: string | number | import("long").default) => number;
                                            comp?: (other: string | number | import("long").default) => number;
                                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                                            div?: (divisor: string | number | import("long").default) => import("long").default;
                                            equals?: (other: string | number | import("long").default) => boolean;
                                            eq?: (other: string | number | import("long").default) => boolean;
                                            getHighBits?: () => number;
                                            getHighBitsUnsigned?: () => number;
                                            getLowBits?: () => number;
                                            getLowBitsUnsigned?: () => number;
                                            getNumBitsAbs?: () => number;
                                            greaterThan?: (other: string | number | import("long").default) => boolean;
                                            gt?: (other: string | number | import("long").default) => boolean;
                                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            gte?: (other: string | number | import("long").default) => boolean;
                                            ge?: (other: string | number | import("long").default) => boolean;
                                            isEven?: () => boolean;
                                            isNegative?: () => boolean;
                                            isOdd?: () => boolean;
                                            isPositive?: () => boolean;
                                            isZero?: () => boolean;
                                            eqz?: () => boolean;
                                            lessThan?: (other: string | number | import("long").default) => boolean;
                                            lt?: (other: string | number | import("long").default) => boolean;
                                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            lte?: (other: string | number | import("long").default) => boolean;
                                            le?: (other: string | number | import("long").default) => boolean;
                                            modulo?: (other: string | number | import("long").default) => import("long").default;
                                            mod?: (other: string | number | import("long").default) => import("long").default;
                                            rem?: (other: string | number | import("long").default) => import("long").default;
                                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                            negate?: () => import("long").default;
                                            neg?: () => import("long").default;
                                            not?: () => import("long").default;
                                            countLeadingZeros?: () => number;
                                            clz?: () => number;
                                            countTrailingZeros?: () => number;
                                            ctz?: () => number;
                                            notEquals?: (other: string | number | import("long").default) => boolean;
                                            neq?: (other: string | number | import("long").default) => boolean;
                                            ne?: (other: string | number | import("long").default) => boolean;
                                            or?: (other: string | number | import("long").default) => import("long").default;
                                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                            shl?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                            shr?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                            shru?: (numBits: number | import("long").default) => import("long").default;
                                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                            rotl?: (numBits: number | import("long").default) => import("long").default;
                                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                            rotr?: (numBits: number | import("long").default) => import("long").default;
                                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            toInt?: () => number;
                                            toNumber?: () => number;
                                            toBytes?: (le?: boolean) => number[];
                                            toBytesLE?: () => number[];
                                            toBytesBE?: () => number[];
                                            toSigned?: () => import("long").default;
                                            toString?: (radix?: number) => string;
                                            toUnsigned?: () => import("long").default;
                                            xor?: (other: string | number | import("long").default) => import("long").default;
                                        };
                                        validatorPower?: {
                                            high?: number;
                                            low?: number;
                                            unsigned?: boolean;
                                            add?: (addend: string | number | import("long").default) => import("long").default;
                                            and?: (other: string | number | import("long").default) => import("long").default;
                                            compare?: (other: string | number | import("long").default) => number;
                                            comp?: (other: string | number | import("long").default) => number;
                                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                                            div?: (divisor: string | number | import("long").default) => import("long").default;
                                            equals?: (other: string | number | import("long").default) => boolean;
                                            eq?: (other: string | number | import("long").default) => boolean;
                                            getHighBits?: () => number;
                                            getHighBitsUnsigned?: () => number;
                                            getLowBits?: () => number;
                                            getLowBitsUnsigned?: () => number;
                                            getNumBitsAbs?: () => number;
                                            greaterThan?: (other: string | number | import("long").default) => boolean;
                                            gt?: (other: string | number | import("long").default) => boolean;
                                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            gte?: (other: string | number | import("long").default) => boolean;
                                            ge?: (other: string | number | import("long").default) => boolean;
                                            isEven?: () => boolean;
                                            isNegative?: () => boolean;
                                            isOdd?: () => boolean;
                                            isPositive?: () => boolean;
                                            isZero?: () => boolean;
                                            eqz?: () => boolean;
                                            lessThan?: (other: string | number | import("long").default) => boolean;
                                            lt?: (other: string | number | import("long").default) => boolean;
                                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            lte?: (other: string | number | import("long").default) => boolean;
                                            le?: (other: string | number | import("long").default) => boolean;
                                            modulo?: (other: string | number | import("long").default) => import("long").default;
                                            mod?: (other: string | number | import("long").default) => import("long").default;
                                            rem?: (other: string | number | import("long").default) => import("long").default;
                                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                            negate?: () => import("long").default;
                                            neg?: () => import("long").default;
                                            not?: () => import("long").default;
                                            countLeadingZeros?: () => number;
                                            clz?: () => number;
                                            countTrailingZeros?: () => number;
                                            ctz?: () => number;
                                            notEquals?: (other: string | number | import("long").default) => boolean;
                                            neq?: (other: string | number | import("long").default) => boolean;
                                            ne?: (other: string | number | import("long").default) => boolean;
                                            or?: (other: string | number | import("long").default) => import("long").default;
                                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                            shl?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                            shr?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                            shru?: (numBits: number | import("long").default) => import("long").default;
                                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                            rotl?: (numBits: number | import("long").default) => import("long").default;
                                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                            rotr?: (numBits: number | import("long").default) => import("long").default;
                                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            toInt?: () => number;
                                            toNumber?: () => number;
                                            toBytes?: (le?: boolean) => number[];
                                            toBytesLE?: () => number[];
                                            toBytesBE?: () => number[];
                                            toSigned?: () => import("long").default;
                                            toString?: (radix?: number) => string;
                                            toUnsigned?: () => import("long").default;
                                            xor?: (other: string | number | import("long").default) => import("long").default;
                                        };
                                        timestamp?: Date;
                                    };
                                    lightClientAttackEvidence?: {
                                        conflictingBlock?: {
                                            signedHeader?: {
                                                header?: {
                                                    version?: {
                                                        block?: {
                                                            high?: number;
                                                            low?: number;
                                                            unsigned?: boolean;
                                                            add?: (addend: string | number | import("long").default) => import("long").default;
                                                            and?: (other: string | number | import("long").default) => import("long").default;
                                                            compare?: (other: string | number | import("long").default) => number;
                                                            comp?: (other: string | number | import("long").default) => number;
                                                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                            div?: (divisor: string | number | import("long").default) => import("long").default;
                                                            equals?: (other: string | number | import("long").default) => boolean;
                                                            eq?: (other: string | number | import("long").default) => boolean;
                                                            getHighBits?: () => number;
                                                            getHighBitsUnsigned?: () => number;
                                                            getLowBits?: () => number;
                                                            getLowBitsUnsigned?: () => number;
                                                            getNumBitsAbs?: () => number;
                                                            greaterThan?: (other: string | number | import("long").default) => boolean;
                                                            gt?: (other: string | number | import("long").default) => boolean;
                                                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                            gte?: (other: string | number | import("long").default) => boolean;
                                                            ge?: (other: string | number | import("long").default) => boolean;
                                                            isEven?: () => boolean;
                                                            isNegative?: () => boolean;
                                                            isOdd?: () => boolean;
                                                            isPositive?: () => boolean;
                                                            isZero?: () => boolean;
                                                            eqz?: () => boolean;
                                                            lessThan?: (other: string | number | import("long").default) => boolean;
                                                            lt?: (other: string | number | import("long").default) => boolean;
                                                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                            lte?: (other: string | number | import("long").default) => boolean;
                                                            le?: (other: string | number | import("long").default) => boolean;
                                                            modulo?: (other: string | number | import("long").default) => import("long").default;
                                                            mod?: (other: string | number | import("long").default) => import("long").default;
                                                            rem?: (other: string | number | import("long").default) => import("long").default;
                                                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                            negate?: () => import("long").default;
                                                            neg?: () => import("long").default;
                                                            not?: () => import("long").default;
                                                            countLeadingZeros?: () => number;
                                                            clz?: () => number;
                                                            countTrailingZeros?: () => number;
                                                            ctz?: () => number;
                                                            notEquals?: (other: string | number | import("long").default) => boolean;
                                                            neq?: (other: string | number | import("long").default) => boolean;
                                                            ne?: (other: string | number | import("long").default) => boolean;
                                                            or?: (other: string | number | import("long").default) => import("long").default;
                                                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                            shl?: (numBits: number | import("long").default) => import("long").default;
                                                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                            shr?: (numBits: number | import("long").default) => import("long").default;
                                                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                            shru?: (numBits: number | import("long").default) => import("long").default;
                                                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                            rotl?: (numBits: number | import("long").default) => import("long").default;
                                                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                            rotr?: (numBits: number | import("long").default) => import("long").default;
                                                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                            toInt?: () => number;
                                                            toNumber?: () => number;
                                                            toBytes?: (le?: boolean) => number[];
                                                            toBytesLE?: () => number[];
                                                            toBytesBE?: () => number[];
                                                            toSigned?: () => import("long").default;
                                                            toString?: (radix?: number) => string;
                                                            toUnsigned?: () => import("long").default;
                                                            xor?: (other: string | number | import("long").default) => import("long").default;
                                                        };
                                                        app?: {
                                                            high?: number;
                                                            low?: number;
                                                            unsigned?: boolean;
                                                            add?: (addend: string | number | import("long").default) => import("long").default;
                                                            and?: (other: string | number | import("long").default) => import("long").default;
                                                            compare?: (other: string | number | import("long").default) => number;
                                                            comp?: (other: string | number | import("long").default) => number;
                                                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                            div?: (divisor: string | number | import("long").default) => import("long").default;
                                                            equals?: (other: string | number | import("long").default) => boolean;
                                                            eq?: (other: string | number | import("long").default) => boolean;
                                                            getHighBits?: () => number;
                                                            getHighBitsUnsigned?: () => number;
                                                            getLowBits?: () => number;
                                                            getLowBitsUnsigned?: () => number;
                                                            getNumBitsAbs?: () => number;
                                                            greaterThan?: (other: string | number | import("long").default) => boolean;
                                                            gt?: (other: string | number | import("long").default) => boolean;
                                                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                            gte?: (other: string | number | import("long").default) => boolean;
                                                            ge?: (other: string | number | import("long").default) => boolean;
                                                            isEven?: () => boolean;
                                                            isNegative?: () => boolean;
                                                            isOdd?: () => boolean;
                                                            isPositive?: () => boolean;
                                                            isZero?: () => boolean;
                                                            eqz?: () => boolean;
                                                            lessThan?: (other: string | number | import("long").default) => boolean;
                                                            lt?: (other: string | number | import("long").default) => boolean;
                                                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                            lte?: (other: string | number | import("long").default) => boolean;
                                                            le?: (other: string | number | import("long").default) => boolean;
                                                            modulo?: (other: string | number | import("long").default) => import("long").default;
                                                            mod?: (other: string | number | import("long").default) => import("long").default;
                                                            rem?: (other: string | number | import("long").default) => import("long").default;
                                                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                            negate?: () => import("long").default;
                                                            neg?: () => import("long").default;
                                                            not?: () => import("long").default;
                                                            countLeadingZeros?: () => number;
                                                            clz?: () => number;
                                                            countTrailingZeros?: () => number;
                                                            ctz?: () => number;
                                                            notEquals?: (other: string | number | import("long").default) => boolean;
                                                            neq?: (other: string | number | import("long").default) => boolean;
                                                            ne?: (other: string | number | import("long").default) => boolean;
                                                            or?: (other: string | number | import("long").default) => import("long").default;
                                                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                            shl?: (numBits: number | import("long").default) => import("long").default;
                                                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                            shr?: (numBits: number | import("long").default) => import("long").default;
                                                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                            shru?: (numBits: number | import("long").default) => import("long").default;
                                                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                            rotl?: (numBits: number | import("long").default) => import("long").default;
                                                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                            rotr?: (numBits: number | import("long").default) => import("long").default;
                                                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                            toInt?: () => number;
                                                            toNumber?: () => number;
                                                            toBytes?: (le?: boolean) => number[];
                                                            toBytesLE?: () => number[];
                                                            toBytesBE?: () => number[];
                                                            toSigned?: () => import("long").default;
                                                            toString?: (radix?: number) => string;
                                                            toUnsigned?: () => import("long").default;
                                                            xor?: (other: string | number | import("long").default) => import("long").default;
                                                        };
                                                    };
                                                    chainId?: string;
                                                    height?: {
                                                        high?: number;
                                                        low?: number;
                                                        unsigned?: boolean;
                                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                                        and?: (other: string | number | import("long").default) => import("long").default;
                                                        compare?: (other: string | number | import("long").default) => number;
                                                        comp?: (other: string | number | import("long").default) => number;
                                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                                        equals?: (other: string | number | import("long").default) => boolean;
                                                        eq?: (other: string | number | import("long").default) => boolean;
                                                        getHighBits?: () => number;
                                                        getHighBitsUnsigned?: () => number;
                                                        getLowBits?: () => number;
                                                        getLowBitsUnsigned?: () => number;
                                                        getNumBitsAbs?: () => number;
                                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                                        gt?: (other: string | number | import("long").default) => boolean;
                                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                        gte?: (other: string | number | import("long").default) => boolean;
                                                        ge?: (other: string | number | import("long").default) => boolean;
                                                        isEven?: () => boolean;
                                                        isNegative?: () => boolean;
                                                        isOdd?: () => boolean;
                                                        isPositive?: () => boolean;
                                                        isZero?: () => boolean;
                                                        eqz?: () => boolean;
                                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                                        lt?: (other: string | number | import("long").default) => boolean;
                                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                        lte?: (other: string | number | import("long").default) => boolean;
                                                        le?: (other: string | number | import("long").default) => boolean;
                                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                        negate?: () => import("long").default;
                                                        neg?: () => import("long").default;
                                                        not?: () => import("long").default;
                                                        countLeadingZeros?: () => number;
                                                        clz?: () => number;
                                                        countTrailingZeros?: () => number;
                                                        ctz?: () => number;
                                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                                        neq?: (other: string | number | import("long").default) => boolean;
                                                        ne?: (other: string | number | import("long").default) => boolean;
                                                        or?: (other: string | number | import("long").default) => import("long").default;
                                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                        toInt?: () => number;
                                                        toNumber?: () => number;
                                                        toBytes?: (le?: boolean) => number[];
                                                        toBytesLE?: () => number[];
                                                        toBytesBE?: () => number[];
                                                        toSigned?: () => import("long").default;
                                                        toString?: (radix?: number) => string;
                                                        toUnsigned?: () => import("long").default;
                                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                                    };
                                                    time?: Date;
                                                    lastBlockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    lastCommitHash?: Uint8Array;
                                                    dataHash?: Uint8Array;
                                                    validatorsHash?: Uint8Array;
                                                    nextValidatorsHash?: Uint8Array;
                                                    consensusHash?: Uint8Array;
                                                    appHash?: Uint8Array;
                                                    lastResultsHash?: Uint8Array;
                                                    evidenceHash?: Uint8Array;
                                                    proposerAddress?: Uint8Array;
                                                };
                                                commit?: {
                                                    height?: {
                                                        high?: number;
                                                        low?: number;
                                                        unsigned?: boolean;
                                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                                        and?: (other: string | number | import("long").default) => import("long").default;
                                                        compare?: (other: string | number | import("long").default) => number;
                                                        comp?: (other: string | number | import("long").default) => number;
                                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                                        equals?: (other: string | number | import("long").default) => boolean;
                                                        eq?: (other: string | number | import("long").default) => boolean;
                                                        getHighBits?: () => number;
                                                        getHighBitsUnsigned?: () => number;
                                                        getLowBits?: () => number;
                                                        getLowBitsUnsigned?: () => number;
                                                        getNumBitsAbs?: () => number;
                                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                                        gt?: (other: string | number | import("long").default) => boolean;
                                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                        gte?: (other: string | number | import("long").default) => boolean;
                                                        ge?: (other: string | number | import("long").default) => boolean;
                                                        isEven?: () => boolean;
                                                        isNegative?: () => boolean;
                                                        isOdd?: () => boolean;
                                                        isPositive?: () => boolean;
                                                        isZero?: () => boolean;
                                                        eqz?: () => boolean;
                                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                                        lt?: (other: string | number | import("long").default) => boolean;
                                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                        lte?: (other: string | number | import("long").default) => boolean;
                                                        le?: (other: string | number | import("long").default) => boolean;
                                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                        negate?: () => import("long").default;
                                                        neg?: () => import("long").default;
                                                        not?: () => import("long").default;
                                                        countLeadingZeros?: () => number;
                                                        clz?: () => number;
                                                        countTrailingZeros?: () => number;
                                                        ctz?: () => number;
                                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                                        neq?: (other: string | number | import("long").default) => boolean;
                                                        ne?: (other: string | number | import("long").default) => boolean;
                                                        or?: (other: string | number | import("long").default) => import("long").default;
                                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                        toInt?: () => number;
                                                        toNumber?: () => number;
                                                        toBytes?: (le?: boolean) => number[];
                                                        toBytesLE?: () => number[];
                                                        toBytesBE?: () => number[];
                                                        toSigned?: () => import("long").default;
                                                        toString?: (radix?: number) => string;
                                                        toUnsigned?: () => import("long").default;
                                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                                    };
                                                    round?: number;
                                                    blockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    signatures?: {
                                                        blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                        validatorAddress?: Uint8Array;
                                                        timestamp?: Date;
                                                        signature?: Uint8Array;
                                                    }[];
                                                };
                                            };
                                            validatorSet?: {
                                                validators?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: {
                                                        high?: number;
                                                        low?: number;
                                                        unsigned?: boolean;
                                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                                        and?: (other: string | number | import("long").default) => import("long").default;
                                                        compare?: (other: string | number | import("long").default) => number;
                                                        comp?: (other: string | number | import("long").default) => number;
                                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                                        equals?: (other: string | number | import("long").default) => boolean;
                                                        eq?: (other: string | number | import("long").default) => boolean;
                                                        getHighBits?: () => number;
                                                        getHighBitsUnsigned?: () => number;
                                                        getLowBits?: () => number;
                                                        getLowBitsUnsigned?: () => number;
                                                        getNumBitsAbs?: () => number;
                                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                                        gt?: (other: string | number | import("long").default) => boolean;
                                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                        gte?: (other: string | number | import("long").default) => boolean;
                                                        ge?: (other: string | number | import("long").default) => boolean;
                                                        isEven?: () => boolean;
                                                        isNegative?: () => boolean;
                                                        isOdd?: () => boolean;
                                                        isPositive?: () => boolean;
                                                        isZero?: () => boolean;
                                                        eqz?: () => boolean;
                                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                                        lt?: (other: string | number | import("long").default) => boolean;
                                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                        lte?: (other: string | number | import("long").default) => boolean;
                                                        le?: (other: string | number | import("long").default) => boolean;
                                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                        negate?: () => import("long").default;
                                                        neg?: () => import("long").default;
                                                        not?: () => import("long").default;
                                                        countLeadingZeros?: () => number;
                                                        clz?: () => number;
                                                        countTrailingZeros?: () => number;
                                                        ctz?: () => number;
                                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                                        neq?: (other: string | number | import("long").default) => boolean;
                                                        ne?: (other: string | number | import("long").default) => boolean;
                                                        or?: (other: string | number | import("long").default) => import("long").default;
                                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                        toInt?: () => number;
                                                        toNumber?: () => number;
                                                        toBytes?: (le?: boolean) => number[];
                                                        toBytesLE?: () => number[];
                                                        toBytesBE?: () => number[];
                                                        toSigned?: () => import("long").default;
                                                        toString?: (radix?: number) => string;
                                                        toUnsigned?: () => import("long").default;
                                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                                    };
                                                    proposerPriority?: {
                                                        high?: number;
                                                        low?: number;
                                                        unsigned?: boolean;
                                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                                        and?: (other: string | number | import("long").default) => import("long").default;
                                                        compare?: (other: string | number | import("long").default) => number;
                                                        comp?: (other: string | number | import("long").default) => number;
                                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                                        equals?: (other: string | number | import("long").default) => boolean;
                                                        eq?: (other: string | number | import("long").default) => boolean;
                                                        getHighBits?: () => number;
                                                        getHighBitsUnsigned?: () => number;
                                                        getLowBits?: () => number;
                                                        getLowBitsUnsigned?: () => number;
                                                        getNumBitsAbs?: () => number;
                                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                                        gt?: (other: string | number | import("long").default) => boolean;
                                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                        gte?: (other: string | number | import("long").default) => boolean;
                                                        ge?: (other: string | number | import("long").default) => boolean;
                                                        isEven?: () => boolean;
                                                        isNegative?: () => boolean;
                                                        isOdd?: () => boolean;
                                                        isPositive?: () => boolean;
                                                        isZero?: () => boolean;
                                                        eqz?: () => boolean;
                                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                                        lt?: (other: string | number | import("long").default) => boolean;
                                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                        lte?: (other: string | number | import("long").default) => boolean;
                                                        le?: (other: string | number | import("long").default) => boolean;
                                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                        negate?: () => import("long").default;
                                                        neg?: () => import("long").default;
                                                        not?: () => import("long").default;
                                                        countLeadingZeros?: () => number;
                                                        clz?: () => number;
                                                        countTrailingZeros?: () => number;
                                                        ctz?: () => number;
                                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                                        neq?: (other: string | number | import("long").default) => boolean;
                                                        ne?: (other: string | number | import("long").default) => boolean;
                                                        or?: (other: string | number | import("long").default) => import("long").default;
                                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                        toInt?: () => number;
                                                        toNumber?: () => number;
                                                        toBytes?: (le?: boolean) => number[];
                                                        toBytesLE?: () => number[];
                                                        toBytesBE?: () => number[];
                                                        toSigned?: () => import("long").default;
                                                        toString?: (radix?: number) => string;
                                                        toUnsigned?: () => import("long").default;
                                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                                    };
                                                }[];
                                                proposer?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: {
                                                        high?: number;
                                                        low?: number;
                                                        unsigned?: boolean;
                                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                                        and?: (other: string | number | import("long").default) => import("long").default;
                                                        compare?: (other: string | number | import("long").default) => number;
                                                        comp?: (other: string | number | import("long").default) => number;
                                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                                        equals?: (other: string | number | import("long").default) => boolean;
                                                        eq?: (other: string | number | import("long").default) => boolean;
                                                        getHighBits?: () => number;
                                                        getHighBitsUnsigned?: () => number;
                                                        getLowBits?: () => number;
                                                        getLowBitsUnsigned?: () => number;
                                                        getNumBitsAbs?: () => number;
                                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                                        gt?: (other: string | number | import("long").default) => boolean;
                                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                        gte?: (other: string | number | import("long").default) => boolean;
                                                        ge?: (other: string | number | import("long").default) => boolean;
                                                        isEven?: () => boolean;
                                                        isNegative?: () => boolean;
                                                        isOdd?: () => boolean;
                                                        isPositive?: () => boolean;
                                                        isZero?: () => boolean;
                                                        eqz?: () => boolean;
                                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                                        lt?: (other: string | number | import("long").default) => boolean;
                                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                        lte?: (other: string | number | import("long").default) => boolean;
                                                        le?: (other: string | number | import("long").default) => boolean;
                                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                        negate?: () => import("long").default;
                                                        neg?: () => import("long").default;
                                                        not?: () => import("long").default;
                                                        countLeadingZeros?: () => number;
                                                        clz?: () => number;
                                                        countTrailingZeros?: () => number;
                                                        ctz?: () => number;
                                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                                        neq?: (other: string | number | import("long").default) => boolean;
                                                        ne?: (other: string | number | import("long").default) => boolean;
                                                        or?: (other: string | number | import("long").default) => import("long").default;
                                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                        toInt?: () => number;
                                                        toNumber?: () => number;
                                                        toBytes?: (le?: boolean) => number[];
                                                        toBytesLE?: () => number[];
                                                        toBytesBE?: () => number[];
                                                        toSigned?: () => import("long").default;
                                                        toString?: (radix?: number) => string;
                                                        toUnsigned?: () => import("long").default;
                                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                                    };
                                                    proposerPriority?: {
                                                        high?: number;
                                                        low?: number;
                                                        unsigned?: boolean;
                                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                                        and?: (other: string | number | import("long").default) => import("long").default;
                                                        compare?: (other: string | number | import("long").default) => number;
                                                        comp?: (other: string | number | import("long").default) => number;
                                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                                        equals?: (other: string | number | import("long").default) => boolean;
                                                        eq?: (other: string | number | import("long").default) => boolean;
                                                        getHighBits?: () => number;
                                                        getHighBitsUnsigned?: () => number;
                                                        getLowBits?: () => number;
                                                        getLowBitsUnsigned?: () => number;
                                                        getNumBitsAbs?: () => number;
                                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                                        gt?: (other: string | number | import("long").default) => boolean;
                                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                        gte?: (other: string | number | import("long").default) => boolean;
                                                        ge?: (other: string | number | import("long").default) => boolean;
                                                        isEven?: () => boolean;
                                                        isNegative?: () => boolean;
                                                        isOdd?: () => boolean;
                                                        isPositive?: () => boolean;
                                                        isZero?: () => boolean;
                                                        eqz?: () => boolean;
                                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                                        lt?: (other: string | number | import("long").default) => boolean;
                                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                        lte?: (other: string | number | import("long").default) => boolean;
                                                        le?: (other: string | number | import("long").default) => boolean;
                                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                        negate?: () => import("long").default;
                                                        neg?: () => import("long").default;
                                                        not?: () => import("long").default;
                                                        countLeadingZeros?: () => number;
                                                        clz?: () => number;
                                                        countTrailingZeros?: () => number;
                                                        ctz?: () => number;
                                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                                        neq?: (other: string | number | import("long").default) => boolean;
                                                        ne?: (other: string | number | import("long").default) => boolean;
                                                        or?: (other: string | number | import("long").default) => import("long").default;
                                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                        toInt?: () => number;
                                                        toNumber?: () => number;
                                                        toBytes?: (le?: boolean) => number[];
                                                        toBytesLE?: () => number[];
                                                        toBytesBE?: () => number[];
                                                        toSigned?: () => import("long").default;
                                                        toString?: (radix?: number) => string;
                                                        toUnsigned?: () => import("long").default;
                                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                                    };
                                                };
                                                totalVotingPower?: {
                                                    high?: number;
                                                    low?: number;
                                                    unsigned?: boolean;
                                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                                    and?: (other: string | number | import("long").default) => import("long").default;
                                                    compare?: (other: string | number | import("long").default) => number;
                                                    comp?: (other: string | number | import("long").default) => number;
                                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                                    equals?: (other: string | number | import("long").default) => boolean;
                                                    eq?: (other: string | number | import("long").default) => boolean;
                                                    getHighBits?: () => number;
                                                    getHighBitsUnsigned?: () => number;
                                                    getLowBits?: () => number;
                                                    getLowBitsUnsigned?: () => number;
                                                    getNumBitsAbs?: () => number;
                                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                                    gt?: (other: string | number | import("long").default) => boolean;
                                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                    gte?: (other: string | number | import("long").default) => boolean;
                                                    ge?: (other: string | number | import("long").default) => boolean;
                                                    isEven?: () => boolean;
                                                    isNegative?: () => boolean;
                                                    isOdd?: () => boolean;
                                                    isPositive?: () => boolean;
                                                    isZero?: () => boolean;
                                                    eqz?: () => boolean;
                                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                                    lt?: (other: string | number | import("long").default) => boolean;
                                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                    lte?: (other: string | number | import("long").default) => boolean;
                                                    le?: (other: string | number | import("long").default) => boolean;
                                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                    negate?: () => import("long").default;
                                                    neg?: () => import("long").default;
                                                    not?: () => import("long").default;
                                                    countLeadingZeros?: () => number;
                                                    clz?: () => number;
                                                    countTrailingZeros?: () => number;
                                                    ctz?: () => number;
                                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                                    neq?: (other: string | number | import("long").default) => boolean;
                                                    ne?: (other: string | number | import("long").default) => boolean;
                                                    or?: (other: string | number | import("long").default) => import("long").default;
                                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                    toInt?: () => number;
                                                    toNumber?: () => number;
                                                    toBytes?: (le?: boolean) => number[];
                                                    toBytesLE?: () => number[];
                                                    toBytesBE?: () => number[];
                                                    toSigned?: () => import("long").default;
                                                    toString?: (radix?: number) => string;
                                                    toUnsigned?: () => import("long").default;
                                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                                };
                                            };
                                        };
                                        commonHeight?: {
                                            high?: number;
                                            low?: number;
                                            unsigned?: boolean;
                                            add?: (addend: string | number | import("long").default) => import("long").default;
                                            and?: (other: string | number | import("long").default) => import("long").default;
                                            compare?: (other: string | number | import("long").default) => number;
                                            comp?: (other: string | number | import("long").default) => number;
                                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                                            div?: (divisor: string | number | import("long").default) => import("long").default;
                                            equals?: (other: string | number | import("long").default) => boolean;
                                            eq?: (other: string | number | import("long").default) => boolean;
                                            getHighBits?: () => number;
                                            getHighBitsUnsigned?: () => number;
                                            getLowBits?: () => number;
                                            getLowBitsUnsigned?: () => number;
                                            getNumBitsAbs?: () => number;
                                            greaterThan?: (other: string | number | import("long").default) => boolean;
                                            gt?: (other: string | number | import("long").default) => boolean;
                                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            gte?: (other: string | number | import("long").default) => boolean;
                                            ge?: (other: string | number | import("long").default) => boolean;
                                            isEven?: () => boolean;
                                            isNegative?: () => boolean;
                                            isOdd?: () => boolean;
                                            isPositive?: () => boolean;
                                            isZero?: () => boolean;
                                            eqz?: () => boolean;
                                            lessThan?: (other: string | number | import("long").default) => boolean;
                                            lt?: (other: string | number | import("long").default) => boolean;
                                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            lte?: (other: string | number | import("long").default) => boolean;
                                            le?: (other: string | number | import("long").default) => boolean;
                                            modulo?: (other: string | number | import("long").default) => import("long").default;
                                            mod?: (other: string | number | import("long").default) => import("long").default;
                                            rem?: (other: string | number | import("long").default) => import("long").default;
                                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                            negate?: () => import("long").default;
                                            neg?: () => import("long").default;
                                            not?: () => import("long").default;
                                            countLeadingZeros?: () => number;
                                            clz?: () => number;
                                            countTrailingZeros?: () => number;
                                            ctz?: () => number;
                                            notEquals?: (other: string | number | import("long").default) => boolean;
                                            neq?: (other: string | number | import("long").default) => boolean;
                                            ne?: (other: string | number | import("long").default) => boolean;
                                            or?: (other: string | number | import("long").default) => import("long").default;
                                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                            shl?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                            shr?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                            shru?: (numBits: number | import("long").default) => import("long").default;
                                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                            rotl?: (numBits: number | import("long").default) => import("long").default;
                                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                            rotr?: (numBits: number | import("long").default) => import("long").default;
                                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            toInt?: () => number;
                                            toNumber?: () => number;
                                            toBytes?: (le?: boolean) => number[];
                                            toBytesLE?: () => number[];
                                            toBytesBE?: () => number[];
                                            toSigned?: () => import("long").default;
                                            toString?: (radix?: number) => string;
                                            toUnsigned?: () => import("long").default;
                                            xor?: (other: string | number | import("long").default) => import("long").default;
                                        };
                                        byzantineValidators?: {
                                            address?: Uint8Array;
                                            pubKey?: {
                                                ed25519?: Uint8Array;
                                                secp256k1?: Uint8Array;
                                            };
                                            votingPower?: {
                                                high?: number;
                                                low?: number;
                                                unsigned?: boolean;
                                                add?: (addend: string | number | import("long").default) => import("long").default;
                                                and?: (other: string | number | import("long").default) => import("long").default;
                                                compare?: (other: string | number | import("long").default) => number;
                                                comp?: (other: string | number | import("long").default) => number;
                                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                                equals?: (other: string | number | import("long").default) => boolean;
                                                eq?: (other: string | number | import("long").default) => boolean;
                                                getHighBits?: () => number;
                                                getHighBitsUnsigned?: () => number;
                                                getLowBits?: () => number;
                                                getLowBitsUnsigned?: () => number;
                                                getNumBitsAbs?: () => number;
                                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                                gt?: (other: string | number | import("long").default) => boolean;
                                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                gte?: (other: string | number | import("long").default) => boolean;
                                                ge?: (other: string | number | import("long").default) => boolean;
                                                isEven?: () => boolean;
                                                isNegative?: () => boolean;
                                                isOdd?: () => boolean;
                                                isPositive?: () => boolean;
                                                isZero?: () => boolean;
                                                eqz?: () => boolean;
                                                lessThan?: (other: string | number | import("long").default) => boolean;
                                                lt?: (other: string | number | import("long").default) => boolean;
                                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                lte?: (other: string | number | import("long").default) => boolean;
                                                le?: (other: string | number | import("long").default) => boolean;
                                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                                mod?: (other: string | number | import("long").default) => import("long").default;
                                                rem?: (other: string | number | import("long").default) => import("long").default;
                                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                negate?: () => import("long").default;
                                                neg?: () => import("long").default;
                                                not?: () => import("long").default;
                                                countLeadingZeros?: () => number;
                                                clz?: () => number;
                                                countTrailingZeros?: () => number;
                                                ctz?: () => number;
                                                notEquals?: (other: string | number | import("long").default) => boolean;
                                                neq?: (other: string | number | import("long").default) => boolean;
                                                ne?: (other: string | number | import("long").default) => boolean;
                                                or?: (other: string | number | import("long").default) => import("long").default;
                                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                shl?: (numBits: number | import("long").default) => import("long").default;
                                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                shr?: (numBits: number | import("long").default) => import("long").default;
                                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                shru?: (numBits: number | import("long").default) => import("long").default;
                                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                toInt?: () => number;
                                                toNumber?: () => number;
                                                toBytes?: (le?: boolean) => number[];
                                                toBytesLE?: () => number[];
                                                toBytesBE?: () => number[];
                                                toSigned?: () => import("long").default;
                                                toString?: (radix?: number) => string;
                                                toUnsigned?: () => import("long").default;
                                                xor?: (other: string | number | import("long").default) => import("long").default;
                                            };
                                            proposerPriority?: {
                                                high?: number;
                                                low?: number;
                                                unsigned?: boolean;
                                                add?: (addend: string | number | import("long").default) => import("long").default;
                                                and?: (other: string | number | import("long").default) => import("long").default;
                                                compare?: (other: string | number | import("long").default) => number;
                                                comp?: (other: string | number | import("long").default) => number;
                                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                                equals?: (other: string | number | import("long").default) => boolean;
                                                eq?: (other: string | number | import("long").default) => boolean;
                                                getHighBits?: () => number;
                                                getHighBitsUnsigned?: () => number;
                                                getLowBits?: () => number;
                                                getLowBitsUnsigned?: () => number;
                                                getNumBitsAbs?: () => number;
                                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                                gt?: (other: string | number | import("long").default) => boolean;
                                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                gte?: (other: string | number | import("long").default) => boolean;
                                                ge?: (other: string | number | import("long").default) => boolean;
                                                isEven?: () => boolean;
                                                isNegative?: () => boolean;
                                                isOdd?: () => boolean;
                                                isPositive?: () => boolean;
                                                isZero?: () => boolean;
                                                eqz?: () => boolean;
                                                lessThan?: (other: string | number | import("long").default) => boolean;
                                                lt?: (other: string | number | import("long").default) => boolean;
                                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                lte?: (other: string | number | import("long").default) => boolean;
                                                le?: (other: string | number | import("long").default) => boolean;
                                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                                mod?: (other: string | number | import("long").default) => import("long").default;
                                                rem?: (other: string | number | import("long").default) => import("long").default;
                                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                negate?: () => import("long").default;
                                                neg?: () => import("long").default;
                                                not?: () => import("long").default;
                                                countLeadingZeros?: () => number;
                                                clz?: () => number;
                                                countTrailingZeros?: () => number;
                                                ctz?: () => number;
                                                notEquals?: (other: string | number | import("long").default) => boolean;
                                                neq?: (other: string | number | import("long").default) => boolean;
                                                ne?: (other: string | number | import("long").default) => boolean;
                                                or?: (other: string | number | import("long").default) => import("long").default;
                                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                shl?: (numBits: number | import("long").default) => import("long").default;
                                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                shr?: (numBits: number | import("long").default) => import("long").default;
                                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                shru?: (numBits: number | import("long").default) => import("long").default;
                                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                toInt?: () => number;
                                                toNumber?: () => number;
                                                toBytes?: (le?: boolean) => number[];
                                                toBytesLE?: () => number[];
                                                toBytesBE?: () => number[];
                                                toSigned?: () => import("long").default;
                                                toString?: (radix?: number) => string;
                                                toUnsigned?: () => import("long").default;
                                                xor?: (other: string | number | import("long").default) => import("long").default;
                                            };
                                        }[];
                                        totalVotingPower?: {
                                            high?: number;
                                            low?: number;
                                            unsigned?: boolean;
                                            add?: (addend: string | number | import("long").default) => import("long").default;
                                            and?: (other: string | number | import("long").default) => import("long").default;
                                            compare?: (other: string | number | import("long").default) => number;
                                            comp?: (other: string | number | import("long").default) => number;
                                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                                            div?: (divisor: string | number | import("long").default) => import("long").default;
                                            equals?: (other: string | number | import("long").default) => boolean;
                                            eq?: (other: string | number | import("long").default) => boolean;
                                            getHighBits?: () => number;
                                            getHighBitsUnsigned?: () => number;
                                            getLowBits?: () => number;
                                            getLowBitsUnsigned?: () => number;
                                            getNumBitsAbs?: () => number;
                                            greaterThan?: (other: string | number | import("long").default) => boolean;
                                            gt?: (other: string | number | import("long").default) => boolean;
                                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            gte?: (other: string | number | import("long").default) => boolean;
                                            ge?: (other: string | number | import("long").default) => boolean;
                                            isEven?: () => boolean;
                                            isNegative?: () => boolean;
                                            isOdd?: () => boolean;
                                            isPositive?: () => boolean;
                                            isZero?: () => boolean;
                                            eqz?: () => boolean;
                                            lessThan?: (other: string | number | import("long").default) => boolean;
                                            lt?: (other: string | number | import("long").default) => boolean;
                                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            lte?: (other: string | number | import("long").default) => boolean;
                                            le?: (other: string | number | import("long").default) => boolean;
                                            modulo?: (other: string | number | import("long").default) => import("long").default;
                                            mod?: (other: string | number | import("long").default) => import("long").default;
                                            rem?: (other: string | number | import("long").default) => import("long").default;
                                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                            negate?: () => import("long").default;
                                            neg?: () => import("long").default;
                                            not?: () => import("long").default;
                                            countLeadingZeros?: () => number;
                                            clz?: () => number;
                                            countTrailingZeros?: () => number;
                                            ctz?: () => number;
                                            notEquals?: (other: string | number | import("long").default) => boolean;
                                            neq?: (other: string | number | import("long").default) => boolean;
                                            ne?: (other: string | number | import("long").default) => boolean;
                                            or?: (other: string | number | import("long").default) => import("long").default;
                                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                            shl?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                            shr?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                            shru?: (numBits: number | import("long").default) => import("long").default;
                                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                            rotl?: (numBits: number | import("long").default) => import("long").default;
                                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                            rotr?: (numBits: number | import("long").default) => import("long").default;
                                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            toInt?: () => number;
                                            toNumber?: () => number;
                                            toBytes?: (le?: boolean) => number[];
                                            toBytesLE?: () => number[];
                                            toBytesBE?: () => number[];
                                            toSigned?: () => import("long").default;
                                            toString?: (radix?: number) => string;
                                            toUnsigned?: () => import("long").default;
                                            xor?: (other: string | number | import("long").default) => import("long").default;
                                        };
                                        timestamp?: Date;
                                    };
                                }[];
                            };
                            lastCommit?: {
                                height?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                round?: number;
                                blockId?: {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    };
                                };
                                signatures?: {
                                    blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                    validatorAddress?: Uint8Array;
                                    timestamp?: Date;
                                    signature?: Uint8Array;
                                }[];
                            };
                        };
                    }): _70.GetLatestBlockResponse;
                };
                GetSyncingRequest: {
                    encode(_: _70.GetSyncingRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _70.GetSyncingRequest;
                    fromPartial(_: {}): _70.GetSyncingRequest;
                };
                GetSyncingResponse: {
                    encode(message: _70.GetSyncingResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _70.GetSyncingResponse;
                    fromPartial(object: {
                        syncing?: boolean;
                    }): _70.GetSyncingResponse;
                };
                GetNodeInfoRequest: {
                    encode(_: _70.GetNodeInfoRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _70.GetNodeInfoRequest;
                    fromPartial(_: {}): _70.GetNodeInfoRequest;
                };
                GetNodeInfoResponse: {
                    encode(message: _70.GetNodeInfoResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _70.GetNodeInfoResponse;
                    fromPartial(object: {
                        nodeInfo?: {
                            protocolVersion?: {
                                p2p?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                block?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                app?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                            };
                            nodeId?: string;
                            listenAddr?: string;
                            network?: string;
                            version?: string;
                            channels?: Uint8Array;
                            moniker?: string;
                            other?: {
                                txIndex?: string;
                                rpcAddress?: string;
                            };
                        };
                        applicationVersion?: {
                            name?: string;
                            appName?: string;
                            version?: string;
                            gitCommit?: string;
                            buildTags?: string;
                            goVersion?: string;
                            buildDeps?: {
                                path?: string;
                                version?: string;
                                sum?: string;
                            }[];
                            cosmosSdkVersion?: string;
                        };
                    }): _70.GetNodeInfoResponse;
                };
                VersionInfo: {
                    encode(message: _70.VersionInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _70.VersionInfo;
                    fromPartial(object: {
                        name?: string;
                        appName?: string;
                        version?: string;
                        gitCommit?: string;
                        buildTags?: string;
                        goVersion?: string;
                        buildDeps?: {
                            path?: string;
                            version?: string;
                            sum?: string;
                        }[];
                        cosmosSdkVersion?: string;
                    }): _70.VersionInfo;
                };
                Module: {
                    encode(message: _70.Module, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _70.Module;
                    fromPartial(object: {
                        path?: string;
                        version?: string;
                        sum?: string;
                    }): _70.Module;
                };
            };
        }
        const v1beta1: {
            Coin: {
                encode(message: _71.Coin, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _71.Coin;
                fromPartial(object: {
                    denom?: string;
                    amount?: string;
                }): _71.Coin;
            };
            DecCoin: {
                encode(message: _71.DecCoin, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _71.DecCoin;
                fromPartial(object: {
                    denom?: string;
                    amount?: string;
                }): _71.DecCoin;
            };
            IntProto: {
                encode(message: _71.IntProto, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _71.IntProto;
                fromPartial(object: {
                    int?: string;
                }): _71.IntProto;
            };
            DecProto: {
                encode(message: _71.DecProto, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _71.DecProto;
                fromPartial(object: {
                    dec?: string;
                }): _71.DecProto;
            };
        };
    }
    namespace capability {
        const v1beta1: {
            GenesisOwners: {
                encode(message: _73.GenesisOwners, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _73.GenesisOwners;
                fromPartial(object: {
                    index?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    indexOwners?: {
                        owners?: {
                            module?: string;
                            name?: string;
                        }[];
                    };
                }): _73.GenesisOwners;
            };
            GenesisState: {
                encode(message: _73.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _73.GenesisState;
                fromPartial(object: {
                    index?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    owners?: {
                        index?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        indexOwners?: {
                            owners?: {
                                module?: string;
                                name?: string;
                            }[];
                        };
                    }[];
                }): _73.GenesisState;
            };
            Capability: {
                encode(message: _72.Capability, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _72.Capability;
                fromPartial(object: {
                    index?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }): _72.Capability;
            };
            Owner: {
                encode(message: _72.Owner, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _72.Owner;
                fromPartial(object: {
                    module?: string;
                    name?: string;
                }): _72.Owner;
            };
            CapabilityOwners: {
                encode(message: _72.CapabilityOwners, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _72.CapabilityOwners;
                fromPartial(object: {
                    owners?: {
                        module?: string;
                        name?: string;
                    }[];
                }): _72.CapabilityOwners;
            };
        };
    }
    namespace crisis {
        const v1beta1: {
            MsgClientImpl: typeof _273.MsgClientImpl;
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    verifyInvariant(value: _75.MsgVerifyInvariant): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    verifyInvariant(value: _75.MsgVerifyInvariant): {
                        typeUrl: string;
                        value: _75.MsgVerifyInvariant;
                    };
                };
                fromPartial: {
                    verifyInvariant(value: _75.MsgVerifyInvariant): {
                        typeUrl: string;
                        value: _75.MsgVerifyInvariant;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.crisis.v1beta1.MsgVerifyInvariant": {
                    aminoType: string;
                    toAmino: ({ sender, invariantModuleName, invariantRoute }: _75.MsgVerifyInvariant) => {
                        sender: string;
                        invariant_module_name: string;
                        invariant_route: string;
                    };
                    fromAmino: ({ sender, invariant_module_name, invariant_route }: {
                        sender: string;
                        invariant_module_name: string;
                        invariant_route: string;
                    }) => _75.MsgVerifyInvariant;
                };
            };
            MsgVerifyInvariant: {
                encode(message: _75.MsgVerifyInvariant, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _75.MsgVerifyInvariant;
                fromPartial(object: {
                    sender?: string;
                    invariantModuleName?: string;
                    invariantRoute?: string;
                }): _75.MsgVerifyInvariant;
            };
            MsgVerifyInvariantResponse: {
                encode(_: _75.MsgVerifyInvariantResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _75.MsgVerifyInvariantResponse;
                fromPartial(_: {}): _75.MsgVerifyInvariantResponse;
            };
            GenesisState: {
                encode(message: _74.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _74.GenesisState;
                fromPartial(object: {
                    constantFee?: {
                        denom?: string;
                        amount?: string;
                    };
                }): _74.GenesisState;
            };
        };
    }
    namespace crypto {
        const ed25519: {
            PubKey: {
                encode(message: _76.PubKey, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _76.PubKey;
                fromPartial(object: {
                    key?: Uint8Array;
                }): _76.PubKey;
            };
            PrivKey: {
                encode(message: _76.PrivKey, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _76.PrivKey;
                fromPartial(object: {
                    key?: Uint8Array;
                }): _76.PrivKey;
            };
        };
        namespace hd {
            const v1: {
                BIP44Params: {
                    encode(message: _77.BIP44Params, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _77.BIP44Params;
                    fromPartial(object: {
                        purpose?: number;
                        coinType?: number;
                        account?: number;
                        change?: boolean;
                        addressIndex?: number;
                    }): _77.BIP44Params;
                };
            };
        }
        namespace keyring {
            const v1: {
                Record: {
                    encode(message: _78.Record, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _78.Record;
                    fromPartial(object: {
                        name?: string;
                        pubKey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        local?: {
                            privKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            privKeyType?: string;
                        };
                        ledger?: {
                            path?: {
                                purpose?: number;
                                coinType?: number;
                                account?: number;
                                change?: boolean;
                                addressIndex?: number;
                            };
                        };
                        multi?: {};
                        offline?: {};
                    }): _78.Record;
                };
                Record_Local: {
                    encode(message: _78.Record_Local, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _78.Record_Local;
                    fromPartial(object: {
                        privKey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        privKeyType?: string;
                    }): _78.Record_Local;
                };
                Record_Ledger: {
                    encode(message: _78.Record_Ledger, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _78.Record_Ledger;
                    fromPartial(object: {
                        path?: {
                            purpose?: number;
                            coinType?: number;
                            account?: number;
                            change?: boolean;
                            addressIndex?: number;
                        };
                    }): _78.Record_Ledger;
                };
                Record_Multi: {
                    encode(_: _78.Record_Multi, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _78.Record_Multi;
                    fromPartial(_: {}): _78.Record_Multi;
                };
                Record_Offline: {
                    encode(_: _78.Record_Offline, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _78.Record_Offline;
                    fromPartial(_: {}): _78.Record_Offline;
                };
            };
        }
        const multisig: {
            LegacyAminoPubKey: {
                encode(message: _79.LegacyAminoPubKey, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _79.LegacyAminoPubKey;
                fromPartial(object: {
                    threshold?: number;
                    publicKeys?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                }): _79.LegacyAminoPubKey;
            };
        };
        const secp256k1: {
            PubKey: {
                encode(message: _80.PubKey, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _80.PubKey;
                fromPartial(object: {
                    key?: Uint8Array;
                }): _80.PubKey;
            };
            PrivKey: {
                encode(message: _80.PrivKey, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _80.PrivKey;
                fromPartial(object: {
                    key?: Uint8Array;
                }): _80.PrivKey;
            };
        };
        const secp256r1: {
            PubKey: {
                encode(message: _81.PubKey, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _81.PubKey;
                fromPartial(object: {
                    key?: Uint8Array;
                }): _81.PubKey;
            };
            PrivKey: {
                encode(message: _81.PrivKey, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _81.PrivKey;
                fromPartial(object: {
                    secret?: Uint8Array;
                }): _81.PrivKey;
            };
        };
    }
    namespace distribution {
        const v1beta1: {
            MsgClientImpl: typeof _274.MsgClientImpl;
            QueryClientImpl: typeof _258.QueryClientImpl;
            createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                params(request?: _84.QueryParamsRequest): Promise<_84.QueryParamsResponse>;
                validatorOutstandingRewards(request: _84.QueryValidatorOutstandingRewardsRequest): Promise<_84.QueryValidatorOutstandingRewardsResponse>;
                validatorCommission(request: _84.QueryValidatorCommissionRequest): Promise<_84.QueryValidatorCommissionResponse>;
                validatorSlashes(request: _84.QueryValidatorSlashesRequest): Promise<_84.QueryValidatorSlashesResponse>;
                delegationRewards(request: _84.QueryDelegationRewardsRequest): Promise<_84.QueryDelegationRewardsResponse>;
                delegationTotalRewards(request: _84.QueryDelegationTotalRewardsRequest): Promise<_84.QueryDelegationTotalRewardsResponse>;
                delegatorValidators(request: _84.QueryDelegatorValidatorsRequest): Promise<_84.QueryDelegatorValidatorsResponse>;
                delegatorWithdrawAddress(request: _84.QueryDelegatorWithdrawAddressRequest): Promise<_84.QueryDelegatorWithdrawAddressResponse>;
                communityPool(request?: _84.QueryCommunityPoolRequest): Promise<_84.QueryCommunityPoolResponse>;
            };
            LCDQueryClient: typeof _240.LCDQueryClient;
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    setWithdrawAddress(value: _85.MsgSetWithdrawAddress): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    withdrawDelegatorReward(value: _85.MsgWithdrawDelegatorReward): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    withdrawValidatorCommission(value: _85.MsgWithdrawValidatorCommission): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    fundCommunityPool(value: _85.MsgFundCommunityPool): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    setWithdrawAddress(value: _85.MsgSetWithdrawAddress): {
                        typeUrl: string;
                        value: _85.MsgSetWithdrawAddress;
                    };
                    withdrawDelegatorReward(value: _85.MsgWithdrawDelegatorReward): {
                        typeUrl: string;
                        value: _85.MsgWithdrawDelegatorReward;
                    };
                    withdrawValidatorCommission(value: _85.MsgWithdrawValidatorCommission): {
                        typeUrl: string;
                        value: _85.MsgWithdrawValidatorCommission;
                    };
                    fundCommunityPool(value: _85.MsgFundCommunityPool): {
                        typeUrl: string;
                        value: _85.MsgFundCommunityPool;
                    };
                };
                fromPartial: {
                    setWithdrawAddress(value: _85.MsgSetWithdrawAddress): {
                        typeUrl: string;
                        value: _85.MsgSetWithdrawAddress;
                    };
                    withdrawDelegatorReward(value: _85.MsgWithdrawDelegatorReward): {
                        typeUrl: string;
                        value: _85.MsgWithdrawDelegatorReward;
                    };
                    withdrawValidatorCommission(value: _85.MsgWithdrawValidatorCommission): {
                        typeUrl: string;
                        value: _85.MsgWithdrawValidatorCommission;
                    };
                    fundCommunityPool(value: _85.MsgFundCommunityPool): {
                        typeUrl: string;
                        value: _85.MsgFundCommunityPool;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.distribution.v1beta1.MsgSetWithdrawAddress": {
                    aminoType: string;
                    toAmino: ({ delegatorAddress, withdrawAddress }: _85.MsgSetWithdrawAddress) => {
                        delegator_address: string;
                        withdraw_address: string;
                    };
                    fromAmino: ({ delegator_address, withdraw_address }: {
                        delegator_address: string;
                        withdraw_address: string;
                    }) => _85.MsgSetWithdrawAddress;
                };
                "/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward": {
                    aminoType: string;
                    toAmino: ({ delegatorAddress, validatorAddress }: _85.MsgWithdrawDelegatorReward) => {
                        delegator_address: string;
                        validator_address: string;
                    };
                    fromAmino: ({ delegator_address, validator_address }: {
                        delegator_address: string;
                        validator_address: string;
                    }) => _85.MsgWithdrawDelegatorReward;
                };
                "/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission": {
                    aminoType: string;
                    toAmino: ({ validatorAddress }: _85.MsgWithdrawValidatorCommission) => {
                        validator_address: string;
                    };
                    fromAmino: ({ validator_address }: {
                        validator_address: string;
                    }) => _85.MsgWithdrawValidatorCommission;
                };
                "/cosmos.distribution.v1beta1.MsgFundCommunityPool": {
                    aminoType: string;
                    toAmino: ({ amount, depositor }: _85.MsgFundCommunityPool) => {
                        amount: {
                            denom: string;
                            amount: string;
                        }[];
                        depositor: string;
                    };
                    fromAmino: ({ amount, depositor }: {
                        amount: {
                            denom: string;
                            amount: string;
                        }[];
                        depositor: string;
                    }) => _85.MsgFundCommunityPool;
                };
            };
            MsgSetWithdrawAddress: {
                encode(message: _85.MsgSetWithdrawAddress, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _85.MsgSetWithdrawAddress;
                fromPartial(object: {
                    delegatorAddress?: string;
                    withdrawAddress?: string;
                }): _85.MsgSetWithdrawAddress;
            };
            MsgSetWithdrawAddressResponse: {
                encode(_: _85.MsgSetWithdrawAddressResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _85.MsgSetWithdrawAddressResponse;
                fromPartial(_: {}): _85.MsgSetWithdrawAddressResponse;
            };
            MsgWithdrawDelegatorReward: {
                encode(message: _85.MsgWithdrawDelegatorReward, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _85.MsgWithdrawDelegatorReward;
                fromPartial(object: {
                    delegatorAddress?: string;
                    validatorAddress?: string;
                }): _85.MsgWithdrawDelegatorReward;
            };
            MsgWithdrawDelegatorRewardResponse: {
                encode(message: _85.MsgWithdrawDelegatorRewardResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _85.MsgWithdrawDelegatorRewardResponse;
                fromPartial(object: {
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _85.MsgWithdrawDelegatorRewardResponse;
            };
            MsgWithdrawValidatorCommission: {
                encode(message: _85.MsgWithdrawValidatorCommission, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _85.MsgWithdrawValidatorCommission;
                fromPartial(object: {
                    validatorAddress?: string;
                }): _85.MsgWithdrawValidatorCommission;
            };
            MsgWithdrawValidatorCommissionResponse: {
                encode(message: _85.MsgWithdrawValidatorCommissionResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _85.MsgWithdrawValidatorCommissionResponse;
                fromPartial(object: {
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _85.MsgWithdrawValidatorCommissionResponse;
            };
            MsgFundCommunityPool: {
                encode(message: _85.MsgFundCommunityPool, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _85.MsgFundCommunityPool;
                fromPartial(object: {
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    depositor?: string;
                }): _85.MsgFundCommunityPool;
            };
            MsgFundCommunityPoolResponse: {
                encode(_: _85.MsgFundCommunityPoolResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _85.MsgFundCommunityPoolResponse;
                fromPartial(_: {}): _85.MsgFundCommunityPoolResponse;
            };
            QueryParamsRequest: {
                encode(_: _84.QueryParamsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _84.QueryParamsRequest;
                fromPartial(_: {}): _84.QueryParamsRequest;
            };
            QueryParamsResponse: {
                encode(message: _84.QueryParamsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _84.QueryParamsResponse;
                fromPartial(object: {
                    params?: {
                        communityTax?: string;
                        baseProposerReward?: string;
                        bonusProposerReward?: string;
                        withdrawAddrEnabled?: boolean;
                    };
                }): _84.QueryParamsResponse;
            };
            QueryValidatorOutstandingRewardsRequest: {
                encode(message: _84.QueryValidatorOutstandingRewardsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _84.QueryValidatorOutstandingRewardsRequest;
                fromPartial(object: {
                    validatorAddress?: string;
                }): _84.QueryValidatorOutstandingRewardsRequest;
            };
            QueryValidatorOutstandingRewardsResponse: {
                encode(message: _84.QueryValidatorOutstandingRewardsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _84.QueryValidatorOutstandingRewardsResponse;
                fromPartial(object: {
                    rewards?: {
                        rewards?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    };
                }): _84.QueryValidatorOutstandingRewardsResponse;
            };
            QueryValidatorCommissionRequest: {
                encode(message: _84.QueryValidatorCommissionRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _84.QueryValidatorCommissionRequest;
                fromPartial(object: {
                    validatorAddress?: string;
                }): _84.QueryValidatorCommissionRequest;
            };
            QueryValidatorCommissionResponse: {
                encode(message: _84.QueryValidatorCommissionResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _84.QueryValidatorCommissionResponse;
                fromPartial(object: {
                    commission?: {
                        commission?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    };
                }): _84.QueryValidatorCommissionResponse;
            };
            QueryValidatorSlashesRequest: {
                encode(message: _84.QueryValidatorSlashesRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _84.QueryValidatorSlashesRequest;
                fromPartial(object: {
                    validatorAddress?: string;
                    startingHeight?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    endingHeight?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _84.QueryValidatorSlashesRequest;
            };
            QueryValidatorSlashesResponse: {
                encode(message: _84.QueryValidatorSlashesResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _84.QueryValidatorSlashesResponse;
                fromPartial(object: {
                    slashes?: {
                        validatorPeriod?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        fraction?: string;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _84.QueryValidatorSlashesResponse;
            };
            QueryDelegationRewardsRequest: {
                encode(message: _84.QueryDelegationRewardsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _84.QueryDelegationRewardsRequest;
                fromPartial(object: {
                    delegatorAddress?: string;
                    validatorAddress?: string;
                }): _84.QueryDelegationRewardsRequest;
            };
            QueryDelegationRewardsResponse: {
                encode(message: _84.QueryDelegationRewardsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _84.QueryDelegationRewardsResponse;
                fromPartial(object: {
                    rewards?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _84.QueryDelegationRewardsResponse;
            };
            QueryDelegationTotalRewardsRequest: {
                encode(message: _84.QueryDelegationTotalRewardsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _84.QueryDelegationTotalRewardsRequest;
                fromPartial(object: {
                    delegatorAddress?: string;
                }): _84.QueryDelegationTotalRewardsRequest;
            };
            QueryDelegationTotalRewardsResponse: {
                encode(message: _84.QueryDelegationTotalRewardsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _84.QueryDelegationTotalRewardsResponse;
                fromPartial(object: {
                    rewards?: {
                        validatorAddress?: string;
                        reward?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[];
                    total?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _84.QueryDelegationTotalRewardsResponse;
            };
            QueryDelegatorValidatorsRequest: {
                encode(message: _84.QueryDelegatorValidatorsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _84.QueryDelegatorValidatorsRequest;
                fromPartial(object: {
                    delegatorAddress?: string;
                }): _84.QueryDelegatorValidatorsRequest;
            };
            QueryDelegatorValidatorsResponse: {
                encode(message: _84.QueryDelegatorValidatorsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _84.QueryDelegatorValidatorsResponse;
                fromPartial(object: {
                    validators?: string[];
                }): _84.QueryDelegatorValidatorsResponse;
            };
            QueryDelegatorWithdrawAddressRequest: {
                encode(message: _84.QueryDelegatorWithdrawAddressRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _84.QueryDelegatorWithdrawAddressRequest;
                fromPartial(object: {
                    delegatorAddress?: string;
                }): _84.QueryDelegatorWithdrawAddressRequest;
            };
            QueryDelegatorWithdrawAddressResponse: {
                encode(message: _84.QueryDelegatorWithdrawAddressResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _84.QueryDelegatorWithdrawAddressResponse;
                fromPartial(object: {
                    withdrawAddress?: string;
                }): _84.QueryDelegatorWithdrawAddressResponse;
            };
            QueryCommunityPoolRequest: {
                encode(_: _84.QueryCommunityPoolRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _84.QueryCommunityPoolRequest;
                fromPartial(_: {}): _84.QueryCommunityPoolRequest;
            };
            QueryCommunityPoolResponse: {
                encode(message: _84.QueryCommunityPoolResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _84.QueryCommunityPoolResponse;
                fromPartial(object: {
                    pool?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _84.QueryCommunityPoolResponse;
            };
            DelegatorWithdrawInfo: {
                encode(message: _83.DelegatorWithdrawInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _83.DelegatorWithdrawInfo;
                fromPartial(object: {
                    delegatorAddress?: string;
                    withdrawAddress?: string;
                }): _83.DelegatorWithdrawInfo;
            };
            ValidatorOutstandingRewardsRecord: {
                encode(message: _83.ValidatorOutstandingRewardsRecord, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _83.ValidatorOutstandingRewardsRecord;
                fromPartial(object: {
                    validatorAddress?: string;
                    outstandingRewards?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _83.ValidatorOutstandingRewardsRecord;
            };
            ValidatorAccumulatedCommissionRecord: {
                encode(message: _83.ValidatorAccumulatedCommissionRecord, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _83.ValidatorAccumulatedCommissionRecord;
                fromPartial(object: {
                    validatorAddress?: string;
                    accumulated?: {
                        commission?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    };
                }): _83.ValidatorAccumulatedCommissionRecord;
            };
            ValidatorHistoricalRewardsRecord: {
                encode(message: _83.ValidatorHistoricalRewardsRecord, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _83.ValidatorHistoricalRewardsRecord;
                fromPartial(object: {
                    validatorAddress?: string;
                    period?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    rewards?: {
                        cumulativeRewardRatio?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        referenceCount?: number;
                    };
                }): _83.ValidatorHistoricalRewardsRecord;
            };
            ValidatorCurrentRewardsRecord: {
                encode(message: _83.ValidatorCurrentRewardsRecord, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _83.ValidatorCurrentRewardsRecord;
                fromPartial(object: {
                    validatorAddress?: string;
                    rewards?: {
                        rewards?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        period?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _83.ValidatorCurrentRewardsRecord;
            };
            DelegatorStartingInfoRecord: {
                encode(message: _83.DelegatorStartingInfoRecord, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _83.DelegatorStartingInfoRecord;
                fromPartial(object: {
                    delegatorAddress?: string;
                    validatorAddress?: string;
                    startingInfo?: {
                        previousPeriod?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        stake?: string;
                        height?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _83.DelegatorStartingInfoRecord;
            };
            ValidatorSlashEventRecord: {
                encode(message: _83.ValidatorSlashEventRecord, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _83.ValidatorSlashEventRecord;
                fromPartial(object: {
                    validatorAddress?: string;
                    height?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    period?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    validatorSlashEvent?: {
                        validatorPeriod?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        fraction?: string;
                    };
                }): _83.ValidatorSlashEventRecord;
            };
            GenesisState: {
                encode(message: _83.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _83.GenesisState;
                fromPartial(object: {
                    params?: {
                        communityTax?: string;
                        baseProposerReward?: string;
                        bonusProposerReward?: string;
                        withdrawAddrEnabled?: boolean;
                    };
                    feePool?: {
                        communityPool?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    };
                    delegatorWithdrawInfos?: {
                        delegatorAddress?: string;
                        withdrawAddress?: string;
                    }[];
                    previousProposer?: string;
                    outstandingRewards?: {
                        validatorAddress?: string;
                        outstandingRewards?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[];
                    validatorAccumulatedCommissions?: {
                        validatorAddress?: string;
                        accumulated?: {
                            commission?: {
                                denom?: string;
                                amount?: string;
                            }[];
                        };
                    }[];
                    validatorHistoricalRewards?: {
                        validatorAddress?: string;
                        period?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        rewards?: {
                            cumulativeRewardRatio?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            referenceCount?: number;
                        };
                    }[];
                    validatorCurrentRewards?: {
                        validatorAddress?: string;
                        rewards?: {
                            rewards?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            period?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                        };
                    }[];
                    delegatorStartingInfos?: {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        startingInfo?: {
                            previousPeriod?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            stake?: string;
                            height?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                        };
                    }[];
                    validatorSlashEvents?: {
                        validatorAddress?: string;
                        height?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        period?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        validatorSlashEvent?: {
                            validatorPeriod?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            fraction?: string;
                        };
                    }[];
                }): _83.GenesisState;
            };
            Params: {
                encode(message: _82.Params, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _82.Params;
                fromPartial(object: {
                    communityTax?: string;
                    baseProposerReward?: string;
                    bonusProposerReward?: string;
                    withdrawAddrEnabled?: boolean;
                }): _82.Params;
            };
            ValidatorHistoricalRewards: {
                encode(message: _82.ValidatorHistoricalRewards, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _82.ValidatorHistoricalRewards;
                fromPartial(object: {
                    cumulativeRewardRatio?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    referenceCount?: number;
                }): _82.ValidatorHistoricalRewards;
            };
            ValidatorCurrentRewards: {
                encode(message: _82.ValidatorCurrentRewards, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _82.ValidatorCurrentRewards;
                fromPartial(object: {
                    rewards?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    period?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }): _82.ValidatorCurrentRewards;
            };
            ValidatorAccumulatedCommission: {
                encode(message: _82.ValidatorAccumulatedCommission, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _82.ValidatorAccumulatedCommission;
                fromPartial(object: {
                    commission?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _82.ValidatorAccumulatedCommission;
            };
            ValidatorOutstandingRewards: {
                encode(message: _82.ValidatorOutstandingRewards, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _82.ValidatorOutstandingRewards;
                fromPartial(object: {
                    rewards?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _82.ValidatorOutstandingRewards;
            };
            ValidatorSlashEvent: {
                encode(message: _82.ValidatorSlashEvent, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _82.ValidatorSlashEvent;
                fromPartial(object: {
                    validatorPeriod?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    fraction?: string;
                }): _82.ValidatorSlashEvent;
            };
            ValidatorSlashEvents: {
                encode(message: _82.ValidatorSlashEvents, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _82.ValidatorSlashEvents;
                fromPartial(object: {
                    validatorSlashEvents?: {
                        validatorPeriod?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        fraction?: string;
                    }[];
                }): _82.ValidatorSlashEvents;
            };
            FeePool: {
                encode(message: _82.FeePool, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _82.FeePool;
                fromPartial(object: {
                    communityPool?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _82.FeePool;
            };
            CommunityPoolSpendProposal: {
                encode(message: _82.CommunityPoolSpendProposal, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _82.CommunityPoolSpendProposal;
                fromPartial(object: {
                    title?: string;
                    description?: string;
                    recipient?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _82.CommunityPoolSpendProposal;
            };
            DelegatorStartingInfo: {
                encode(message: _82.DelegatorStartingInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _82.DelegatorStartingInfo;
                fromPartial(object: {
                    previousPeriod?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    stake?: string;
                    height?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }): _82.DelegatorStartingInfo;
            };
            DelegationDelegatorReward: {
                encode(message: _82.DelegationDelegatorReward, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _82.DelegationDelegatorReward;
                fromPartial(object: {
                    validatorAddress?: string;
                    reward?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _82.DelegationDelegatorReward;
            };
            CommunityPoolSpendProposalWithDeposit: {
                encode(message: _82.CommunityPoolSpendProposalWithDeposit, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _82.CommunityPoolSpendProposalWithDeposit;
                fromPartial(object: {
                    title?: string;
                    description?: string;
                    recipient?: string;
                    amount?: string;
                    deposit?: string;
                }): _82.CommunityPoolSpendProposalWithDeposit;
            };
        };
    }
    namespace evidence {
        const v1beta1: {
            MsgClientImpl: typeof _275.MsgClientImpl;
            QueryClientImpl: typeof _259.QueryClientImpl;
            createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                evidence(request: _88.QueryEvidenceRequest): Promise<_88.QueryEvidenceResponse>;
                allEvidence(request?: _88.QueryAllEvidenceRequest): Promise<_88.QueryAllEvidenceResponse>;
            };
            LCDQueryClient: typeof _241.LCDQueryClient;
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    submitEvidence(value: _89.MsgSubmitEvidence): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    submitEvidence(value: _89.MsgSubmitEvidence): {
                        typeUrl: string;
                        value: _89.MsgSubmitEvidence;
                    };
                };
                fromPartial: {
                    submitEvidence(value: _89.MsgSubmitEvidence): {
                        typeUrl: string;
                        value: _89.MsgSubmitEvidence;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.evidence.v1beta1.MsgSubmitEvidence": {
                    aminoType: string;
                    toAmino: ({ submitter, evidence }: _89.MsgSubmitEvidence) => {
                        submitter: string;
                        evidence: {
                            type_url: string;
                            value: Uint8Array;
                        };
                    };
                    fromAmino: ({ submitter, evidence }: {
                        submitter: string;
                        evidence: {
                            type_url: string;
                            value: Uint8Array;
                        };
                    }) => _89.MsgSubmitEvidence;
                };
            };
            MsgSubmitEvidence: {
                encode(message: _89.MsgSubmitEvidence, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _89.MsgSubmitEvidence;
                fromPartial(object: {
                    submitter?: string;
                    evidence?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                }): _89.MsgSubmitEvidence;
            };
            MsgSubmitEvidenceResponse: {
                encode(message: _89.MsgSubmitEvidenceResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _89.MsgSubmitEvidenceResponse;
                fromPartial(object: {
                    hash?: Uint8Array;
                }): _89.MsgSubmitEvidenceResponse;
            };
            QueryEvidenceRequest: {
                encode(message: _88.QueryEvidenceRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _88.QueryEvidenceRequest;
                fromPartial(object: {
                    evidenceHash?: Uint8Array;
                }): _88.QueryEvidenceRequest;
            };
            QueryEvidenceResponse: {
                encode(message: _88.QueryEvidenceResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _88.QueryEvidenceResponse;
                fromPartial(object: {
                    evidence?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                }): _88.QueryEvidenceResponse;
            };
            QueryAllEvidenceRequest: {
                encode(message: _88.QueryAllEvidenceRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _88.QueryAllEvidenceRequest;
                fromPartial(object: {
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _88.QueryAllEvidenceRequest;
            };
            QueryAllEvidenceResponse: {
                encode(message: _88.QueryAllEvidenceResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _88.QueryAllEvidenceResponse;
                fromPartial(object: {
                    evidence?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _88.QueryAllEvidenceResponse;
            };
            GenesisState: {
                encode(message: _87.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _87.GenesisState;
                fromPartial(object: {
                    evidence?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                }): _87.GenesisState;
            };
            Equivocation: {
                encode(message: _86.Equivocation, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _86.Equivocation;
                fromPartial(object: {
                    height?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    time?: Date;
                    power?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    consensusAddress?: string;
                }): _86.Equivocation;
            };
        };
    }
    namespace feegrant {
        const v1beta1: {
            MsgClientImpl: typeof _276.MsgClientImpl;
            QueryClientImpl: typeof _260.QueryClientImpl;
            createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                allowance(request: _92.QueryAllowanceRequest): Promise<_92.QueryAllowanceResponse>;
                allowances(request: _92.QueryAllowancesRequest): Promise<_92.QueryAllowancesResponse>;
                allowancesByGranter(request: _92.QueryAllowancesByGranterRequest): Promise<_92.QueryAllowancesByGranterResponse>;
            };
            LCDQueryClient: typeof _242.LCDQueryClient;
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    grantAllowance(value: _93.MsgGrantAllowance): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    revokeAllowance(value: _93.MsgRevokeAllowance): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    grantAllowance(value: _93.MsgGrantAllowance): {
                        typeUrl: string;
                        value: _93.MsgGrantAllowance;
                    };
                    revokeAllowance(value: _93.MsgRevokeAllowance): {
                        typeUrl: string;
                        value: _93.MsgRevokeAllowance;
                    };
                };
                fromPartial: {
                    grantAllowance(value: _93.MsgGrantAllowance): {
                        typeUrl: string;
                        value: _93.MsgGrantAllowance;
                    };
                    revokeAllowance(value: _93.MsgRevokeAllowance): {
                        typeUrl: string;
                        value: _93.MsgRevokeAllowance;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.feegrant.v1beta1.MsgGrantAllowance": {
                    aminoType: string;
                    toAmino: ({ granter, grantee, allowance }: _93.MsgGrantAllowance) => {
                        granter: string;
                        grantee: string;
                        allowance: {
                            type_url: string;
                            value: Uint8Array;
                        };
                    };
                    fromAmino: ({ granter, grantee, allowance }: {
                        granter: string;
                        grantee: string;
                        allowance: {
                            type_url: string;
                            value: Uint8Array;
                        };
                    }) => _93.MsgGrantAllowance;
                };
                "/cosmos.feegrant.v1beta1.MsgRevokeAllowance": {
                    aminoType: string;
                    toAmino: ({ granter, grantee }: _93.MsgRevokeAllowance) => {
                        granter: string;
                        grantee: string;
                    };
                    fromAmino: ({ granter, grantee }: {
                        granter: string;
                        grantee: string;
                    }) => _93.MsgRevokeAllowance;
                };
            };
            MsgGrantAllowance: {
                encode(message: _93.MsgGrantAllowance, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _93.MsgGrantAllowance;
                fromPartial(object: {
                    granter?: string;
                    grantee?: string;
                    allowance?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                }): _93.MsgGrantAllowance;
            };
            MsgGrantAllowanceResponse: {
                encode(_: _93.MsgGrantAllowanceResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _93.MsgGrantAllowanceResponse;
                fromPartial(_: {}): _93.MsgGrantAllowanceResponse;
            };
            MsgRevokeAllowance: {
                encode(message: _93.MsgRevokeAllowance, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _93.MsgRevokeAllowance;
                fromPartial(object: {
                    granter?: string;
                    grantee?: string;
                }): _93.MsgRevokeAllowance;
            };
            MsgRevokeAllowanceResponse: {
                encode(_: _93.MsgRevokeAllowanceResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _93.MsgRevokeAllowanceResponse;
                fromPartial(_: {}): _93.MsgRevokeAllowanceResponse;
            };
            QueryAllowanceRequest: {
                encode(message: _92.QueryAllowanceRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _92.QueryAllowanceRequest;
                fromPartial(object: {
                    granter?: string;
                    grantee?: string;
                }): _92.QueryAllowanceRequest;
            };
            QueryAllowanceResponse: {
                encode(message: _92.QueryAllowanceResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _92.QueryAllowanceResponse;
                fromPartial(object: {
                    allowance?: {
                        granter?: string;
                        grantee?: string;
                        allowance?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    };
                }): _92.QueryAllowanceResponse;
            };
            QueryAllowancesRequest: {
                encode(message: _92.QueryAllowancesRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _92.QueryAllowancesRequest;
                fromPartial(object: {
                    grantee?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _92.QueryAllowancesRequest;
            };
            QueryAllowancesResponse: {
                encode(message: _92.QueryAllowancesResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _92.QueryAllowancesResponse;
                fromPartial(object: {
                    allowances?: {
                        granter?: string;
                        grantee?: string;
                        allowance?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _92.QueryAllowancesResponse;
            };
            QueryAllowancesByGranterRequest: {
                encode(message: _92.QueryAllowancesByGranterRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _92.QueryAllowancesByGranterRequest;
                fromPartial(object: {
                    granter?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _92.QueryAllowancesByGranterRequest;
            };
            QueryAllowancesByGranterResponse: {
                encode(message: _92.QueryAllowancesByGranterResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _92.QueryAllowancesByGranterResponse;
                fromPartial(object: {
                    allowances?: {
                        granter?: string;
                        grantee?: string;
                        allowance?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _92.QueryAllowancesByGranterResponse;
            };
            GenesisState: {
                encode(message: _91.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _91.GenesisState;
                fromPartial(object: {
                    allowances?: {
                        granter?: string;
                        grantee?: string;
                        allowance?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }[];
                }): _91.GenesisState;
            };
            BasicAllowance: {
                encode(message: _90.BasicAllowance, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _90.BasicAllowance;
                fromPartial(object: {
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: Date;
                }): _90.BasicAllowance;
            };
            PeriodicAllowance: {
                encode(message: _90.PeriodicAllowance, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _90.PeriodicAllowance;
                fromPartial(object: {
                    basic?: {
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        expiration?: Date;
                    };
                    period?: {
                        seconds?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        nanos?: number;
                    };
                    periodSpendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodCanSpend?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodReset?: Date;
                }): _90.PeriodicAllowance;
            };
            AllowedMsgAllowance: {
                encode(message: _90.AllowedMsgAllowance, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _90.AllowedMsgAllowance;
                fromPartial(object: {
                    allowance?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                    allowedMessages?: string[];
                }): _90.AllowedMsgAllowance;
            };
            Grant: {
                encode(message: _90.Grant, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _90.Grant;
                fromPartial(object: {
                    granter?: string;
                    grantee?: string;
                    allowance?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                }): _90.Grant;
            };
        };
    }
    namespace genutil {
        const v1beta1: {
            GenesisState: {
                encode(message: _94.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _94.GenesisState;
                fromPartial(object: {
                    genTxs?: Uint8Array[];
                }): _94.GenesisState;
            };
        };
    }
    namespace gov {
        const v1: {
            MsgClientImpl: typeof _277.MsgClientImpl;
            QueryClientImpl: typeof _261.QueryClientImpl;
            createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                proposal(request: _97.QueryProposalRequest): Promise<_97.QueryProposalResponse>;
                proposals(request: _97.QueryProposalsRequest): Promise<_97.QueryProposalsResponse>;
                vote(request: _97.QueryVoteRequest): Promise<_97.QueryVoteResponse>;
                votes(request: _97.QueryVotesRequest): Promise<_97.QueryVotesResponse>;
                params(request: _97.QueryParamsRequest): Promise<_97.QueryParamsResponse>;
                deposit(request: _97.QueryDepositRequest): Promise<_97.QueryDepositResponse>;
                deposits(request: _97.QueryDepositsRequest): Promise<_97.QueryDepositsResponse>;
                tallyResult(request: _97.QueryTallyResultRequest): Promise<_97.QueryTallyResultResponse>;
            };
            LCDQueryClient: typeof _243.LCDQueryClient;
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    submitProposal(value: _98.MsgSubmitProposal): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    execLegacyContent(value: _98.MsgExecLegacyContent): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    vote(value: _98.MsgVote): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    voteWeighted(value: _98.MsgVoteWeighted): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    deposit(value: _98.MsgDeposit): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    submitProposal(value: _98.MsgSubmitProposal): {
                        typeUrl: string;
                        value: _98.MsgSubmitProposal;
                    };
                    execLegacyContent(value: _98.MsgExecLegacyContent): {
                        typeUrl: string;
                        value: _98.MsgExecLegacyContent;
                    };
                    vote(value: _98.MsgVote): {
                        typeUrl: string;
                        value: _98.MsgVote;
                    };
                    voteWeighted(value: _98.MsgVoteWeighted): {
                        typeUrl: string;
                        value: _98.MsgVoteWeighted;
                    };
                    deposit(value: _98.MsgDeposit): {
                        typeUrl: string;
                        value: _98.MsgDeposit;
                    };
                };
                fromPartial: {
                    submitProposal(value: _98.MsgSubmitProposal): {
                        typeUrl: string;
                        value: _98.MsgSubmitProposal;
                    };
                    execLegacyContent(value: _98.MsgExecLegacyContent): {
                        typeUrl: string;
                        value: _98.MsgExecLegacyContent;
                    };
                    vote(value: _98.MsgVote): {
                        typeUrl: string;
                        value: _98.MsgVote;
                    };
                    voteWeighted(value: _98.MsgVoteWeighted): {
                        typeUrl: string;
                        value: _98.MsgVoteWeighted;
                    };
                    deposit(value: _98.MsgDeposit): {
                        typeUrl: string;
                        value: _98.MsgDeposit;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.gov.v1.MsgSubmitProposal": {
                    aminoType: string;
                    toAmino: ({ messages, initialDeposit, proposer, metadata }: _98.MsgSubmitProposal) => {
                        messages: {
                            type_url: string;
                            value: Uint8Array;
                        }[];
                        initial_deposit: {
                            denom: string;
                            amount: string;
                        }[];
                        proposer: string;
                        metadata: string;
                    };
                    fromAmino: ({ messages, initial_deposit, proposer, metadata }: {
                        messages: {
                            type_url: string;
                            value: Uint8Array;
                        }[];
                        initial_deposit: {
                            denom: string;
                            amount: string;
                        }[];
                        proposer: string;
                        metadata: string;
                    }) => _98.MsgSubmitProposal;
                };
                "/cosmos.gov.v1.MsgExecLegacyContent": {
                    aminoType: string;
                    toAmino: ({ content, authority }: _98.MsgExecLegacyContent) => {
                        content: {
                            type_url: string;
                            value: Uint8Array;
                        };
                        authority: string;
                    };
                    fromAmino: ({ content, authority }: {
                        content: {
                            type_url: string;
                            value: Uint8Array;
                        };
                        authority: string;
                    }) => _98.MsgExecLegacyContent;
                };
                "/cosmos.gov.v1.MsgVote": {
                    aminoType: string;
                    toAmino: ({ proposalId, voter, option, metadata }: _98.MsgVote) => {
                        proposal_id: string;
                        voter: string;
                        option: number;
                        metadata: string;
                    };
                    fromAmino: ({ proposal_id, voter, option, metadata }: {
                        proposal_id: string;
                        voter: string;
                        option: number;
                        metadata: string;
                    }) => _98.MsgVote;
                };
                "/cosmos.gov.v1.MsgVoteWeighted": {
                    aminoType: string;
                    toAmino: ({ proposalId, voter, options, metadata }: _98.MsgVoteWeighted) => {
                        proposal_id: string;
                        voter: string;
                        options: {
                            option: number;
                            weight: string;
                        }[];
                        metadata: string;
                    };
                    fromAmino: ({ proposal_id, voter, options, metadata }: {
                        proposal_id: string;
                        voter: string;
                        options: {
                            option: number;
                            weight: string;
                        }[];
                        metadata: string;
                    }) => _98.MsgVoteWeighted;
                };
                "/cosmos.gov.v1.MsgDeposit": {
                    aminoType: string;
                    toAmino: ({ proposalId, depositor, amount }: _98.MsgDeposit) => {
                        proposal_id: string;
                        depositor: string;
                        amount: {
                            denom: string;
                            amount: string;
                        }[];
                    };
                    fromAmino: ({ proposal_id, depositor, amount }: {
                        proposal_id: string;
                        depositor: string;
                        amount: {
                            denom: string;
                            amount: string;
                        }[];
                    }) => _98.MsgDeposit;
                };
            };
            MsgSubmitProposal: {
                encode(message: _98.MsgSubmitProposal, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _98.MsgSubmitProposal;
                fromPartial(object: {
                    messages?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                    initialDeposit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    proposer?: string;
                    metadata?: string;
                }): _98.MsgSubmitProposal;
            };
            MsgSubmitProposalResponse: {
                encode(message: _98.MsgSubmitProposalResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _98.MsgSubmitProposalResponse;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }): _98.MsgSubmitProposalResponse;
            };
            MsgExecLegacyContent: {
                encode(message: _98.MsgExecLegacyContent, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _98.MsgExecLegacyContent;
                fromPartial(object: {
                    content?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                    authority?: string;
                }): _98.MsgExecLegacyContent;
            };
            MsgExecLegacyContentResponse: {
                encode(_: _98.MsgExecLegacyContentResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _98.MsgExecLegacyContentResponse;
                fromPartial(_: {}): _98.MsgExecLegacyContentResponse;
            };
            MsgVote: {
                encode(message: _98.MsgVote, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _98.MsgVote;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    voter?: string;
                    option?: _96.VoteOption;
                    metadata?: string;
                }): _98.MsgVote;
            };
            MsgVoteResponse: {
                encode(_: _98.MsgVoteResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _98.MsgVoteResponse;
                fromPartial(_: {}): _98.MsgVoteResponse;
            };
            MsgVoteWeighted: {
                encode(message: _98.MsgVoteWeighted, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _98.MsgVoteWeighted;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    voter?: string;
                    options?: {
                        option?: _96.VoteOption;
                        weight?: string;
                    }[];
                    metadata?: string;
                }): _98.MsgVoteWeighted;
            };
            MsgVoteWeightedResponse: {
                encode(_: _98.MsgVoteWeightedResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _98.MsgVoteWeightedResponse;
                fromPartial(_: {}): _98.MsgVoteWeightedResponse;
            };
            MsgDeposit: {
                encode(message: _98.MsgDeposit, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _98.MsgDeposit;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    depositor?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _98.MsgDeposit;
            };
            MsgDepositResponse: {
                encode(_: _98.MsgDepositResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _98.MsgDepositResponse;
                fromPartial(_: {}): _98.MsgDepositResponse;
            };
            QueryProposalRequest: {
                encode(message: _97.QueryProposalRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _97.QueryProposalRequest;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }): _97.QueryProposalRequest;
            };
            QueryProposalResponse: {
                encode(message: _97.QueryProposalResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _97.QueryProposalResponse;
                fromPartial(object: {
                    proposal?: {
                        id?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                        status?: _96.ProposalStatus;
                        finalTallyResult?: {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        };
                        submitTime?: Date;
                        depositEndTime?: Date;
                        totalDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        votingStartTime?: Date;
                        votingEndTime?: Date;
                        metadata?: string;
                    };
                }): _97.QueryProposalResponse;
            };
            QueryProposalsRequest: {
                encode(message: _97.QueryProposalsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _97.QueryProposalsRequest;
                fromPartial(object: {
                    proposalStatus?: _96.ProposalStatus;
                    voter?: string;
                    depositor?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _97.QueryProposalsRequest;
            };
            QueryProposalsResponse: {
                encode(message: _97.QueryProposalsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _97.QueryProposalsResponse;
                fromPartial(object: {
                    proposals?: {
                        id?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                        status?: _96.ProposalStatus;
                        finalTallyResult?: {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        };
                        submitTime?: Date;
                        depositEndTime?: Date;
                        totalDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        votingStartTime?: Date;
                        votingEndTime?: Date;
                        metadata?: string;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _97.QueryProposalsResponse;
            };
            QueryVoteRequest: {
                encode(message: _97.QueryVoteRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _97.QueryVoteRequest;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    voter?: string;
                }): _97.QueryVoteRequest;
            };
            QueryVoteResponse: {
                encode(message: _97.QueryVoteResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _97.QueryVoteResponse;
                fromPartial(object: {
                    vote?: {
                        proposalId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        voter?: string;
                        options?: {
                            option?: _96.VoteOption;
                            weight?: string;
                        }[];
                        metadata?: string;
                    };
                }): _97.QueryVoteResponse;
            };
            QueryVotesRequest: {
                encode(message: _97.QueryVotesRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _97.QueryVotesRequest;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _97.QueryVotesRequest;
            };
            QueryVotesResponse: {
                encode(message: _97.QueryVotesResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _97.QueryVotesResponse;
                fromPartial(object: {
                    votes?: {
                        proposalId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        voter?: string;
                        options?: {
                            option?: _96.VoteOption;
                            weight?: string;
                        }[];
                        metadata?: string;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _97.QueryVotesResponse;
            };
            QueryParamsRequest: {
                encode(message: _97.QueryParamsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _97.QueryParamsRequest;
                fromPartial(object: {
                    paramsType?: string;
                }): _97.QueryParamsRequest;
            };
            QueryParamsResponse: {
                encode(message: _97.QueryParamsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _97.QueryParamsResponse;
                fromPartial(object: {
                    votingParams?: {
                        votingPeriod?: {
                            seconds?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            nanos?: number;
                        };
                    };
                    depositParams?: {
                        minDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        maxDepositPeriod?: {
                            seconds?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            nanos?: number;
                        };
                    };
                    tallyParams?: {
                        quorum?: string;
                        threshold?: string;
                        vetoThreshold?: string;
                    };
                }): _97.QueryParamsResponse;
            };
            QueryDepositRequest: {
                encode(message: _97.QueryDepositRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _97.QueryDepositRequest;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    depositor?: string;
                }): _97.QueryDepositRequest;
            };
            QueryDepositResponse: {
                encode(message: _97.QueryDepositResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _97.QueryDepositResponse;
                fromPartial(object: {
                    deposit?: {
                        proposalId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        depositor?: string;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    };
                }): _97.QueryDepositResponse;
            };
            QueryDepositsRequest: {
                encode(message: _97.QueryDepositsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _97.QueryDepositsRequest;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _97.QueryDepositsRequest;
            };
            QueryDepositsResponse: {
                encode(message: _97.QueryDepositsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _97.QueryDepositsResponse;
                fromPartial(object: {
                    deposits?: {
                        proposalId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        depositor?: string;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _97.QueryDepositsResponse;
            };
            QueryTallyResultRequest: {
                encode(message: _97.QueryTallyResultRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _97.QueryTallyResultRequest;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }): _97.QueryTallyResultRequest;
            };
            QueryTallyResultResponse: {
                encode(message: _97.QueryTallyResultResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _97.QueryTallyResultResponse;
                fromPartial(object: {
                    tally?: {
                        yesCount?: string;
                        abstainCount?: string;
                        noCount?: string;
                        noWithVetoCount?: string;
                    };
                }): _97.QueryTallyResultResponse;
            };
            voteOptionFromJSON(object: any): _96.VoteOption;
            voteOptionToJSON(object: _96.VoteOption): string;
            proposalStatusFromJSON(object: any): _96.ProposalStatus;
            proposalStatusToJSON(object: _96.ProposalStatus): string;
            VoteOption: typeof _96.VoteOption;
            VoteOptionSDKType: typeof _96.VoteOptionSDKType;
            ProposalStatus: typeof _96.ProposalStatus;
            ProposalStatusSDKType: typeof _96.ProposalStatusSDKType;
            WeightedVoteOption: {
                encode(message: _96.WeightedVoteOption, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _96.WeightedVoteOption;
                fromPartial(object: {
                    option?: _96.VoteOption;
                    weight?: string;
                }): _96.WeightedVoteOption;
            };
            Deposit: {
                encode(message: _96.Deposit, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _96.Deposit;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    depositor?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _96.Deposit;
            };
            Proposal: {
                encode(message: _96.Proposal, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _96.Proposal;
                fromPartial(object: {
                    id?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    messages?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                    status?: _96.ProposalStatus;
                    finalTallyResult?: {
                        yesCount?: string;
                        abstainCount?: string;
                        noCount?: string;
                        noWithVetoCount?: string;
                    };
                    submitTime?: Date;
                    depositEndTime?: Date;
                    totalDeposit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    votingStartTime?: Date;
                    votingEndTime?: Date;
                    metadata?: string;
                }): _96.Proposal;
            };
            TallyResult: {
                encode(message: _96.TallyResult, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _96.TallyResult;
                fromPartial(object: {
                    yesCount?: string;
                    abstainCount?: string;
                    noCount?: string;
                    noWithVetoCount?: string;
                }): _96.TallyResult;
            };
            Vote: {
                encode(message: _96.Vote, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _96.Vote;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    voter?: string;
                    options?: {
                        option?: _96.VoteOption;
                        weight?: string;
                    }[];
                    metadata?: string;
                }): _96.Vote;
            };
            DepositParams: {
                encode(message: _96.DepositParams, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _96.DepositParams;
                fromPartial(object: {
                    minDeposit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    maxDepositPeriod?: {
                        seconds?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        nanos?: number;
                    };
                }): _96.DepositParams;
            };
            VotingParams: {
                encode(message: _96.VotingParams, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _96.VotingParams;
                fromPartial(object: {
                    votingPeriod?: {
                        seconds?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        nanos?: number;
                    };
                }): _96.VotingParams;
            };
            TallyParams: {
                encode(message: _96.TallyParams, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _96.TallyParams;
                fromPartial(object: {
                    quorum?: string;
                    threshold?: string;
                    vetoThreshold?: string;
                }): _96.TallyParams;
            };
            GenesisState: {
                encode(message: _95.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _95.GenesisState;
                fromPartial(object: {
                    startingProposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    deposits?: {
                        proposalId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        depositor?: string;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[];
                    votes?: {
                        proposalId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        voter?: string;
                        options?: {
                            option?: _96.VoteOption;
                            weight?: string;
                        }[];
                        metadata?: string;
                    }[];
                    proposals?: {
                        id?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                        status?: _96.ProposalStatus;
                        finalTallyResult?: {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        };
                        submitTime?: Date;
                        depositEndTime?: Date;
                        totalDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        votingStartTime?: Date;
                        votingEndTime?: Date;
                        metadata?: string;
                    }[];
                    depositParams?: {
                        minDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        maxDepositPeriod?: {
                            seconds?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            nanos?: number;
                        };
                    };
                    votingParams?: {
                        votingPeriod?: {
                            seconds?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            nanos?: number;
                        };
                    };
                    tallyParams?: {
                        quorum?: string;
                        threshold?: string;
                        vetoThreshold?: string;
                    };
                }): _95.GenesisState;
            };
        };
        const v1beta1: {
            MsgClientImpl: typeof _278.MsgClientImpl;
            QueryClientImpl: typeof _262.QueryClientImpl;
            createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                proposal(request: _101.QueryProposalRequest): Promise<_101.QueryProposalResponse>;
                proposals(request: _101.QueryProposalsRequest): Promise<_101.QueryProposalsResponse>;
                vote(request: _101.QueryVoteRequest): Promise<_101.QueryVoteResponse>;
                votes(request: _101.QueryVotesRequest): Promise<_101.QueryVotesResponse>;
                params(request: _101.QueryParamsRequest): Promise<_101.QueryParamsResponse>;
                deposit(request: _101.QueryDepositRequest): Promise<_101.QueryDepositResponse>;
                deposits(request: _101.QueryDepositsRequest): Promise<_101.QueryDepositsResponse>;
                tallyResult(request: _101.QueryTallyResultRequest): Promise<_101.QueryTallyResultResponse>;
            };
            LCDQueryClient: typeof _244.LCDQueryClient;
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    submitProposal(value: _102.MsgSubmitProposal): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    vote(value: _102.MsgVote): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    voteWeighted(value: _102.MsgVoteWeighted): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    deposit(value: _102.MsgDeposit): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    submitProposal(value: _102.MsgSubmitProposal): {
                        typeUrl: string;
                        value: _102.MsgSubmitProposal;
                    };
                    vote(value: _102.MsgVote): {
                        typeUrl: string;
                        value: _102.MsgVote;
                    };
                    voteWeighted(value: _102.MsgVoteWeighted): {
                        typeUrl: string;
                        value: _102.MsgVoteWeighted;
                    };
                    deposit(value: _102.MsgDeposit): {
                        typeUrl: string;
                        value: _102.MsgDeposit;
                    };
                };
                fromPartial: {
                    submitProposal(value: _102.MsgSubmitProposal): {
                        typeUrl: string;
                        value: _102.MsgSubmitProposal;
                    };
                    vote(value: _102.MsgVote): {
                        typeUrl: string;
                        value: _102.MsgVote;
                    };
                    voteWeighted(value: _102.MsgVoteWeighted): {
                        typeUrl: string;
                        value: _102.MsgVoteWeighted;
                    };
                    deposit(value: _102.MsgDeposit): {
                        typeUrl: string;
                        value: _102.MsgDeposit;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.gov.v1beta1.MsgSubmitProposal": {
                    aminoType: string;
                    toAmino: ({ content, initialDeposit, proposer }: _102.MsgSubmitProposal) => {
                        content: {
                            type_url: string;
                            value: Uint8Array;
                        };
                        initial_deposit: {
                            denom: string;
                            amount: string;
                        }[];
                        proposer: string;
                    };
                    fromAmino: ({ content, initial_deposit, proposer }: {
                        content: {
                            type_url: string;
                            value: Uint8Array;
                        };
                        initial_deposit: {
                            denom: string;
                            amount: string;
                        }[];
                        proposer: string;
                    }) => _102.MsgSubmitProposal;
                };
                "/cosmos.gov.v1beta1.MsgVote": {
                    aminoType: string;
                    toAmino: ({ proposalId, voter, option }: _102.MsgVote) => {
                        proposal_id: string;
                        voter: string;
                        option: number;
                    };
                    fromAmino: ({ proposal_id, voter, option }: {
                        proposal_id: string;
                        voter: string;
                        option: number;
                    }) => _102.MsgVote;
                };
                "/cosmos.gov.v1beta1.MsgVoteWeighted": {
                    aminoType: string;
                    toAmino: ({ proposalId, voter, options }: _102.MsgVoteWeighted) => {
                        proposal_id: string;
                        voter: string;
                        options: {
                            option: number;
                            weight: string;
                        }[];
                    };
                    fromAmino: ({ proposal_id, voter, options }: {
                        proposal_id: string;
                        voter: string;
                        options: {
                            option: number;
                            weight: string;
                        }[];
                    }) => _102.MsgVoteWeighted;
                };
                "/cosmos.gov.v1beta1.MsgDeposit": {
                    aminoType: string;
                    toAmino: ({ proposalId, depositor, amount }: _102.MsgDeposit) => {
                        proposal_id: string;
                        depositor: string;
                        amount: {
                            denom: string;
                            amount: string;
                        }[];
                    };
                    fromAmino: ({ proposal_id, depositor, amount }: {
                        proposal_id: string;
                        depositor: string;
                        amount: {
                            denom: string;
                            amount: string;
                        }[];
                    }) => _102.MsgDeposit;
                };
            };
            MsgSubmitProposal: {
                encode(message: _102.MsgSubmitProposal, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _102.MsgSubmitProposal;
                fromPartial(object: {
                    content?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                    initialDeposit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    proposer?: string;
                }): _102.MsgSubmitProposal;
            };
            MsgSubmitProposalResponse: {
                encode(message: _102.MsgSubmitProposalResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _102.MsgSubmitProposalResponse;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }): _102.MsgSubmitProposalResponse;
            };
            MsgVote: {
                encode(message: _102.MsgVote, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _102.MsgVote;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    voter?: string;
                    option?: _100.VoteOption;
                }): _102.MsgVote;
            };
            MsgVoteResponse: {
                encode(_: _102.MsgVoteResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _102.MsgVoteResponse;
                fromPartial(_: {}): _102.MsgVoteResponse;
            };
            MsgVoteWeighted: {
                encode(message: _102.MsgVoteWeighted, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _102.MsgVoteWeighted;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    voter?: string;
                    options?: {
                        option?: _100.VoteOption;
                        weight?: string;
                    }[];
                }): _102.MsgVoteWeighted;
            };
            MsgVoteWeightedResponse: {
                encode(_: _102.MsgVoteWeightedResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _102.MsgVoteWeightedResponse;
                fromPartial(_: {}): _102.MsgVoteWeightedResponse;
            };
            MsgDeposit: {
                encode(message: _102.MsgDeposit, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _102.MsgDeposit;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    depositor?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _102.MsgDeposit;
            };
            MsgDepositResponse: {
                encode(_: _102.MsgDepositResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _102.MsgDepositResponse;
                fromPartial(_: {}): _102.MsgDepositResponse;
            };
            QueryProposalRequest: {
                encode(message: _101.QueryProposalRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _101.QueryProposalRequest;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }): _101.QueryProposalRequest;
            };
            QueryProposalResponse: {
                encode(message: _101.QueryProposalResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _101.QueryProposalResponse;
                fromPartial(object: {
                    proposal?: {
                        proposalId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        content?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        status?: _100.ProposalStatus;
                        finalTallyResult?: {
                            yes?: string;
                            abstain?: string;
                            no?: string;
                            noWithVeto?: string;
                        };
                        submitTime?: Date;
                        depositEndTime?: Date;
                        totalDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        votingStartTime?: Date;
                        votingEndTime?: Date;
                    };
                }): _101.QueryProposalResponse;
            };
            QueryProposalsRequest: {
                encode(message: _101.QueryProposalsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _101.QueryProposalsRequest;
                fromPartial(object: {
                    proposalStatus?: _100.ProposalStatus;
                    voter?: string;
                    depositor?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _101.QueryProposalsRequest;
            };
            QueryProposalsResponse: {
                encode(message: _101.QueryProposalsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _101.QueryProposalsResponse;
                fromPartial(object: {
                    proposals?: {
                        proposalId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        content?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        status?: _100.ProposalStatus;
                        finalTallyResult?: {
                            yes?: string;
                            abstain?: string;
                            no?: string;
                            noWithVeto?: string;
                        };
                        submitTime?: Date;
                        depositEndTime?: Date;
                        totalDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        votingStartTime?: Date;
                        votingEndTime?: Date;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _101.QueryProposalsResponse;
            };
            QueryVoteRequest: {
                encode(message: _101.QueryVoteRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _101.QueryVoteRequest;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    voter?: string;
                }): _101.QueryVoteRequest;
            };
            QueryVoteResponse: {
                encode(message: _101.QueryVoteResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _101.QueryVoteResponse;
                fromPartial(object: {
                    vote?: {
                        proposalId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        voter?: string;
                        option?: _100.VoteOption;
                        options?: {
                            option?: _100.VoteOption;
                            weight?: string;
                        }[];
                    };
                }): _101.QueryVoteResponse;
            };
            QueryVotesRequest: {
                encode(message: _101.QueryVotesRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _101.QueryVotesRequest;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _101.QueryVotesRequest;
            };
            QueryVotesResponse: {
                encode(message: _101.QueryVotesResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _101.QueryVotesResponse;
                fromPartial(object: {
                    votes?: {
                        proposalId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        voter?: string;
                        option?: _100.VoteOption;
                        options?: {
                            option?: _100.VoteOption;
                            weight?: string;
                        }[];
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _101.QueryVotesResponse;
            };
            QueryParamsRequest: {
                encode(message: _101.QueryParamsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _101.QueryParamsRequest;
                fromPartial(object: {
                    paramsType?: string;
                }): _101.QueryParamsRequest;
            };
            QueryParamsResponse: {
                encode(message: _101.QueryParamsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _101.QueryParamsResponse;
                fromPartial(object: {
                    votingParams?: {
                        votingPeriod?: {
                            seconds?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            nanos?: number;
                        };
                    };
                    depositParams?: {
                        minDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        maxDepositPeriod?: {
                            seconds?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            nanos?: number;
                        };
                    };
                    tallyParams?: {
                        quorum?: Uint8Array;
                        threshold?: Uint8Array;
                        vetoThreshold?: Uint8Array;
                    };
                }): _101.QueryParamsResponse;
            };
            QueryDepositRequest: {
                encode(message: _101.QueryDepositRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _101.QueryDepositRequest;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    depositor?: string;
                }): _101.QueryDepositRequest;
            };
            QueryDepositResponse: {
                encode(message: _101.QueryDepositResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _101.QueryDepositResponse;
                fromPartial(object: {
                    deposit?: {
                        proposalId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        depositor?: string;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    };
                }): _101.QueryDepositResponse;
            };
            QueryDepositsRequest: {
                encode(message: _101.QueryDepositsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _101.QueryDepositsRequest;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _101.QueryDepositsRequest;
            };
            QueryDepositsResponse: {
                encode(message: _101.QueryDepositsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _101.QueryDepositsResponse;
                fromPartial(object: {
                    deposits?: {
                        proposalId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        depositor?: string;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _101.QueryDepositsResponse;
            };
            QueryTallyResultRequest: {
                encode(message: _101.QueryTallyResultRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _101.QueryTallyResultRequest;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }): _101.QueryTallyResultRequest;
            };
            QueryTallyResultResponse: {
                encode(message: _101.QueryTallyResultResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _101.QueryTallyResultResponse;
                fromPartial(object: {
                    tally?: {
                        yes?: string;
                        abstain?: string;
                        no?: string;
                        noWithVeto?: string;
                    };
                }): _101.QueryTallyResultResponse;
            };
            voteOptionFromJSON(object: any): _100.VoteOption;
            voteOptionToJSON(object: _100.VoteOption): string;
            proposalStatusFromJSON(object: any): _100.ProposalStatus;
            proposalStatusToJSON(object: _100.ProposalStatus): string;
            VoteOption: typeof _100.VoteOption;
            VoteOptionSDKType: typeof _100.VoteOptionSDKType;
            ProposalStatus: typeof _100.ProposalStatus;
            ProposalStatusSDKType: typeof _100.ProposalStatusSDKType;
            WeightedVoteOption: {
                encode(message: _100.WeightedVoteOption, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _100.WeightedVoteOption;
                fromPartial(object: {
                    option?: _100.VoteOption;
                    weight?: string;
                }): _100.WeightedVoteOption;
            };
            TextProposal: {
                encode(message: _100.TextProposal, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _100.TextProposal;
                fromPartial(object: {
                    title?: string;
                    description?: string;
                }): _100.TextProposal;
            };
            Deposit: {
                encode(message: _100.Deposit, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _100.Deposit;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    depositor?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _100.Deposit;
            };
            Proposal: {
                encode(message: _100.Proposal, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _100.Proposal;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    content?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                    status?: _100.ProposalStatus;
                    finalTallyResult?: {
                        yes?: string;
                        abstain?: string;
                        no?: string;
                        noWithVeto?: string;
                    };
                    submitTime?: Date;
                    depositEndTime?: Date;
                    totalDeposit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    votingStartTime?: Date;
                    votingEndTime?: Date;
                }): _100.Proposal;
            };
            TallyResult: {
                encode(message: _100.TallyResult, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _100.TallyResult;
                fromPartial(object: {
                    yes?: string;
                    abstain?: string;
                    no?: string;
                    noWithVeto?: string;
                }): _100.TallyResult;
            };
            Vote: {
                encode(message: _100.Vote, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _100.Vote;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    voter?: string;
                    option?: _100.VoteOption;
                    options?: {
                        option?: _100.VoteOption;
                        weight?: string;
                    }[];
                }): _100.Vote;
            };
            DepositParams: {
                encode(message: _100.DepositParams, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _100.DepositParams;
                fromPartial(object: {
                    minDeposit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    maxDepositPeriod?: {
                        seconds?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        nanos?: number;
                    };
                }): _100.DepositParams;
            };
            VotingParams: {
                encode(message: _100.VotingParams, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _100.VotingParams;
                fromPartial(object: {
                    votingPeriod?: {
                        seconds?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        nanos?: number;
                    };
                }): _100.VotingParams;
            };
            TallyParams: {
                encode(message: _100.TallyParams, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _100.TallyParams;
                fromPartial(object: {
                    quorum?: Uint8Array;
                    threshold?: Uint8Array;
                    vetoThreshold?: Uint8Array;
                }): _100.TallyParams;
            };
            GenesisState: {
                encode(message: _99.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _99.GenesisState;
                fromPartial(object: {
                    startingProposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    deposits?: {
                        proposalId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        depositor?: string;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[];
                    votes?: {
                        proposalId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        voter?: string;
                        option?: _100.VoteOption;
                        options?: {
                            option?: _100.VoteOption;
                            weight?: string;
                        }[];
                    }[];
                    proposals?: {
                        proposalId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        content?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        status?: _100.ProposalStatus;
                        finalTallyResult?: {
                            yes?: string;
                            abstain?: string;
                            no?: string;
                            noWithVeto?: string;
                        };
                        submitTime?: Date;
                        depositEndTime?: Date;
                        totalDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        votingStartTime?: Date;
                        votingEndTime?: Date;
                    }[];
                    depositParams?: {
                        minDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        maxDepositPeriod?: {
                            seconds?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            nanos?: number;
                        };
                    };
                    votingParams?: {
                        votingPeriod?: {
                            seconds?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            nanos?: number;
                        };
                    };
                    tallyParams?: {
                        quorum?: Uint8Array;
                        threshold?: Uint8Array;
                        vetoThreshold?: Uint8Array;
                    };
                }): _99.GenesisState;
            };
        };
    }
    namespace group {
        const v1: {
            MsgClientImpl: typeof _279.MsgClientImpl;
            QueryClientImpl: typeof _263.QueryClientImpl;
            createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                groupInfo(request: _105.QueryGroupInfoRequest): Promise<_105.QueryGroupInfoResponse>;
                groupPolicyInfo(request: _105.QueryGroupPolicyInfoRequest): Promise<_105.QueryGroupPolicyInfoResponse>;
                groupMembers(request: _105.QueryGroupMembersRequest): Promise<_105.QueryGroupMembersResponse>;
                groupsByAdmin(request: _105.QueryGroupsByAdminRequest): Promise<_105.QueryGroupsByAdminResponse>;
                groupPoliciesByGroup(request: _105.QueryGroupPoliciesByGroupRequest): Promise<_105.QueryGroupPoliciesByGroupResponse>;
                groupPoliciesByAdmin(request: _105.QueryGroupPoliciesByAdminRequest): Promise<_105.QueryGroupPoliciesByAdminResponse>;
                proposal(request: _105.QueryProposalRequest): Promise<_105.QueryProposalResponse>;
                proposalsByGroupPolicy(request: _105.QueryProposalsByGroupPolicyRequest): Promise<_105.QueryProposalsByGroupPolicyResponse>;
                voteByProposalVoter(request: _105.QueryVoteByProposalVoterRequest): Promise<_105.QueryVoteByProposalVoterResponse>;
                votesByProposal(request: _105.QueryVotesByProposalRequest): Promise<_105.QueryVotesByProposalResponse>;
                votesByVoter(request: _105.QueryVotesByVoterRequest): Promise<_105.QueryVotesByVoterResponse>;
                groupsByMember(request: _105.QueryGroupsByMemberRequest): Promise<_105.QueryGroupsByMemberResponse>;
                tallyResult(request: _105.QueryTallyResultRequest): Promise<_105.QueryTallyResultResponse>;
            };
            LCDQueryClient: typeof _245.LCDQueryClient;
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    createGroup(value: _106.MsgCreateGroup): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    updateGroupMembers(value: _106.MsgUpdateGroupMembers): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    updateGroupAdmin(value: _106.MsgUpdateGroupAdmin): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    updateGroupMetadata(value: _106.MsgUpdateGroupMetadata): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    createGroupPolicy(value: _106.MsgCreateGroupPolicy): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    createGroupWithPolicy(value: _106.MsgCreateGroupWithPolicy): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    updateGroupPolicyAdmin(value: _106.MsgUpdateGroupPolicyAdmin): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    updateGroupPolicyDecisionPolicy(value: _106.MsgUpdateGroupPolicyDecisionPolicy): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    updateGroupPolicyMetadata(value: _106.MsgUpdateGroupPolicyMetadata): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    submitProposal(value: _106.MsgSubmitProposal): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    withdrawProposal(value: _106.MsgWithdrawProposal): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    vote(value: _106.MsgVote): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    exec(value: _106.MsgExec): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    leaveGroup(value: _106.MsgLeaveGroup): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    createGroup(value: _106.MsgCreateGroup): {
                        typeUrl: string;
                        value: _106.MsgCreateGroup;
                    };
                    updateGroupMembers(value: _106.MsgUpdateGroupMembers): {
                        typeUrl: string;
                        value: _106.MsgUpdateGroupMembers;
                    };
                    updateGroupAdmin(value: _106.MsgUpdateGroupAdmin): {
                        typeUrl: string;
                        value: _106.MsgUpdateGroupAdmin;
                    };
                    updateGroupMetadata(value: _106.MsgUpdateGroupMetadata): {
                        typeUrl: string;
                        value: _106.MsgUpdateGroupMetadata;
                    };
                    createGroupPolicy(value: _106.MsgCreateGroupPolicy): {
                        typeUrl: string;
                        value: _106.MsgCreateGroupPolicy;
                    };
                    createGroupWithPolicy(value: _106.MsgCreateGroupWithPolicy): {
                        typeUrl: string;
                        value: _106.MsgCreateGroupWithPolicy;
                    };
                    updateGroupPolicyAdmin(value: _106.MsgUpdateGroupPolicyAdmin): {
                        typeUrl: string;
                        value: _106.MsgUpdateGroupPolicyAdmin;
                    };
                    updateGroupPolicyDecisionPolicy(value: _106.MsgUpdateGroupPolicyDecisionPolicy): {
                        typeUrl: string;
                        value: _106.MsgUpdateGroupPolicyDecisionPolicy;
                    };
                    updateGroupPolicyMetadata(value: _106.MsgUpdateGroupPolicyMetadata): {
                        typeUrl: string;
                        value: _106.MsgUpdateGroupPolicyMetadata;
                    };
                    submitProposal(value: _106.MsgSubmitProposal): {
                        typeUrl: string;
                        value: _106.MsgSubmitProposal;
                    };
                    withdrawProposal(value: _106.MsgWithdrawProposal): {
                        typeUrl: string;
                        value: _106.MsgWithdrawProposal;
                    };
                    vote(value: _106.MsgVote): {
                        typeUrl: string;
                        value: _106.MsgVote;
                    };
                    exec(value: _106.MsgExec): {
                        typeUrl: string;
                        value: _106.MsgExec;
                    };
                    leaveGroup(value: _106.MsgLeaveGroup): {
                        typeUrl: string;
                        value: _106.MsgLeaveGroup;
                    };
                };
                fromPartial: {
                    createGroup(value: _106.MsgCreateGroup): {
                        typeUrl: string;
                        value: _106.MsgCreateGroup;
                    };
                    updateGroupMembers(value: _106.MsgUpdateGroupMembers): {
                        typeUrl: string;
                        value: _106.MsgUpdateGroupMembers;
                    };
                    updateGroupAdmin(value: _106.MsgUpdateGroupAdmin): {
                        typeUrl: string;
                        value: _106.MsgUpdateGroupAdmin;
                    };
                    updateGroupMetadata(value: _106.MsgUpdateGroupMetadata): {
                        typeUrl: string;
                        value: _106.MsgUpdateGroupMetadata;
                    };
                    createGroupPolicy(value: _106.MsgCreateGroupPolicy): {
                        typeUrl: string;
                        value: _106.MsgCreateGroupPolicy;
                    };
                    createGroupWithPolicy(value: _106.MsgCreateGroupWithPolicy): {
                        typeUrl: string;
                        value: _106.MsgCreateGroupWithPolicy;
                    };
                    updateGroupPolicyAdmin(value: _106.MsgUpdateGroupPolicyAdmin): {
                        typeUrl: string;
                        value: _106.MsgUpdateGroupPolicyAdmin;
                    };
                    updateGroupPolicyDecisionPolicy(value: _106.MsgUpdateGroupPolicyDecisionPolicy): {
                        typeUrl: string;
                        value: _106.MsgUpdateGroupPolicyDecisionPolicy;
                    };
                    updateGroupPolicyMetadata(value: _106.MsgUpdateGroupPolicyMetadata): {
                        typeUrl: string;
                        value: _106.MsgUpdateGroupPolicyMetadata;
                    };
                    submitProposal(value: _106.MsgSubmitProposal): {
                        typeUrl: string;
                        value: _106.MsgSubmitProposal;
                    };
                    withdrawProposal(value: _106.MsgWithdrawProposal): {
                        typeUrl: string;
                        value: _106.MsgWithdrawProposal;
                    };
                    vote(value: _106.MsgVote): {
                        typeUrl: string;
                        value: _106.MsgVote;
                    };
                    exec(value: _106.MsgExec): {
                        typeUrl: string;
                        value: _106.MsgExec;
                    };
                    leaveGroup(value: _106.MsgLeaveGroup): {
                        typeUrl: string;
                        value: _106.MsgLeaveGroup;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.group.v1.MsgCreateGroup": {
                    aminoType: string;
                    toAmino: ({ admin, members, metadata }: _106.MsgCreateGroup) => {
                        admin: string;
                        members: {
                            address: string;
                            weight: string;
                            metadata: string;
                            added_at: {
                                seconds: string;
                                nanos: number;
                            };
                        }[];
                        metadata: string;
                    };
                    fromAmino: ({ admin, members, metadata }: {
                        admin: string;
                        members: {
                            address: string;
                            weight: string;
                            metadata: string;
                            added_at: {
                                seconds: string;
                                nanos: number;
                            };
                        }[];
                        metadata: string;
                    }) => _106.MsgCreateGroup;
                };
                "/cosmos.group.v1.MsgUpdateGroupMembers": {
                    aminoType: string;
                    toAmino: ({ admin, groupId, memberUpdates }: _106.MsgUpdateGroupMembers) => {
                        admin: string;
                        group_id: string;
                        member_updates: {
                            address: string;
                            weight: string;
                            metadata: string;
                            added_at: {
                                seconds: string;
                                nanos: number;
                            };
                        }[];
                    };
                    fromAmino: ({ admin, group_id, member_updates }: {
                        admin: string;
                        group_id: string;
                        member_updates: {
                            address: string;
                            weight: string;
                            metadata: string;
                            added_at: {
                                seconds: string;
                                nanos: number;
                            };
                        }[];
                    }) => _106.MsgUpdateGroupMembers;
                };
                "/cosmos.group.v1.MsgUpdateGroupAdmin": {
                    aminoType: string;
                    toAmino: ({ admin, groupId, newAdmin }: _106.MsgUpdateGroupAdmin) => {
                        admin: string;
                        group_id: string;
                        new_admin: string;
                    };
                    fromAmino: ({ admin, group_id, new_admin }: {
                        admin: string;
                        group_id: string;
                        new_admin: string;
                    }) => _106.MsgUpdateGroupAdmin;
                };
                "/cosmos.group.v1.MsgUpdateGroupMetadata": {
                    aminoType: string;
                    toAmino: ({ admin, groupId, metadata }: _106.MsgUpdateGroupMetadata) => {
                        admin: string;
                        group_id: string;
                        metadata: string;
                    };
                    fromAmino: ({ admin, group_id, metadata }: {
                        admin: string;
                        group_id: string;
                        metadata: string;
                    }) => _106.MsgUpdateGroupMetadata;
                };
                "/cosmos.group.v1.MsgCreateGroupPolicy": {
                    aminoType: string;
                    toAmino: ({ admin, groupId, metadata, decisionPolicy }: _106.MsgCreateGroupPolicy) => {
                        admin: string;
                        group_id: string;
                        metadata: string;
                        decision_policy: {
                            type_url: string;
                            value: Uint8Array;
                        };
                    };
                    fromAmino: ({ admin, group_id, metadata, decision_policy }: {
                        admin: string;
                        group_id: string;
                        metadata: string;
                        decision_policy: {
                            type_url: string;
                            value: Uint8Array;
                        };
                    }) => _106.MsgCreateGroupPolicy;
                };
                "/cosmos.group.v1.MsgCreateGroupWithPolicy": {
                    aminoType: string;
                    toAmino: ({ admin, members, groupMetadata, groupPolicyMetadata, groupPolicyAsAdmin, decisionPolicy }: _106.MsgCreateGroupWithPolicy) => {
                        admin: string;
                        members: {
                            address: string;
                            weight: string;
                            metadata: string;
                            added_at: {
                                seconds: string;
                                nanos: number;
                            };
                        }[];
                        group_metadata: string;
                        group_policy_metadata: string;
                        group_policy_as_admin: boolean;
                        decision_policy: {
                            type_url: string;
                            value: Uint8Array;
                        };
                    };
                    fromAmino: ({ admin, members, group_metadata, group_policy_metadata, group_policy_as_admin, decision_policy }: {
                        admin: string;
                        members: {
                            address: string;
                            weight: string;
                            metadata: string;
                            added_at: {
                                seconds: string;
                                nanos: number;
                            };
                        }[];
                        group_metadata: string;
                        group_policy_metadata: string;
                        group_policy_as_admin: boolean;
                        decision_policy: {
                            type_url: string;
                            value: Uint8Array;
                        };
                    }) => _106.MsgCreateGroupWithPolicy;
                };
                "/cosmos.group.v1.MsgUpdateGroupPolicyAdmin": {
                    aminoType: string;
                    toAmino: ({ admin, address, newAdmin }: _106.MsgUpdateGroupPolicyAdmin) => {
                        admin: string;
                        address: string;
                        new_admin: string;
                    };
                    fromAmino: ({ admin, address, new_admin }: {
                        admin: string;
                        address: string;
                        new_admin: string;
                    }) => _106.MsgUpdateGroupPolicyAdmin;
                };
                "/cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy": {
                    aminoType: string;
                    toAmino: ({ admin, address, decisionPolicy }: _106.MsgUpdateGroupPolicyDecisionPolicy) => {
                        admin: string;
                        address: string;
                        decision_policy: {
                            type_url: string;
                            value: Uint8Array;
                        };
                    };
                    fromAmino: ({ admin, address, decision_policy }: {
                        admin: string;
                        address: string;
                        decision_policy: {
                            type_url: string;
                            value: Uint8Array;
                        };
                    }) => _106.MsgUpdateGroupPolicyDecisionPolicy;
                };
                "/cosmos.group.v1.MsgUpdateGroupPolicyMetadata": {
                    aminoType: string;
                    toAmino: ({ admin, address, metadata }: _106.MsgUpdateGroupPolicyMetadata) => {
                        admin: string;
                        address: string;
                        metadata: string;
                    };
                    fromAmino: ({ admin, address, metadata }: {
                        admin: string;
                        address: string;
                        metadata: string;
                    }) => _106.MsgUpdateGroupPolicyMetadata;
                };
                "/cosmos.group.v1.MsgSubmitProposal": {
                    aminoType: string;
                    toAmino: ({ address, proposers, metadata, messages, exec }: _106.MsgSubmitProposal) => {
                        address: string;
                        proposers: string[];
                        metadata: string;
                        messages: {
                            type_url: string;
                            value: Uint8Array;
                        }[];
                        exec: number;
                    };
                    fromAmino: ({ address, proposers, metadata, messages, exec }: {
                        address: string;
                        proposers: string[];
                        metadata: string;
                        messages: {
                            type_url: string;
                            value: Uint8Array;
                        }[];
                        exec: number;
                    }) => _106.MsgSubmitProposal;
                };
                "/cosmos.group.v1.MsgWithdrawProposal": {
                    aminoType: string;
                    toAmino: ({ proposalId, address }: _106.MsgWithdrawProposal) => {
                        proposal_id: string;
                        address: string;
                    };
                    fromAmino: ({ proposal_id, address }: {
                        proposal_id: string;
                        address: string;
                    }) => _106.MsgWithdrawProposal;
                };
                "/cosmos.group.v1.MsgVote": {
                    aminoType: string;
                    toAmino: ({ proposalId, voter, option, metadata, exec }: _106.MsgVote) => {
                        proposal_id: string;
                        voter: string;
                        option: number;
                        metadata: string;
                        exec: number;
                    };
                    fromAmino: ({ proposal_id, voter, option, metadata, exec }: {
                        proposal_id: string;
                        voter: string;
                        option: number;
                        metadata: string;
                        exec: number;
                    }) => _106.MsgVote;
                };
                "/cosmos.group.v1.MsgExec": {
                    aminoType: string;
                    toAmino: ({ proposalId, signer }: _106.MsgExec) => {
                        proposal_id: string;
                        signer: string;
                    };
                    fromAmino: ({ proposal_id, signer }: {
                        proposal_id: string;
                        signer: string;
                    }) => _106.MsgExec;
                };
                "/cosmos.group.v1.MsgLeaveGroup": {
                    aminoType: string;
                    toAmino: ({ address, groupId }: _106.MsgLeaveGroup) => {
                        address: string;
                        group_id: string;
                    };
                    fromAmino: ({ address, group_id }: {
                        address: string;
                        group_id: string;
                    }) => _106.MsgLeaveGroup;
                };
            };
            voteOptionFromJSON(object: any): _107.VoteOption;
            voteOptionToJSON(object: _107.VoteOption): string;
            proposalStatusFromJSON(object: any): _107.ProposalStatus;
            proposalStatusToJSON(object: _107.ProposalStatus): string;
            proposalResultFromJSON(object: any): _107.ProposalResult;
            proposalResultToJSON(object: _107.ProposalResult): string;
            proposalExecutorResultFromJSON(object: any): _107.ProposalExecutorResult;
            proposalExecutorResultToJSON(object: _107.ProposalExecutorResult): string;
            VoteOption: typeof _107.VoteOption;
            VoteOptionSDKType: typeof _107.VoteOptionSDKType;
            ProposalStatus: typeof _107.ProposalStatus;
            ProposalStatusSDKType: typeof _107.ProposalStatusSDKType;
            ProposalResult: typeof _107.ProposalResult;
            ProposalResultSDKType: typeof _107.ProposalResultSDKType;
            ProposalExecutorResult: typeof _107.ProposalExecutorResult;
            ProposalExecutorResultSDKType: typeof _107.ProposalExecutorResultSDKType;
            Member: {
                encode(message: _107.Member, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _107.Member;
                fromPartial(object: {
                    address?: string;
                    weight?: string;
                    metadata?: string;
                    addedAt?: Date;
                }): _107.Member;
            };
            Members: {
                encode(message: _107.Members, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _107.Members;
                fromPartial(object: {
                    members?: {
                        address?: string;
                        weight?: string;
                        metadata?: string;
                        addedAt?: Date;
                    }[];
                }): _107.Members;
            };
            ThresholdDecisionPolicy: {
                encode(message: _107.ThresholdDecisionPolicy, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _107.ThresholdDecisionPolicy;
                fromPartial(object: {
                    threshold?: string;
                    windows?: {
                        votingPeriod?: {
                            seconds?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            nanos?: number;
                        };
                        minExecutionPeriod?: {
                            seconds?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            nanos?: number;
                        };
                    };
                }): _107.ThresholdDecisionPolicy;
            };
            PercentageDecisionPolicy: {
                encode(message: _107.PercentageDecisionPolicy, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _107.PercentageDecisionPolicy;
                fromPartial(object: {
                    percentage?: string;
                    windows?: {
                        votingPeriod?: {
                            seconds?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            nanos?: number;
                        };
                        minExecutionPeriod?: {
                            seconds?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            nanos?: number;
                        };
                    };
                }): _107.PercentageDecisionPolicy;
            };
            DecisionPolicyWindows: {
                encode(message: _107.DecisionPolicyWindows, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _107.DecisionPolicyWindows;
                fromPartial(object: {
                    votingPeriod?: {
                        seconds?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        nanos?: number;
                    };
                    minExecutionPeriod?: {
                        seconds?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        nanos?: number;
                    };
                }): _107.DecisionPolicyWindows;
            };
            GroupInfo: {
                encode(message: _107.GroupInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _107.GroupInfo;
                fromPartial(object: {
                    id?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    admin?: string;
                    metadata?: string;
                    version?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    totalWeight?: string;
                    createdAt?: Date;
                }): _107.GroupInfo;
            };
            GroupMember: {
                encode(message: _107.GroupMember, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _107.GroupMember;
                fromPartial(object: {
                    groupId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    member?: {
                        address?: string;
                        weight?: string;
                        metadata?: string;
                        addedAt?: Date;
                    };
                }): _107.GroupMember;
            };
            GroupPolicyInfo: {
                encode(message: _107.GroupPolicyInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _107.GroupPolicyInfo;
                fromPartial(object: {
                    address?: string;
                    groupId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    admin?: string;
                    metadata?: string;
                    version?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    decisionPolicy?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                    createdAt?: Date;
                }): _107.GroupPolicyInfo;
            };
            Proposal: {
                encode(message: _107.Proposal, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _107.Proposal;
                fromPartial(object: {
                    id?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    address?: string;
                    metadata?: string;
                    proposers?: string[];
                    submitTime?: Date;
                    groupVersion?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    groupPolicyVersion?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    status?: _107.ProposalStatus;
                    result?: _107.ProposalResult;
                    finalTallyResult?: {
                        yesCount?: string;
                        abstainCount?: string;
                        noCount?: string;
                        noWithVetoCount?: string;
                    };
                    votingPeriodEnd?: Date;
                    executorResult?: _107.ProposalExecutorResult;
                    messages?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                }): _107.Proposal;
            };
            TallyResult: {
                encode(message: _107.TallyResult, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _107.TallyResult;
                fromPartial(object: {
                    yesCount?: string;
                    abstainCount?: string;
                    noCount?: string;
                    noWithVetoCount?: string;
                }): _107.TallyResult;
            };
            Vote: {
                encode(message: _107.Vote, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _107.Vote;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    voter?: string;
                    option?: _107.VoteOption;
                    metadata?: string;
                    submitTime?: Date;
                }): _107.Vote;
            };
            execFromJSON(object: any): _106.Exec;
            execToJSON(object: _106.Exec): string;
            Exec: typeof _106.Exec;
            ExecSDKType: typeof _106.ExecSDKType;
            MsgCreateGroup: {
                encode(message: _106.MsgCreateGroup, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.MsgCreateGroup;
                fromPartial(object: {
                    admin?: string;
                    members?: {
                        address?: string;
                        weight?: string;
                        metadata?: string;
                        addedAt?: Date;
                    }[];
                    metadata?: string;
                }): _106.MsgCreateGroup;
            };
            MsgCreateGroupResponse: {
                encode(message: _106.MsgCreateGroupResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.MsgCreateGroupResponse;
                fromPartial(object: {
                    groupId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }): _106.MsgCreateGroupResponse;
            };
            MsgUpdateGroupMembers: {
                encode(message: _106.MsgUpdateGroupMembers, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.MsgUpdateGroupMembers;
                fromPartial(object: {
                    admin?: string;
                    groupId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    memberUpdates?: {
                        address?: string;
                        weight?: string;
                        metadata?: string;
                        addedAt?: Date;
                    }[];
                }): _106.MsgUpdateGroupMembers;
            };
            MsgUpdateGroupMembersResponse: {
                encode(_: _106.MsgUpdateGroupMembersResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.MsgUpdateGroupMembersResponse;
                fromPartial(_: {}): _106.MsgUpdateGroupMembersResponse;
            };
            MsgUpdateGroupAdmin: {
                encode(message: _106.MsgUpdateGroupAdmin, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.MsgUpdateGroupAdmin;
                fromPartial(object: {
                    admin?: string;
                    groupId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    newAdmin?: string;
                }): _106.MsgUpdateGroupAdmin;
            };
            MsgUpdateGroupAdminResponse: {
                encode(_: _106.MsgUpdateGroupAdminResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.MsgUpdateGroupAdminResponse;
                fromPartial(_: {}): _106.MsgUpdateGroupAdminResponse;
            };
            MsgUpdateGroupMetadata: {
                encode(message: _106.MsgUpdateGroupMetadata, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.MsgUpdateGroupMetadata;
                fromPartial(object: {
                    admin?: string;
                    groupId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    metadata?: string;
                }): _106.MsgUpdateGroupMetadata;
            };
            MsgUpdateGroupMetadataResponse: {
                encode(_: _106.MsgUpdateGroupMetadataResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.MsgUpdateGroupMetadataResponse;
                fromPartial(_: {}): _106.MsgUpdateGroupMetadataResponse;
            };
            MsgCreateGroupPolicy: {
                encode(message: _106.MsgCreateGroupPolicy, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.MsgCreateGroupPolicy;
                fromPartial(object: {
                    admin?: string;
                    groupId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    metadata?: string;
                    decisionPolicy?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                }): _106.MsgCreateGroupPolicy;
            };
            MsgCreateGroupPolicyResponse: {
                encode(message: _106.MsgCreateGroupPolicyResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.MsgCreateGroupPolicyResponse;
                fromPartial(object: {
                    address?: string;
                }): _106.MsgCreateGroupPolicyResponse;
            };
            MsgUpdateGroupPolicyAdmin: {
                encode(message: _106.MsgUpdateGroupPolicyAdmin, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.MsgUpdateGroupPolicyAdmin;
                fromPartial(object: {
                    admin?: string;
                    address?: string;
                    newAdmin?: string;
                }): _106.MsgUpdateGroupPolicyAdmin;
            };
            MsgCreateGroupWithPolicy: {
                encode(message: _106.MsgCreateGroupWithPolicy, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.MsgCreateGroupWithPolicy;
                fromPartial(object: {
                    admin?: string;
                    members?: {
                        address?: string;
                        weight?: string;
                        metadata?: string;
                        addedAt?: Date;
                    }[];
                    groupMetadata?: string;
                    groupPolicyMetadata?: string;
                    groupPolicyAsAdmin?: boolean;
                    decisionPolicy?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                }): _106.MsgCreateGroupWithPolicy;
            };
            MsgCreateGroupWithPolicyResponse: {
                encode(message: _106.MsgCreateGroupWithPolicyResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.MsgCreateGroupWithPolicyResponse;
                fromPartial(object: {
                    groupId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    groupPolicyAddress?: string;
                }): _106.MsgCreateGroupWithPolicyResponse;
            };
            MsgUpdateGroupPolicyAdminResponse: {
                encode(_: _106.MsgUpdateGroupPolicyAdminResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.MsgUpdateGroupPolicyAdminResponse;
                fromPartial(_: {}): _106.MsgUpdateGroupPolicyAdminResponse;
            };
            MsgUpdateGroupPolicyDecisionPolicy: {
                encode(message: _106.MsgUpdateGroupPolicyDecisionPolicy, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.MsgUpdateGroupPolicyDecisionPolicy;
                fromPartial(object: {
                    admin?: string;
                    address?: string;
                    decisionPolicy?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                }): _106.MsgUpdateGroupPolicyDecisionPolicy;
            };
            MsgUpdateGroupPolicyDecisionPolicyResponse: {
                encode(_: _106.MsgUpdateGroupPolicyDecisionPolicyResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.MsgUpdateGroupPolicyDecisionPolicyResponse;
                fromPartial(_: {}): _106.MsgUpdateGroupPolicyDecisionPolicyResponse;
            };
            MsgUpdateGroupPolicyMetadata: {
                encode(message: _106.MsgUpdateGroupPolicyMetadata, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.MsgUpdateGroupPolicyMetadata;
                fromPartial(object: {
                    admin?: string;
                    address?: string;
                    metadata?: string;
                }): _106.MsgUpdateGroupPolicyMetadata;
            };
            MsgUpdateGroupPolicyMetadataResponse: {
                encode(_: _106.MsgUpdateGroupPolicyMetadataResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.MsgUpdateGroupPolicyMetadataResponse;
                fromPartial(_: {}): _106.MsgUpdateGroupPolicyMetadataResponse;
            };
            MsgSubmitProposal: {
                encode(message: _106.MsgSubmitProposal, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.MsgSubmitProposal;
                fromPartial(object: {
                    address?: string;
                    proposers?: string[];
                    metadata?: string;
                    messages?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                    exec?: _106.Exec;
                }): _106.MsgSubmitProposal;
            };
            MsgSubmitProposalResponse: {
                encode(message: _106.MsgSubmitProposalResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.MsgSubmitProposalResponse;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }): _106.MsgSubmitProposalResponse;
            };
            MsgWithdrawProposal: {
                encode(message: _106.MsgWithdrawProposal, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.MsgWithdrawProposal;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    address?: string;
                }): _106.MsgWithdrawProposal;
            };
            MsgWithdrawProposalResponse: {
                encode(_: _106.MsgWithdrawProposalResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.MsgWithdrawProposalResponse;
                fromPartial(_: {}): _106.MsgWithdrawProposalResponse;
            };
            MsgVote: {
                encode(message: _106.MsgVote, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.MsgVote;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    voter?: string;
                    option?: _107.VoteOption;
                    metadata?: string;
                    exec?: _106.Exec;
                }): _106.MsgVote;
            };
            MsgVoteResponse: {
                encode(_: _106.MsgVoteResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.MsgVoteResponse;
                fromPartial(_: {}): _106.MsgVoteResponse;
            };
            MsgExec: {
                encode(message: _106.MsgExec, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.MsgExec;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    signer?: string;
                }): _106.MsgExec;
            };
            MsgExecResponse: {
                encode(_: _106.MsgExecResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.MsgExecResponse;
                fromPartial(_: {}): _106.MsgExecResponse;
            };
            MsgLeaveGroup: {
                encode(message: _106.MsgLeaveGroup, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.MsgLeaveGroup;
                fromPartial(object: {
                    address?: string;
                    groupId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }): _106.MsgLeaveGroup;
            };
            MsgLeaveGroupResponse: {
                encode(_: _106.MsgLeaveGroupResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.MsgLeaveGroupResponse;
                fromPartial(_: {}): _106.MsgLeaveGroupResponse;
            };
            QueryGroupInfoRequest: {
                encode(message: _105.QueryGroupInfoRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _105.QueryGroupInfoRequest;
                fromPartial(object: {
                    groupId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }): _105.QueryGroupInfoRequest;
            };
            QueryGroupInfoResponse: {
                encode(message: _105.QueryGroupInfoResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _105.QueryGroupInfoResponse;
                fromPartial(object: {
                    info?: {
                        id?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        admin?: string;
                        metadata?: string;
                        version?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        totalWeight?: string;
                        createdAt?: Date;
                    };
                }): _105.QueryGroupInfoResponse;
            };
            QueryGroupPolicyInfoRequest: {
                encode(message: _105.QueryGroupPolicyInfoRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _105.QueryGroupPolicyInfoRequest;
                fromPartial(object: {
                    address?: string;
                }): _105.QueryGroupPolicyInfoRequest;
            };
            QueryGroupPolicyInfoResponse: {
                encode(message: _105.QueryGroupPolicyInfoResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _105.QueryGroupPolicyInfoResponse;
                fromPartial(object: {
                    info?: {
                        address?: string;
                        groupId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        admin?: string;
                        metadata?: string;
                        version?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        decisionPolicy?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        createdAt?: Date;
                    };
                }): _105.QueryGroupPolicyInfoResponse;
            };
            QueryGroupMembersRequest: {
                encode(message: _105.QueryGroupMembersRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _105.QueryGroupMembersRequest;
                fromPartial(object: {
                    groupId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _105.QueryGroupMembersRequest;
            };
            QueryGroupMembersResponse: {
                encode(message: _105.QueryGroupMembersResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _105.QueryGroupMembersResponse;
                fromPartial(object: {
                    members?: {
                        groupId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        member?: {
                            address?: string;
                            weight?: string;
                            metadata?: string;
                            addedAt?: Date;
                        };
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _105.QueryGroupMembersResponse;
            };
            QueryGroupsByAdminRequest: {
                encode(message: _105.QueryGroupsByAdminRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _105.QueryGroupsByAdminRequest;
                fromPartial(object: {
                    admin?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _105.QueryGroupsByAdminRequest;
            };
            QueryGroupsByAdminResponse: {
                encode(message: _105.QueryGroupsByAdminResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _105.QueryGroupsByAdminResponse;
                fromPartial(object: {
                    groups?: {
                        id?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        admin?: string;
                        metadata?: string;
                        version?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        totalWeight?: string;
                        createdAt?: Date;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _105.QueryGroupsByAdminResponse;
            };
            QueryGroupPoliciesByGroupRequest: {
                encode(message: _105.QueryGroupPoliciesByGroupRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _105.QueryGroupPoliciesByGroupRequest;
                fromPartial(object: {
                    groupId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _105.QueryGroupPoliciesByGroupRequest;
            };
            QueryGroupPoliciesByGroupResponse: {
                encode(message: _105.QueryGroupPoliciesByGroupResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _105.QueryGroupPoliciesByGroupResponse;
                fromPartial(object: {
                    groupPolicies?: {
                        address?: string;
                        groupId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        admin?: string;
                        metadata?: string;
                        version?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        decisionPolicy?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        createdAt?: Date;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _105.QueryGroupPoliciesByGroupResponse;
            };
            QueryGroupPoliciesByAdminRequest: {
                encode(message: _105.QueryGroupPoliciesByAdminRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _105.QueryGroupPoliciesByAdminRequest;
                fromPartial(object: {
                    admin?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _105.QueryGroupPoliciesByAdminRequest;
            };
            QueryGroupPoliciesByAdminResponse: {
                encode(message: _105.QueryGroupPoliciesByAdminResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _105.QueryGroupPoliciesByAdminResponse;
                fromPartial(object: {
                    groupPolicies?: {
                        address?: string;
                        groupId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        admin?: string;
                        metadata?: string;
                        version?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        decisionPolicy?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        createdAt?: Date;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _105.QueryGroupPoliciesByAdminResponse;
            };
            QueryProposalRequest: {
                encode(message: _105.QueryProposalRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _105.QueryProposalRequest;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }): _105.QueryProposalRequest;
            };
            QueryProposalResponse: {
                encode(message: _105.QueryProposalResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _105.QueryProposalResponse;
                fromPartial(object: {
                    proposal?: {
                        id?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        address?: string;
                        metadata?: string;
                        proposers?: string[];
                        submitTime?: Date;
                        groupVersion?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        groupPolicyVersion?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        status?: _107.ProposalStatus;
                        result?: _107.ProposalResult;
                        finalTallyResult?: {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        };
                        votingPeriodEnd?: Date;
                        executorResult?: _107.ProposalExecutorResult;
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                    };
                }): _105.QueryProposalResponse;
            };
            QueryProposalsByGroupPolicyRequest: {
                encode(message: _105.QueryProposalsByGroupPolicyRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _105.QueryProposalsByGroupPolicyRequest;
                fromPartial(object: {
                    address?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _105.QueryProposalsByGroupPolicyRequest;
            };
            QueryProposalsByGroupPolicyResponse: {
                encode(message: _105.QueryProposalsByGroupPolicyResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _105.QueryProposalsByGroupPolicyResponse;
                fromPartial(object: {
                    proposals?: {
                        id?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        address?: string;
                        metadata?: string;
                        proposers?: string[];
                        submitTime?: Date;
                        groupVersion?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        groupPolicyVersion?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        status?: _107.ProposalStatus;
                        result?: _107.ProposalResult;
                        finalTallyResult?: {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        };
                        votingPeriodEnd?: Date;
                        executorResult?: _107.ProposalExecutorResult;
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _105.QueryProposalsByGroupPolicyResponse;
            };
            QueryVoteByProposalVoterRequest: {
                encode(message: _105.QueryVoteByProposalVoterRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _105.QueryVoteByProposalVoterRequest;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    voter?: string;
                }): _105.QueryVoteByProposalVoterRequest;
            };
            QueryVoteByProposalVoterResponse: {
                encode(message: _105.QueryVoteByProposalVoterResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _105.QueryVoteByProposalVoterResponse;
                fromPartial(object: {
                    vote?: {
                        proposalId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        voter?: string;
                        option?: _107.VoteOption;
                        metadata?: string;
                        submitTime?: Date;
                    };
                }): _105.QueryVoteByProposalVoterResponse;
            };
            QueryVotesByProposalRequest: {
                encode(message: _105.QueryVotesByProposalRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _105.QueryVotesByProposalRequest;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _105.QueryVotesByProposalRequest;
            };
            QueryVotesByProposalResponse: {
                encode(message: _105.QueryVotesByProposalResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _105.QueryVotesByProposalResponse;
                fromPartial(object: {
                    votes?: {
                        proposalId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        voter?: string;
                        option?: _107.VoteOption;
                        metadata?: string;
                        submitTime?: Date;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _105.QueryVotesByProposalResponse;
            };
            QueryVotesByVoterRequest: {
                encode(message: _105.QueryVotesByVoterRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _105.QueryVotesByVoterRequest;
                fromPartial(object: {
                    voter?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _105.QueryVotesByVoterRequest;
            };
            QueryVotesByVoterResponse: {
                encode(message: _105.QueryVotesByVoterResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _105.QueryVotesByVoterResponse;
                fromPartial(object: {
                    votes?: {
                        proposalId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        voter?: string;
                        option?: _107.VoteOption;
                        metadata?: string;
                        submitTime?: Date;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _105.QueryVotesByVoterResponse;
            };
            QueryGroupsByMemberRequest: {
                encode(message: _105.QueryGroupsByMemberRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _105.QueryGroupsByMemberRequest;
                fromPartial(object: {
                    address?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _105.QueryGroupsByMemberRequest;
            };
            QueryGroupsByMemberResponse: {
                encode(message: _105.QueryGroupsByMemberResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _105.QueryGroupsByMemberResponse;
                fromPartial(object: {
                    groups?: {
                        id?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        admin?: string;
                        metadata?: string;
                        version?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        totalWeight?: string;
                        createdAt?: Date;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _105.QueryGroupsByMemberResponse;
            };
            QueryTallyResultRequest: {
                encode(message: _105.QueryTallyResultRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _105.QueryTallyResultRequest;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }): _105.QueryTallyResultRequest;
            };
            QueryTallyResultResponse: {
                encode(message: _105.QueryTallyResultResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _105.QueryTallyResultResponse;
                fromPartial(object: {
                    tally?: {
                        yesCount?: string;
                        abstainCount?: string;
                        noCount?: string;
                        noWithVetoCount?: string;
                    };
                }): _105.QueryTallyResultResponse;
            };
            GenesisState: {
                encode(message: _104.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _104.GenesisState;
                fromPartial(object: {
                    groupSeq?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    groups?: {
                        id?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        admin?: string;
                        metadata?: string;
                        version?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        totalWeight?: string;
                        createdAt?: Date;
                    }[];
                    groupMembers?: {
                        groupId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        member?: {
                            address?: string;
                            weight?: string;
                            metadata?: string;
                            addedAt?: Date;
                        };
                    }[];
                    groupPolicySeq?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    groupPolicies?: {
                        address?: string;
                        groupId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        admin?: string;
                        metadata?: string;
                        version?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        decisionPolicy?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        createdAt?: Date;
                    }[];
                    proposalSeq?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    proposals?: {
                        id?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        address?: string;
                        metadata?: string;
                        proposers?: string[];
                        submitTime?: Date;
                        groupVersion?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        groupPolicyVersion?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        status?: _107.ProposalStatus;
                        result?: _107.ProposalResult;
                        finalTallyResult?: {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        };
                        votingPeriodEnd?: Date;
                        executorResult?: _107.ProposalExecutorResult;
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                    }[];
                    votes?: {
                        proposalId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        voter?: string;
                        option?: _107.VoteOption;
                        metadata?: string;
                        submitTime?: Date;
                    }[];
                }): _104.GenesisState;
            };
            EventCreateGroup: {
                encode(message: _103.EventCreateGroup, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _103.EventCreateGroup;
                fromPartial(object: {
                    groupId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }): _103.EventCreateGroup;
            };
            EventUpdateGroup: {
                encode(message: _103.EventUpdateGroup, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _103.EventUpdateGroup;
                fromPartial(object: {
                    groupId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }): _103.EventUpdateGroup;
            };
            EventCreateGroupPolicy: {
                encode(message: _103.EventCreateGroupPolicy, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _103.EventCreateGroupPolicy;
                fromPartial(object: {
                    address?: string;
                }): _103.EventCreateGroupPolicy;
            };
            EventUpdateGroupPolicy: {
                encode(message: _103.EventUpdateGroupPolicy, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _103.EventUpdateGroupPolicy;
                fromPartial(object: {
                    address?: string;
                }): _103.EventUpdateGroupPolicy;
            };
            EventSubmitProposal: {
                encode(message: _103.EventSubmitProposal, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _103.EventSubmitProposal;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }): _103.EventSubmitProposal;
            };
            EventWithdrawProposal: {
                encode(message: _103.EventWithdrawProposal, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _103.EventWithdrawProposal;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }): _103.EventWithdrawProposal;
            };
            EventVote: {
                encode(message: _103.EventVote, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _103.EventVote;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }): _103.EventVote;
            };
            EventExec: {
                encode(message: _103.EventExec, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _103.EventExec;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    result?: _107.ProposalExecutorResult;
                }): _103.EventExec;
            };
            EventLeaveGroup: {
                encode(message: _103.EventLeaveGroup, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _103.EventLeaveGroup;
                fromPartial(object: {
                    groupId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    address?: string;
                }): _103.EventLeaveGroup;
            };
        };
    }
    namespace mint {
        const v1beta1: {
            QueryClientImpl: typeof _264.QueryClientImpl;
            createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                params(request?: _110.QueryParamsRequest): Promise<_110.QueryParamsResponse>;
                inflation(request?: _110.QueryInflationRequest): Promise<_110.QueryInflationResponse>;
                annualProvisions(request?: _110.QueryAnnualProvisionsRequest): Promise<_110.QueryAnnualProvisionsResponse>;
            };
            LCDQueryClient: typeof _246.LCDQueryClient;
            QueryParamsRequest: {
                encode(_: _110.QueryParamsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _110.QueryParamsRequest;
                fromPartial(_: {}): _110.QueryParamsRequest;
            };
            QueryParamsResponse: {
                encode(message: _110.QueryParamsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _110.QueryParamsResponse;
                fromPartial(object: {
                    params?: {
                        mintDenom?: string;
                        inflationRateChange?: string;
                        inflationMax?: string;
                        inflationMin?: string;
                        goalBonded?: string;
                        blocksPerYear?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _110.QueryParamsResponse;
            };
            QueryInflationRequest: {
                encode(_: _110.QueryInflationRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _110.QueryInflationRequest;
                fromPartial(_: {}): _110.QueryInflationRequest;
            };
            QueryInflationResponse: {
                encode(message: _110.QueryInflationResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _110.QueryInflationResponse;
                fromPartial(object: {
                    inflation?: Uint8Array;
                }): _110.QueryInflationResponse;
            };
            QueryAnnualProvisionsRequest: {
                encode(_: _110.QueryAnnualProvisionsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _110.QueryAnnualProvisionsRequest;
                fromPartial(_: {}): _110.QueryAnnualProvisionsRequest;
            };
            QueryAnnualProvisionsResponse: {
                encode(message: _110.QueryAnnualProvisionsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _110.QueryAnnualProvisionsResponse;
                fromPartial(object: {
                    annualProvisions?: Uint8Array;
                }): _110.QueryAnnualProvisionsResponse;
            };
            Minter: {
                encode(message: _109.Minter, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _109.Minter;
                fromPartial(object: {
                    inflation?: string;
                    annualProvisions?: string;
                }): _109.Minter;
            };
            Params: {
                encode(message: _109.Params, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _109.Params;
                fromPartial(object: {
                    mintDenom?: string;
                    inflationRateChange?: string;
                    inflationMax?: string;
                    inflationMin?: string;
                    goalBonded?: string;
                    blocksPerYear?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }): _109.Params;
            };
            GenesisState: {
                encode(message: _108.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _108.GenesisState;
                fromPartial(object: {
                    minter?: {
                        inflation?: string;
                        annualProvisions?: string;
                    };
                    params?: {
                        mintDenom?: string;
                        inflationRateChange?: string;
                        inflationMax?: string;
                        inflationMin?: string;
                        goalBonded?: string;
                        blocksPerYear?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _108.GenesisState;
            };
        };
    }
    namespace msg {
        const v1: {};
    }
    namespace nft {
        const v1beta1: {
            MsgClientImpl: typeof _280.MsgClientImpl;
            QueryClientImpl: typeof _265.QueryClientImpl;
            createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                balance(request: _115.QueryBalanceRequest): Promise<_115.QueryBalanceResponse>;
                owner(request: _115.QueryOwnerRequest): Promise<_115.QueryOwnerResponse>;
                supply(request: _115.QuerySupplyRequest): Promise<_115.QuerySupplyResponse>;
                nFTs(request: _115.QueryNFTsRequest): Promise<_115.QueryNFTsResponse>;
                nFT(request: _115.QueryNFTRequest): Promise<_115.QueryNFTResponse>;
                class(request: _115.QueryClassRequest): Promise<_115.QueryClassResponse>;
                classes(request?: _115.QueryClassesRequest): Promise<_115.QueryClassesResponse>;
            };
            LCDQueryClient: typeof _247.LCDQueryClient;
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    send(value: _116.MsgSend): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    send(value: _116.MsgSend): {
                        typeUrl: string;
                        value: _116.MsgSend;
                    };
                };
                fromPartial: {
                    send(value: _116.MsgSend): {
                        typeUrl: string;
                        value: _116.MsgSend;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.nft.v1beta1.MsgSend": {
                    aminoType: string;
                    toAmino: ({ classId, id, sender, receiver }: _116.MsgSend) => {
                        class_id: string;
                        id: string;
                        sender: string;
                        receiver: string;
                    };
                    fromAmino: ({ class_id, id, sender, receiver }: {
                        class_id: string;
                        id: string;
                        sender: string;
                        receiver: string;
                    }) => _116.MsgSend;
                };
            };
            MsgSend: {
                encode(message: _116.MsgSend, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _116.MsgSend;
                fromPartial(object: {
                    classId?: string;
                    id?: string;
                    sender?: string;
                    receiver?: string;
                }): _116.MsgSend;
            };
            MsgSendResponse: {
                encode(_: _116.MsgSendResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _116.MsgSendResponse;
                fromPartial(_: {}): _116.MsgSendResponse;
            };
            QueryBalanceRequest: {
                encode(message: _115.QueryBalanceRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _115.QueryBalanceRequest;
                fromPartial(object: {
                    classId?: string;
                    owner?: string;
                }): _115.QueryBalanceRequest;
            };
            QueryBalanceResponse: {
                encode(message: _115.QueryBalanceResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _115.QueryBalanceResponse;
                fromPartial(object: {
                    amount?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }): _115.QueryBalanceResponse;
            };
            QueryOwnerRequest: {
                encode(message: _115.QueryOwnerRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _115.QueryOwnerRequest;
                fromPartial(object: {
                    classId?: string;
                    id?: string;
                }): _115.QueryOwnerRequest;
            };
            QueryOwnerResponse: {
                encode(message: _115.QueryOwnerResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _115.QueryOwnerResponse;
                fromPartial(object: {
                    owner?: string;
                }): _115.QueryOwnerResponse;
            };
            QuerySupplyRequest: {
                encode(message: _115.QuerySupplyRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _115.QuerySupplyRequest;
                fromPartial(object: {
                    classId?: string;
                }): _115.QuerySupplyRequest;
            };
            QuerySupplyResponse: {
                encode(message: _115.QuerySupplyResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _115.QuerySupplyResponse;
                fromPartial(object: {
                    amount?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }): _115.QuerySupplyResponse;
            };
            QueryNFTsRequest: {
                encode(message: _115.QueryNFTsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _115.QueryNFTsRequest;
                fromPartial(object: {
                    classId?: string;
                    owner?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _115.QueryNFTsRequest;
            };
            QueryNFTsResponse: {
                encode(message: _115.QueryNFTsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _115.QueryNFTsResponse;
                fromPartial(object: {
                    nfts?: {
                        classId?: string;
                        id?: string;
                        uri?: string;
                        uriHash?: string;
                        data?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _115.QueryNFTsResponse;
            };
            QueryNFTRequest: {
                encode(message: _115.QueryNFTRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _115.QueryNFTRequest;
                fromPartial(object: {
                    classId?: string;
                    id?: string;
                }): _115.QueryNFTRequest;
            };
            QueryNFTResponse: {
                encode(message: _115.QueryNFTResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _115.QueryNFTResponse;
                fromPartial(object: {
                    nft?: {
                        classId?: string;
                        id?: string;
                        uri?: string;
                        uriHash?: string;
                        data?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    };
                }): _115.QueryNFTResponse;
            };
            QueryClassRequest: {
                encode(message: _115.QueryClassRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _115.QueryClassRequest;
                fromPartial(object: {
                    classId?: string;
                }): _115.QueryClassRequest;
            };
            QueryClassResponse: {
                encode(message: _115.QueryClassResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _115.QueryClassResponse;
                fromPartial(object: {
                    class?: {
                        id?: string;
                        name?: string;
                        symbol?: string;
                        description?: string;
                        uri?: string;
                        uriHash?: string;
                        data?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    };
                }): _115.QueryClassResponse;
            };
            QueryClassesRequest: {
                encode(message: _115.QueryClassesRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _115.QueryClassesRequest;
                fromPartial(object: {
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _115.QueryClassesRequest;
            };
            QueryClassesResponse: {
                encode(message: _115.QueryClassesResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _115.QueryClassesResponse;
                fromPartial(object: {
                    classes?: {
                        id?: string;
                        name?: string;
                        symbol?: string;
                        description?: string;
                        uri?: string;
                        uriHash?: string;
                        data?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _115.QueryClassesResponse;
            };
            Class: {
                encode(message: _114.Class, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _114.Class;
                fromPartial(object: {
                    id?: string;
                    name?: string;
                    symbol?: string;
                    description?: string;
                    uri?: string;
                    uriHash?: string;
                    data?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                }): _114.Class;
            };
            NFT: {
                encode(message: _114.NFT, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _114.NFT;
                fromPartial(object: {
                    classId?: string;
                    id?: string;
                    uri?: string;
                    uriHash?: string;
                    data?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                }): _114.NFT;
            };
            GenesisState: {
                encode(message: _113.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _113.GenesisState;
                fromPartial(object: {
                    classes?: {
                        id?: string;
                        name?: string;
                        symbol?: string;
                        description?: string;
                        uri?: string;
                        uriHash?: string;
                        data?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }[];
                    entries?: {
                        owner?: string;
                        nfts?: {
                            classId?: string;
                            id?: string;
                            uri?: string;
                            uriHash?: string;
                            data?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                        }[];
                    }[];
                }): _113.GenesisState;
            };
            Entry: {
                encode(message: _113.Entry, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _113.Entry;
                fromPartial(object: {
                    owner?: string;
                    nfts?: {
                        classId?: string;
                        id?: string;
                        uri?: string;
                        uriHash?: string;
                        data?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }[];
                }): _113.Entry;
            };
            EventSend: {
                encode(message: _112.EventSend, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _112.EventSend;
                fromPartial(object: {
                    classId?: string;
                    id?: string;
                    sender?: string;
                    receiver?: string;
                }): _112.EventSend;
            };
            EventMint: {
                encode(message: _112.EventMint, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _112.EventMint;
                fromPartial(object: {
                    classId?: string;
                    id?: string;
                    owner?: string;
                }): _112.EventMint;
            };
            EventBurn: {
                encode(message: _112.EventBurn, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _112.EventBurn;
                fromPartial(object: {
                    classId?: string;
                    id?: string;
                    owner?: string;
                }): _112.EventBurn;
            };
        };
    }
    namespace orm {
        const v1: {
            TableDescriptor: {
                encode(message: _117.TableDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _117.TableDescriptor;
                fromPartial(object: {
                    primaryKey?: {
                        fields?: string;
                        autoIncrement?: boolean;
                    };
                    index?: {
                        fields?: string;
                        id?: number;
                        unique?: boolean;
                    }[];
                    id?: number;
                }): _117.TableDescriptor;
            };
            PrimaryKeyDescriptor: {
                encode(message: _117.PrimaryKeyDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _117.PrimaryKeyDescriptor;
                fromPartial(object: {
                    fields?: string;
                    autoIncrement?: boolean;
                }): _117.PrimaryKeyDescriptor;
            };
            SecondaryIndexDescriptor: {
                encode(message: _117.SecondaryIndexDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _117.SecondaryIndexDescriptor;
                fromPartial(object: {
                    fields?: string;
                    id?: number;
                    unique?: boolean;
                }): _117.SecondaryIndexDescriptor;
            };
            SingletonDescriptor: {
                encode(message: _117.SingletonDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _117.SingletonDescriptor;
                fromPartial(object: {
                    id?: number;
                }): _117.SingletonDescriptor;
            };
        };
        const v1alpha1: {
            storageTypeFromJSON(object: any): _118.StorageType;
            storageTypeToJSON(object: _118.StorageType): string;
            StorageType: typeof _118.StorageType;
            StorageTypeSDKType: typeof _118.StorageTypeSDKType;
            ModuleSchemaDescriptor: {
                encode(message: _118.ModuleSchemaDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _118.ModuleSchemaDescriptor;
                fromPartial(object: {
                    schemaFile?: {
                        id?: number;
                        protoFileName?: string;
                        storageType?: _118.StorageType;
                    }[];
                    prefix?: Uint8Array;
                }): _118.ModuleSchemaDescriptor;
            };
            ModuleSchemaDescriptor_FileEntry: {
                encode(message: _118.ModuleSchemaDescriptor_FileEntry, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _118.ModuleSchemaDescriptor_FileEntry;
                fromPartial(object: {
                    id?: number;
                    protoFileName?: string;
                    storageType?: _118.StorageType;
                }): _118.ModuleSchemaDescriptor_FileEntry;
            };
        };
    }
    namespace params {
        const v1beta1: {
            QueryClientImpl: typeof _266.QueryClientImpl;
            createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                params(request: _120.QueryParamsRequest): Promise<_120.QueryParamsResponse>;
                subspaces(request?: _120.QuerySubspacesRequest): Promise<_120.QuerySubspacesResponse>;
            };
            LCDQueryClient: typeof _248.LCDQueryClient;
            QueryParamsRequest: {
                encode(message: _120.QueryParamsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _120.QueryParamsRequest;
                fromPartial(object: {
                    subspace?: string;
                    key?: string;
                }): _120.QueryParamsRequest;
            };
            QueryParamsResponse: {
                encode(message: _120.QueryParamsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _120.QueryParamsResponse;
                fromPartial(object: {
                    param?: {
                        subspace?: string;
                        key?: string;
                        value?: string;
                    };
                }): _120.QueryParamsResponse;
            };
            QuerySubspacesRequest: {
                encode(_: _120.QuerySubspacesRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _120.QuerySubspacesRequest;
                fromPartial(_: {}): _120.QuerySubspacesRequest;
            };
            QuerySubspacesResponse: {
                encode(message: _120.QuerySubspacesResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _120.QuerySubspacesResponse;
                fromPartial(object: {
                    subspaces?: {
                        subspace?: string;
                        keys?: string[];
                    }[];
                }): _120.QuerySubspacesResponse;
            };
            Subspace: {
                encode(message: _120.Subspace, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _120.Subspace;
                fromPartial(object: {
                    subspace?: string;
                    keys?: string[];
                }): _120.Subspace;
            };
            ParameterChangeProposal: {
                encode(message: _119.ParameterChangeProposal, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _119.ParameterChangeProposal;
                fromPartial(object: {
                    title?: string;
                    description?: string;
                    changes?: {
                        subspace?: string;
                        key?: string;
                        value?: string;
                    }[];
                }): _119.ParameterChangeProposal;
            };
            ParamChange: {
                encode(message: _119.ParamChange, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _119.ParamChange;
                fromPartial(object: {
                    subspace?: string;
                    key?: string;
                    value?: string;
                }): _119.ParamChange;
            };
        };
    }
    namespace slashing {
        const v1beta1: {
            MsgClientImpl: typeof _281.MsgClientImpl;
            QueryClientImpl: typeof _267.QueryClientImpl;
            createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                params(request?: _122.QueryParamsRequest): Promise<_122.QueryParamsResponse>;
                signingInfo(request: _122.QuerySigningInfoRequest): Promise<_122.QuerySigningInfoResponse>;
                signingInfos(request?: _122.QuerySigningInfosRequest): Promise<_122.QuerySigningInfosResponse>;
            };
            LCDQueryClient: typeof _249.LCDQueryClient;
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    unjail(value: _124.MsgUnjail): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    unjail(value: _124.MsgUnjail): {
                        typeUrl: string;
                        value: _124.MsgUnjail;
                    };
                };
                fromPartial: {
                    unjail(value: _124.MsgUnjail): {
                        typeUrl: string;
                        value: _124.MsgUnjail;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.slashing.v1beta1.MsgUnjail": {
                    aminoType: string;
                    toAmino: ({ validatorAddr }: _124.MsgUnjail) => {
                        validator_addr: string;
                    };
                    fromAmino: ({ validator_addr }: {
                        validator_addr: string;
                    }) => _124.MsgUnjail;
                };
            };
            MsgUnjail: {
                encode(message: _124.MsgUnjail, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _124.MsgUnjail;
                fromPartial(object: {
                    validatorAddr?: string;
                }): _124.MsgUnjail;
            };
            MsgUnjailResponse: {
                encode(_: _124.MsgUnjailResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _124.MsgUnjailResponse;
                fromPartial(_: {}): _124.MsgUnjailResponse;
            };
            ValidatorSigningInfo: {
                encode(message: _123.ValidatorSigningInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _123.ValidatorSigningInfo;
                fromPartial(object: {
                    address?: string;
                    startHeight?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    indexOffset?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    jailedUntil?: Date;
                    tombstoned?: boolean;
                    missedBlocksCounter?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }): _123.ValidatorSigningInfo;
            };
            Params: {
                encode(message: _123.Params, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _123.Params;
                fromPartial(object: {
                    signedBlocksWindow?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    minSignedPerWindow?: Uint8Array;
                    downtimeJailDuration?: {
                        seconds?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        nanos?: number;
                    };
                    slashFractionDoubleSign?: Uint8Array;
                    slashFractionDowntime?: Uint8Array;
                }): _123.Params;
            };
            QueryParamsRequest: {
                encode(_: _122.QueryParamsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _122.QueryParamsRequest;
                fromPartial(_: {}): _122.QueryParamsRequest;
            };
            QueryParamsResponse: {
                encode(message: _122.QueryParamsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _122.QueryParamsResponse;
                fromPartial(object: {
                    params?: {
                        signedBlocksWindow?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        minSignedPerWindow?: Uint8Array;
                        downtimeJailDuration?: {
                            seconds?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            nanos?: number;
                        };
                        slashFractionDoubleSign?: Uint8Array;
                        slashFractionDowntime?: Uint8Array;
                    };
                }): _122.QueryParamsResponse;
            };
            QuerySigningInfoRequest: {
                encode(message: _122.QuerySigningInfoRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _122.QuerySigningInfoRequest;
                fromPartial(object: {
                    consAddress?: string;
                }): _122.QuerySigningInfoRequest;
            };
            QuerySigningInfoResponse: {
                encode(message: _122.QuerySigningInfoResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _122.QuerySigningInfoResponse;
                fromPartial(object: {
                    valSigningInfo?: {
                        address?: string;
                        startHeight?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        indexOffset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        jailedUntil?: Date;
                        tombstoned?: boolean;
                        missedBlocksCounter?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _122.QuerySigningInfoResponse;
            };
            QuerySigningInfosRequest: {
                encode(message: _122.QuerySigningInfosRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _122.QuerySigningInfosRequest;
                fromPartial(object: {
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _122.QuerySigningInfosRequest;
            };
            QuerySigningInfosResponse: {
                encode(message: _122.QuerySigningInfosResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _122.QuerySigningInfosResponse;
                fromPartial(object: {
                    info?: {
                        address?: string;
                        startHeight?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        indexOffset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        jailedUntil?: Date;
                        tombstoned?: boolean;
                        missedBlocksCounter?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _122.QuerySigningInfosResponse;
            };
            GenesisState: {
                encode(message: _121.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _121.GenesisState;
                fromPartial(object: {
                    params?: {
                        signedBlocksWindow?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        minSignedPerWindow?: Uint8Array;
                        downtimeJailDuration?: {
                            seconds?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            nanos?: number;
                        };
                        slashFractionDoubleSign?: Uint8Array;
                        slashFractionDowntime?: Uint8Array;
                    };
                    signingInfos?: {
                        address?: string;
                        validatorSigningInfo?: {
                            address?: string;
                            startHeight?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            indexOffset?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            jailedUntil?: Date;
                            tombstoned?: boolean;
                            missedBlocksCounter?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                        };
                    }[];
                    missedBlocks?: {
                        address?: string;
                        missedBlocks?: {
                            index?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            missed?: boolean;
                        }[];
                    }[];
                }): _121.GenesisState;
            };
            SigningInfo: {
                encode(message: _121.SigningInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _121.SigningInfo;
                fromPartial(object: {
                    address?: string;
                    validatorSigningInfo?: {
                        address?: string;
                        startHeight?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        indexOffset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        jailedUntil?: Date;
                        tombstoned?: boolean;
                        missedBlocksCounter?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _121.SigningInfo;
            };
            ValidatorMissedBlocks: {
                encode(message: _121.ValidatorMissedBlocks, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _121.ValidatorMissedBlocks;
                fromPartial(object: {
                    address?: string;
                    missedBlocks?: {
                        index?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        missed?: boolean;
                    }[];
                }): _121.ValidatorMissedBlocks;
            };
            MissedBlock: {
                encode(message: _121.MissedBlock, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _121.MissedBlock;
                fromPartial(object: {
                    index?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    missed?: boolean;
                }): _121.MissedBlock;
            };
        };
    }
    namespace staking {
        const v1beta1: {
            MsgClientImpl: typeof _282.MsgClientImpl;
            QueryClientImpl: typeof _268.QueryClientImpl;
            createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                validators(request: _127.QueryValidatorsRequest): Promise<_127.QueryValidatorsResponse>;
                validator(request: _127.QueryValidatorRequest): Promise<_127.QueryValidatorResponse>;
                validatorDelegations(request: _127.QueryValidatorDelegationsRequest): Promise<_127.QueryValidatorDelegationsResponse>;
                validatorUnbondingDelegations(request: _127.QueryValidatorUnbondingDelegationsRequest): Promise<_127.QueryValidatorUnbondingDelegationsResponse>;
                delegation(request: _127.QueryDelegationRequest): Promise<_127.QueryDelegationResponse>;
                unbondingDelegation(request: _127.QueryUnbondingDelegationRequest): Promise<_127.QueryUnbondingDelegationResponse>;
                delegatorDelegations(request: _127.QueryDelegatorDelegationsRequest): Promise<_127.QueryDelegatorDelegationsResponse>;
                delegatorUnbondingDelegations(request: _127.QueryDelegatorUnbondingDelegationsRequest): Promise<_127.QueryDelegatorUnbondingDelegationsResponse>;
                redelegations(request: _127.QueryRedelegationsRequest): Promise<_127.QueryRedelegationsResponse>;
                delegatorValidators(request: _127.QueryDelegatorValidatorsRequest): Promise<_127.QueryDelegatorValidatorsResponse>;
                delegatorValidator(request: _127.QueryDelegatorValidatorRequest): Promise<_127.QueryDelegatorValidatorResponse>;
                historicalInfo(request: _127.QueryHistoricalInfoRequest): Promise<_127.QueryHistoricalInfoResponse>;
                pool(request?: _127.QueryPoolRequest): Promise<_127.QueryPoolResponse>;
                params(request?: _127.QueryParamsRequest): Promise<_127.QueryParamsResponse>;
            };
            LCDQueryClient: typeof _250.LCDQueryClient;
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    createValidator(value: _129.MsgCreateValidator): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    editValidator(value: _129.MsgEditValidator): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    delegate(value: _129.MsgDelegate): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    beginRedelegate(value: _129.MsgBeginRedelegate): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    undelegate(value: _129.MsgUndelegate): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    createValidator(value: _129.MsgCreateValidator): {
                        typeUrl: string;
                        value: _129.MsgCreateValidator;
                    };
                    editValidator(value: _129.MsgEditValidator): {
                        typeUrl: string;
                        value: _129.MsgEditValidator;
                    };
                    delegate(value: _129.MsgDelegate): {
                        typeUrl: string;
                        value: _129.MsgDelegate;
                    };
                    beginRedelegate(value: _129.MsgBeginRedelegate): {
                        typeUrl: string;
                        value: _129.MsgBeginRedelegate;
                    };
                    undelegate(value: _129.MsgUndelegate): {
                        typeUrl: string;
                        value: _129.MsgUndelegate;
                    };
                };
                fromPartial: {
                    createValidator(value: _129.MsgCreateValidator): {
                        typeUrl: string;
                        value: _129.MsgCreateValidator;
                    };
                    editValidator(value: _129.MsgEditValidator): {
                        typeUrl: string;
                        value: _129.MsgEditValidator;
                    };
                    delegate(value: _129.MsgDelegate): {
                        typeUrl: string;
                        value: _129.MsgDelegate;
                    };
                    beginRedelegate(value: _129.MsgBeginRedelegate): {
                        typeUrl: string;
                        value: _129.MsgBeginRedelegate;
                    };
                    undelegate(value: _129.MsgUndelegate): {
                        typeUrl: string;
                        value: _129.MsgUndelegate;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.staking.v1beta1.MsgCreateValidator": {
                    aminoType: string;
                    toAmino: ({ description, commission, minSelfDelegation, delegatorAddress, validatorAddress, pubkey, value }: _129.MsgCreateValidator) => {
                        description: {
                            moniker: string;
                            identity: string;
                            website: string;
                            security_contact: string;
                            details: string;
                        };
                        commission: {
                            rate: string;
                            max_rate: string;
                            max_change_rate: string;
                        };
                        min_self_delegation: string;
                        delegator_address: string;
                        validator_address: string;
                        pubkey: {
                            type_url: string;
                            value: Uint8Array;
                        };
                        value: {
                            denom: string;
                            amount: string;
                        };
                    };
                    fromAmino: ({ description, commission, min_self_delegation, delegator_address, validator_address, pubkey, value }: {
                        description: {
                            moniker: string;
                            identity: string;
                            website: string;
                            security_contact: string;
                            details: string;
                        };
                        commission: {
                            rate: string;
                            max_rate: string;
                            max_change_rate: string;
                        };
                        min_self_delegation: string;
                        delegator_address: string;
                        validator_address: string;
                        pubkey: {
                            type_url: string;
                            value: Uint8Array;
                        };
                        value: {
                            denom: string;
                            amount: string;
                        };
                    }) => _129.MsgCreateValidator;
                };
                "/cosmos.staking.v1beta1.MsgEditValidator": {
                    aminoType: string;
                    toAmino: ({ description, validatorAddress, commissionRate, minSelfDelegation }: _129.MsgEditValidator) => {
                        description: {
                            moniker: string;
                            identity: string;
                            website: string;
                            security_contact: string;
                            details: string;
                        };
                        validator_address: string;
                        commission_rate: string;
                        min_self_delegation: string;
                    };
                    fromAmino: ({ description, validator_address, commission_rate, min_self_delegation }: {
                        description: {
                            moniker: string;
                            identity: string;
                            website: string;
                            security_contact: string;
                            details: string;
                        };
                        validator_address: string;
                        commission_rate: string;
                        min_self_delegation: string;
                    }) => _129.MsgEditValidator;
                };
                "/cosmos.staking.v1beta1.MsgDelegate": {
                    aminoType: string;
                    toAmino: ({ delegatorAddress, validatorAddress, amount }: _129.MsgDelegate) => {
                        delegator_address: string;
                        validator_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        };
                    };
                    fromAmino: ({ delegator_address, validator_address, amount }: {
                        delegator_address: string;
                        validator_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        };
                    }) => _129.MsgDelegate;
                };
                "/cosmos.staking.v1beta1.MsgBeginRedelegate": {
                    aminoType: string;
                    toAmino: ({ delegatorAddress, validatorSrcAddress, validatorDstAddress, amount }: _129.MsgBeginRedelegate) => {
                        delegator_address: string;
                        validator_src_address: string;
                        validator_dst_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        };
                    };
                    fromAmino: ({ delegator_address, validator_src_address, validator_dst_address, amount }: {
                        delegator_address: string;
                        validator_src_address: string;
                        validator_dst_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        };
                    }) => _129.MsgBeginRedelegate;
                };
                "/cosmos.staking.v1beta1.MsgUndelegate": {
                    aminoType: string;
                    toAmino: ({ delegatorAddress, validatorAddress, amount }: _129.MsgUndelegate) => {
                        delegator_address: string;
                        validator_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        };
                    };
                    fromAmino: ({ delegator_address, validator_address, amount }: {
                        delegator_address: string;
                        validator_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        };
                    }) => _129.MsgUndelegate;
                };
            };
            MsgCreateValidator: {
                encode(message: _129.MsgCreateValidator, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _129.MsgCreateValidator;
                fromPartial(object: {
                    description?: {
                        moniker?: string;
                        identity?: string;
                        website?: string;
                        securityContact?: string;
                        details?: string;
                    };
                    commission?: {
                        rate?: string;
                        maxRate?: string;
                        maxChangeRate?: string;
                    };
                    minSelfDelegation?: string;
                    delegatorAddress?: string;
                    validatorAddress?: string;
                    pubkey?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                    value?: {
                        denom?: string;
                        amount?: string;
                    };
                }): _129.MsgCreateValidator;
            };
            MsgCreateValidatorResponse: {
                encode(_: _129.MsgCreateValidatorResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _129.MsgCreateValidatorResponse;
                fromPartial(_: {}): _129.MsgCreateValidatorResponse;
            };
            MsgEditValidator: {
                encode(message: _129.MsgEditValidator, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _129.MsgEditValidator;
                fromPartial(object: {
                    description?: {
                        moniker?: string;
                        identity?: string;
                        website?: string;
                        securityContact?: string;
                        details?: string;
                    };
                    validatorAddress?: string;
                    commissionRate?: string;
                    minSelfDelegation?: string;
                }): _129.MsgEditValidator;
            };
            MsgEditValidatorResponse: {
                encode(_: _129.MsgEditValidatorResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _129.MsgEditValidatorResponse;
                fromPartial(_: {}): _129.MsgEditValidatorResponse;
            };
            MsgDelegate: {
                encode(message: _129.MsgDelegate, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _129.MsgDelegate;
                fromPartial(object: {
                    delegatorAddress?: string;
                    validatorAddress?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    };
                }): _129.MsgDelegate;
            };
            MsgDelegateResponse: {
                encode(_: _129.MsgDelegateResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _129.MsgDelegateResponse;
                fromPartial(_: {}): _129.MsgDelegateResponse;
            };
            MsgBeginRedelegate: {
                encode(message: _129.MsgBeginRedelegate, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _129.MsgBeginRedelegate;
                fromPartial(object: {
                    delegatorAddress?: string;
                    validatorSrcAddress?: string;
                    validatorDstAddress?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    };
                }): _129.MsgBeginRedelegate;
            };
            MsgBeginRedelegateResponse: {
                encode(message: _129.MsgBeginRedelegateResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _129.MsgBeginRedelegateResponse;
                fromPartial(object: {
                    completionTime?: Date;
                }): _129.MsgBeginRedelegateResponse;
            };
            MsgUndelegate: {
                encode(message: _129.MsgUndelegate, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _129.MsgUndelegate;
                fromPartial(object: {
                    delegatorAddress?: string;
                    validatorAddress?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    };
                }): _129.MsgUndelegate;
            };
            MsgUndelegateResponse: {
                encode(message: _129.MsgUndelegateResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _129.MsgUndelegateResponse;
                fromPartial(object: {
                    completionTime?: Date;
                }): _129.MsgUndelegateResponse;
            };
            bondStatusFromJSON(object: any): _128.BondStatus;
            bondStatusToJSON(object: _128.BondStatus): string;
            BondStatus: typeof _128.BondStatus;
            BondStatusSDKType: typeof _128.BondStatusSDKType;
            HistoricalInfo: {
                encode(message: _128.HistoricalInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _128.HistoricalInfo;
                fromPartial(object: {
                    header?: {
                        version?: {
                            block?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            app?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                        };
                        chainId?: string;
                        height?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        time?: Date;
                        lastBlockId?: {
                            hash?: Uint8Array;
                            partSetHeader?: {
                                total?: number;
                                hash?: Uint8Array;
                            };
                        };
                        lastCommitHash?: Uint8Array;
                        dataHash?: Uint8Array;
                        validatorsHash?: Uint8Array;
                        nextValidatorsHash?: Uint8Array;
                        consensusHash?: Uint8Array;
                        appHash?: Uint8Array;
                        lastResultsHash?: Uint8Array;
                        evidenceHash?: Uint8Array;
                        proposerAddress?: Uint8Array;
                    };
                    valset?: {
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        jailed?: boolean;
                        status?: _128.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        };
                        unbondingHeight?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        };
                        minSelfDelegation?: string;
                    }[];
                }): _128.HistoricalInfo;
            };
            CommissionRates: {
                encode(message: _128.CommissionRates, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _128.CommissionRates;
                fromPartial(object: {
                    rate?: string;
                    maxRate?: string;
                    maxChangeRate?: string;
                }): _128.CommissionRates;
            };
            Commission: {
                encode(message: _128.Commission, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _128.Commission;
                fromPartial(object: {
                    commissionRates?: {
                        rate?: string;
                        maxRate?: string;
                        maxChangeRate?: string;
                    };
                    updateTime?: Date;
                }): _128.Commission;
            };
            Description: {
                encode(message: _128.Description, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _128.Description;
                fromPartial(object: {
                    moniker?: string;
                    identity?: string;
                    website?: string;
                    securityContact?: string;
                    details?: string;
                }): _128.Description;
            };
            Validator: {
                encode(message: _128.Validator, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _128.Validator;
                fromPartial(object: {
                    operatorAddress?: string;
                    consensusPubkey?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                    jailed?: boolean;
                    status?: _128.BondStatus;
                    tokens?: string;
                    delegatorShares?: string;
                    description?: {
                        moniker?: string;
                        identity?: string;
                        website?: string;
                        securityContact?: string;
                        details?: string;
                    };
                    unbondingHeight?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    unbondingTime?: Date;
                    commission?: {
                        commissionRates?: {
                            rate?: string;
                            maxRate?: string;
                            maxChangeRate?: string;
                        };
                        updateTime?: Date;
                    };
                    minSelfDelegation?: string;
                }): _128.Validator;
            };
            ValAddresses: {
                encode(message: _128.ValAddresses, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _128.ValAddresses;
                fromPartial(object: {
                    addresses?: string[];
                }): _128.ValAddresses;
            };
            DVPair: {
                encode(message: _128.DVPair, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _128.DVPair;
                fromPartial(object: {
                    delegatorAddress?: string;
                    validatorAddress?: string;
                }): _128.DVPair;
            };
            DVPairs: {
                encode(message: _128.DVPairs, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _128.DVPairs;
                fromPartial(object: {
                    pairs?: {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                    }[];
                }): _128.DVPairs;
            };
            DVVTriplet: {
                encode(message: _128.DVVTriplet, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _128.DVVTriplet;
                fromPartial(object: {
                    delegatorAddress?: string;
                    validatorSrcAddress?: string;
                    validatorDstAddress?: string;
                }): _128.DVVTriplet;
            };
            DVVTriplets: {
                encode(message: _128.DVVTriplets, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _128.DVVTriplets;
                fromPartial(object: {
                    triplets?: {
                        delegatorAddress?: string;
                        validatorSrcAddress?: string;
                        validatorDstAddress?: string;
                    }[];
                }): _128.DVVTriplets;
            };
            Delegation: {
                encode(message: _128.Delegation, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _128.Delegation;
                fromPartial(object: {
                    delegatorAddress?: string;
                    validatorAddress?: string;
                    shares?: string;
                }): _128.Delegation;
            };
            UnbondingDelegation: {
                encode(message: _128.UnbondingDelegation, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _128.UnbondingDelegation;
                fromPartial(object: {
                    delegatorAddress?: string;
                    validatorAddress?: string;
                    entries?: {
                        creationHeight?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        completionTime?: Date;
                        initialBalance?: string;
                        balance?: string;
                    }[];
                }): _128.UnbondingDelegation;
            };
            UnbondingDelegationEntry: {
                encode(message: _128.UnbondingDelegationEntry, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _128.UnbondingDelegationEntry;
                fromPartial(object: {
                    creationHeight?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    completionTime?: Date;
                    initialBalance?: string;
                    balance?: string;
                }): _128.UnbondingDelegationEntry;
            };
            RedelegationEntry: {
                encode(message: _128.RedelegationEntry, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _128.RedelegationEntry;
                fromPartial(object: {
                    creationHeight?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    completionTime?: Date;
                    initialBalance?: string;
                    sharesDst?: string;
                }): _128.RedelegationEntry;
            };
            Redelegation: {
                encode(message: _128.Redelegation, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _128.Redelegation;
                fromPartial(object: {
                    delegatorAddress?: string;
                    validatorSrcAddress?: string;
                    validatorDstAddress?: string;
                    entries?: {
                        creationHeight?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        completionTime?: Date;
                        initialBalance?: string;
                        sharesDst?: string;
                    }[];
                }): _128.Redelegation;
            };
            Params: {
                encode(message: _128.Params, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _128.Params;
                fromPartial(object: {
                    unbondingTime?: {
                        seconds?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        nanos?: number;
                    };
                    maxValidators?: number;
                    maxEntries?: number;
                    historicalEntries?: number;
                    bondDenom?: string;
                    minCommissionRate?: string;
                }): _128.Params;
            };
            DelegationResponse: {
                encode(message: _128.DelegationResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _128.DelegationResponse;
                fromPartial(object: {
                    delegation?: {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        shares?: string;
                    };
                    balance?: {
                        denom?: string;
                        amount?: string;
                    };
                }): _128.DelegationResponse;
            };
            RedelegationEntryResponse: {
                encode(message: _128.RedelegationEntryResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _128.RedelegationEntryResponse;
                fromPartial(object: {
                    redelegationEntry?: {
                        creationHeight?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        completionTime?: Date;
                        initialBalance?: string;
                        sharesDst?: string;
                    };
                    balance?: string;
                }): _128.RedelegationEntryResponse;
            };
            RedelegationResponse: {
                encode(message: _128.RedelegationResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _128.RedelegationResponse;
                fromPartial(object: {
                    redelegation?: {
                        delegatorAddress?: string;
                        validatorSrcAddress?: string;
                        validatorDstAddress?: string;
                        entries?: {
                            creationHeight?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            completionTime?: Date;
                            initialBalance?: string;
                            sharesDst?: string;
                        }[];
                    };
                    entries?: {
                        redelegationEntry?: {
                            creationHeight?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            completionTime?: Date;
                            initialBalance?: string;
                            sharesDst?: string;
                        };
                        balance?: string;
                    }[];
                }): _128.RedelegationResponse;
            };
            Pool: {
                encode(message: _128.Pool, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _128.Pool;
                fromPartial(object: {
                    notBondedTokens?: string;
                    bondedTokens?: string;
                }): _128.Pool;
            };
            QueryValidatorsRequest: {
                encode(message: _127.QueryValidatorsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _127.QueryValidatorsRequest;
                fromPartial(object: {
                    status?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _127.QueryValidatorsRequest;
            };
            QueryValidatorsResponse: {
                encode(message: _127.QueryValidatorsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _127.QueryValidatorsResponse;
                fromPartial(object: {
                    validators?: {
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        jailed?: boolean;
                        status?: _128.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        };
                        unbondingHeight?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        };
                        minSelfDelegation?: string;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _127.QueryValidatorsResponse;
            };
            QueryValidatorRequest: {
                encode(message: _127.QueryValidatorRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _127.QueryValidatorRequest;
                fromPartial(object: {
                    validatorAddr?: string;
                }): _127.QueryValidatorRequest;
            };
            QueryValidatorResponse: {
                encode(message: _127.QueryValidatorResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _127.QueryValidatorResponse;
                fromPartial(object: {
                    validator?: {
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        jailed?: boolean;
                        status?: _128.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        };
                        unbondingHeight?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        };
                        minSelfDelegation?: string;
                    };
                }): _127.QueryValidatorResponse;
            };
            QueryValidatorDelegationsRequest: {
                encode(message: _127.QueryValidatorDelegationsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _127.QueryValidatorDelegationsRequest;
                fromPartial(object: {
                    validatorAddr?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _127.QueryValidatorDelegationsRequest;
            };
            QueryValidatorDelegationsResponse: {
                encode(message: _127.QueryValidatorDelegationsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _127.QueryValidatorDelegationsResponse;
                fromPartial(object: {
                    delegationResponses?: {
                        delegation?: {
                            delegatorAddress?: string;
                            validatorAddress?: string;
                            shares?: string;
                        };
                        balance?: {
                            denom?: string;
                            amount?: string;
                        };
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _127.QueryValidatorDelegationsResponse;
            };
            QueryValidatorUnbondingDelegationsRequest: {
                encode(message: _127.QueryValidatorUnbondingDelegationsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _127.QueryValidatorUnbondingDelegationsRequest;
                fromPartial(object: {
                    validatorAddr?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _127.QueryValidatorUnbondingDelegationsRequest;
            };
            QueryValidatorUnbondingDelegationsResponse: {
                encode(message: _127.QueryValidatorUnbondingDelegationsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _127.QueryValidatorUnbondingDelegationsResponse;
                fromPartial(object: {
                    unbondingResponses?: {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        entries?: {
                            creationHeight?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                        }[];
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _127.QueryValidatorUnbondingDelegationsResponse;
            };
            QueryDelegationRequest: {
                encode(message: _127.QueryDelegationRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _127.QueryDelegationRequest;
                fromPartial(object: {
                    delegatorAddr?: string;
                    validatorAddr?: string;
                }): _127.QueryDelegationRequest;
            };
            QueryDelegationResponse: {
                encode(message: _127.QueryDelegationResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _127.QueryDelegationResponse;
                fromPartial(object: {
                    delegationResponse?: {
                        delegation?: {
                            delegatorAddress?: string;
                            validatorAddress?: string;
                            shares?: string;
                        };
                        balance?: {
                            denom?: string;
                            amount?: string;
                        };
                    };
                }): _127.QueryDelegationResponse;
            };
            QueryUnbondingDelegationRequest: {
                encode(message: _127.QueryUnbondingDelegationRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _127.QueryUnbondingDelegationRequest;
                fromPartial(object: {
                    delegatorAddr?: string;
                    validatorAddr?: string;
                }): _127.QueryUnbondingDelegationRequest;
            };
            QueryUnbondingDelegationResponse: {
                encode(message: _127.QueryUnbondingDelegationResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _127.QueryUnbondingDelegationResponse;
                fromPartial(object: {
                    unbond?: {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        entries?: {
                            creationHeight?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                        }[];
                    };
                }): _127.QueryUnbondingDelegationResponse;
            };
            QueryDelegatorDelegationsRequest: {
                encode(message: _127.QueryDelegatorDelegationsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _127.QueryDelegatorDelegationsRequest;
                fromPartial(object: {
                    delegatorAddr?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _127.QueryDelegatorDelegationsRequest;
            };
            QueryDelegatorDelegationsResponse: {
                encode(message: _127.QueryDelegatorDelegationsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _127.QueryDelegatorDelegationsResponse;
                fromPartial(object: {
                    delegationResponses?: {
                        delegation?: {
                            delegatorAddress?: string;
                            validatorAddress?: string;
                            shares?: string;
                        };
                        balance?: {
                            denom?: string;
                            amount?: string;
                        };
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _127.QueryDelegatorDelegationsResponse;
            };
            QueryDelegatorUnbondingDelegationsRequest: {
                encode(message: _127.QueryDelegatorUnbondingDelegationsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _127.QueryDelegatorUnbondingDelegationsRequest;
                fromPartial(object: {
                    delegatorAddr?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _127.QueryDelegatorUnbondingDelegationsRequest;
            };
            QueryDelegatorUnbondingDelegationsResponse: {
                encode(message: _127.QueryDelegatorUnbondingDelegationsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _127.QueryDelegatorUnbondingDelegationsResponse;
                fromPartial(object: {
                    unbondingResponses?: {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        entries?: {
                            creationHeight?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                        }[];
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _127.QueryDelegatorUnbondingDelegationsResponse;
            };
            QueryRedelegationsRequest: {
                encode(message: _127.QueryRedelegationsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _127.QueryRedelegationsRequest;
                fromPartial(object: {
                    delegatorAddr?: string;
                    srcValidatorAddr?: string;
                    dstValidatorAddr?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _127.QueryRedelegationsRequest;
            };
            QueryRedelegationsResponse: {
                encode(message: _127.QueryRedelegationsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _127.QueryRedelegationsResponse;
                fromPartial(object: {
                    redelegationResponses?: {
                        redelegation?: {
                            delegatorAddress?: string;
                            validatorSrcAddress?: string;
                            validatorDstAddress?: string;
                            entries?: {
                                creationHeight?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                completionTime?: Date;
                                initialBalance?: string;
                                sharesDst?: string;
                            }[];
                        };
                        entries?: {
                            redelegationEntry?: {
                                creationHeight?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                completionTime?: Date;
                                initialBalance?: string;
                                sharesDst?: string;
                            };
                            balance?: string;
                        }[];
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _127.QueryRedelegationsResponse;
            };
            QueryDelegatorValidatorsRequest: {
                encode(message: _127.QueryDelegatorValidatorsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _127.QueryDelegatorValidatorsRequest;
                fromPartial(object: {
                    delegatorAddr?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _127.QueryDelegatorValidatorsRequest;
            };
            QueryDelegatorValidatorsResponse: {
                encode(message: _127.QueryDelegatorValidatorsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _127.QueryDelegatorValidatorsResponse;
                fromPartial(object: {
                    validators?: {
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        jailed?: boolean;
                        status?: _128.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        };
                        unbondingHeight?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        };
                        minSelfDelegation?: string;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _127.QueryDelegatorValidatorsResponse;
            };
            QueryDelegatorValidatorRequest: {
                encode(message: _127.QueryDelegatorValidatorRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _127.QueryDelegatorValidatorRequest;
                fromPartial(object: {
                    delegatorAddr?: string;
                    validatorAddr?: string;
                }): _127.QueryDelegatorValidatorRequest;
            };
            QueryDelegatorValidatorResponse: {
                encode(message: _127.QueryDelegatorValidatorResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _127.QueryDelegatorValidatorResponse;
                fromPartial(object: {
                    validator?: {
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        jailed?: boolean;
                        status?: _128.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        };
                        unbondingHeight?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        };
                        minSelfDelegation?: string;
                    };
                }): _127.QueryDelegatorValidatorResponse;
            };
            QueryHistoricalInfoRequest: {
                encode(message: _127.QueryHistoricalInfoRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _127.QueryHistoricalInfoRequest;
                fromPartial(object: {
                    height?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }): _127.QueryHistoricalInfoRequest;
            };
            QueryHistoricalInfoResponse: {
                encode(message: _127.QueryHistoricalInfoResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _127.QueryHistoricalInfoResponse;
                fromPartial(object: {
                    hist?: {
                        header?: {
                            version?: {
                                block?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                app?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                            };
                            chainId?: string;
                            height?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            time?: Date;
                            lastBlockId?: {
                                hash?: Uint8Array;
                                partSetHeader?: {
                                    total?: number;
                                    hash?: Uint8Array;
                                };
                            };
                            lastCommitHash?: Uint8Array;
                            dataHash?: Uint8Array;
                            validatorsHash?: Uint8Array;
                            nextValidatorsHash?: Uint8Array;
                            consensusHash?: Uint8Array;
                            appHash?: Uint8Array;
                            lastResultsHash?: Uint8Array;
                            evidenceHash?: Uint8Array;
                            proposerAddress?: Uint8Array;
                        };
                        valset?: {
                            operatorAddress?: string;
                            consensusPubkey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            jailed?: boolean;
                            status?: _128.BondStatus;
                            tokens?: string;
                            delegatorShares?: string;
                            description?: {
                                moniker?: string;
                                identity?: string;
                                website?: string;
                                securityContact?: string;
                                details?: string;
                            };
                            unbondingHeight?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            unbondingTime?: Date;
                            commission?: {
                                commissionRates?: {
                                    rate?: string;
                                    maxRate?: string;
                                    maxChangeRate?: string;
                                };
                                updateTime?: Date;
                            };
                            minSelfDelegation?: string;
                        }[];
                    };
                }): _127.QueryHistoricalInfoResponse;
            };
            QueryPoolRequest: {
                encode(_: _127.QueryPoolRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _127.QueryPoolRequest;
                fromPartial(_: {}): _127.QueryPoolRequest;
            };
            QueryPoolResponse: {
                encode(message: _127.QueryPoolResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _127.QueryPoolResponse;
                fromPartial(object: {
                    pool?: {
                        notBondedTokens?: string;
                        bondedTokens?: string;
                    };
                }): _127.QueryPoolResponse;
            };
            QueryParamsRequest: {
                encode(_: _127.QueryParamsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _127.QueryParamsRequest;
                fromPartial(_: {}): _127.QueryParamsRequest;
            };
            QueryParamsResponse: {
                encode(message: _127.QueryParamsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _127.QueryParamsResponse;
                fromPartial(object: {
                    params?: {
                        unbondingTime?: {
                            seconds?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            nanos?: number;
                        };
                        maxValidators?: number;
                        maxEntries?: number;
                        historicalEntries?: number;
                        bondDenom?: string;
                        minCommissionRate?: string;
                    };
                }): _127.QueryParamsResponse;
            };
            GenesisState: {
                encode(message: _126.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _126.GenesisState;
                fromPartial(object: {
                    params?: {
                        unbondingTime?: {
                            seconds?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            nanos?: number;
                        };
                        maxValidators?: number;
                        maxEntries?: number;
                        historicalEntries?: number;
                        bondDenom?: string;
                        minCommissionRate?: string;
                    };
                    lastTotalPower?: Uint8Array;
                    lastValidatorPowers?: {
                        address?: string;
                        power?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    }[];
                    validators?: {
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        jailed?: boolean;
                        status?: _128.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        };
                        unbondingHeight?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        };
                        minSelfDelegation?: string;
                    }[];
                    delegations?: {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        shares?: string;
                    }[];
                    unbondingDelegations?: {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        entries?: {
                            creationHeight?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                        }[];
                    }[];
                    redelegations?: {
                        delegatorAddress?: string;
                        validatorSrcAddress?: string;
                        validatorDstAddress?: string;
                        entries?: {
                            creationHeight?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            completionTime?: Date;
                            initialBalance?: string;
                            sharesDst?: string;
                        }[];
                    }[];
                    exported?: boolean;
                }): _126.GenesisState;
            };
            LastValidatorPower: {
                encode(message: _126.LastValidatorPower, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _126.LastValidatorPower;
                fromPartial(object: {
                    address?: string;
                    power?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }): _126.LastValidatorPower;
            };
            authorizationTypeFromJSON(object: any): _125.AuthorizationType;
            authorizationTypeToJSON(object: _125.AuthorizationType): string;
            AuthorizationType: typeof _125.AuthorizationType;
            AuthorizationTypeSDKType: typeof _125.AuthorizationTypeSDKType;
            StakeAuthorization: {
                encode(message: _125.StakeAuthorization, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _125.StakeAuthorization;
                fromPartial(object: {
                    maxTokens?: {
                        denom?: string;
                        amount?: string;
                    };
                    allowList?: {
                        address?: string[];
                    };
                    denyList?: {
                        address?: string[];
                    };
                    authorizationType?: _125.AuthorizationType;
                }): _125.StakeAuthorization;
            };
            StakeAuthorization_Validators: {
                encode(message: _125.StakeAuthorization_Validators, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _125.StakeAuthorization_Validators;
                fromPartial(object: {
                    address?: string[];
                }): _125.StakeAuthorization_Validators;
            };
        };
    }
    namespace tx {
        namespace signing {
            const v1beta1: {
                signModeFromJSON(object: any): _130.SignMode;
                signModeToJSON(object: _130.SignMode): string;
                SignMode: typeof _130.SignMode;
                SignModeSDKType: typeof _130.SignModeSDKType;
                SignatureDescriptors: {
                    encode(message: _130.SignatureDescriptors, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _130.SignatureDescriptors;
                    fromPartial(object: {
                        signatures?: {
                            publicKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            data?: {
                                single?: {
                                    mode?: _130.SignMode;
                                    signature?: Uint8Array;
                                };
                                multi?: {
                                    bitarray?: {
                                        extraBitsStored?: number;
                                        elems?: Uint8Array;
                                    };
                                    signatures?: any[];
                                };
                            };
                            sequence?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                        }[];
                    }): _130.SignatureDescriptors;
                };
                SignatureDescriptor: {
                    encode(message: _130.SignatureDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _130.SignatureDescriptor;
                    fromPartial(object: {
                        publicKey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        data?: {
                            single?: {
                                mode?: _130.SignMode;
                                signature?: Uint8Array;
                            };
                            multi?: {
                                bitarray?: {
                                    extraBitsStored?: number;
                                    elems?: Uint8Array;
                                };
                                signatures?: any[];
                            };
                        };
                        sequence?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    }): _130.SignatureDescriptor;
                };
                SignatureDescriptor_Data: {
                    encode(message: _130.SignatureDescriptor_Data, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _130.SignatureDescriptor_Data;
                    fromPartial(object: {
                        single?: {
                            mode?: _130.SignMode;
                            signature?: Uint8Array;
                        };
                        multi?: {
                            bitarray?: {
                                extraBitsStored?: number;
                                elems?: Uint8Array;
                            };
                            signatures?: any[];
                        };
                    }): _130.SignatureDescriptor_Data;
                };
                SignatureDescriptor_Data_Single: {
                    encode(message: _130.SignatureDescriptor_Data_Single, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _130.SignatureDescriptor_Data_Single;
                    fromPartial(object: {
                        mode?: _130.SignMode;
                        signature?: Uint8Array;
                    }): _130.SignatureDescriptor_Data_Single;
                };
                SignatureDescriptor_Data_Multi: {
                    encode(message: _130.SignatureDescriptor_Data_Multi, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _130.SignatureDescriptor_Data_Multi;
                    fromPartial(object: {
                        bitarray?: {
                            extraBitsStored?: number;
                            elems?: Uint8Array;
                        };
                        signatures?: any[];
                    }): _130.SignatureDescriptor_Data_Multi;
                };
            };
        }
        const v1beta1: {
            ServiceClientImpl: typeof _269.ServiceClientImpl;
            createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                simulate(request: _131.SimulateRequest): Promise<_131.SimulateResponse>;
                getTx(request: _131.GetTxRequest): Promise<_131.GetTxResponse>;
                broadcastTx(request: _131.BroadcastTxRequest): Promise<_131.BroadcastTxResponse>;
                getTxsEvent(request: _131.GetTxsEventRequest): Promise<_131.GetTxsEventResponse>;
                getBlockWithTxs(request: _131.GetBlockWithTxsRequest): Promise<_131.GetBlockWithTxsResponse>;
            };
            LCDQueryClient: typeof _251.LCDQueryClient;
            Tx: {
                encode(message: _132.Tx, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _132.Tx;
                fromPartial(object: {
                    body?: {
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                        memo?: string;
                        timeoutHeight?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        extensionOptions?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                        nonCriticalExtensionOptions?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                    };
                    authInfo?: {
                        signerInfos?: {
                            publicKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            modeInfo?: {
                                single?: {
                                    mode?: _130.SignMode;
                                };
                                multi?: {
                                    bitarray?: {
                                        extraBitsStored?: number;
                                        elems?: Uint8Array;
                                    };
                                    modeInfos?: any[];
                                };
                            };
                            sequence?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                        }[];
                        fee?: {
                            amount?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            gasLimit?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            payer?: string;
                            granter?: string;
                        };
                        tip?: {
                            amount?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            tipper?: string;
                        };
                    };
                    signatures?: Uint8Array[];
                }): _132.Tx;
            };
            TxRaw: {
                encode(message: _132.TxRaw, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _132.TxRaw;
                fromPartial(object: {
                    bodyBytes?: Uint8Array;
                    authInfoBytes?: Uint8Array;
                    signatures?: Uint8Array[];
                }): _132.TxRaw;
            };
            SignDoc: {
                encode(message: _132.SignDoc, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _132.SignDoc;
                fromPartial(object: {
                    bodyBytes?: Uint8Array;
                    authInfoBytes?: Uint8Array;
                    chainId?: string;
                    accountNumber?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }): _132.SignDoc;
            };
            SignDocDirectAux: {
                encode(message: _132.SignDocDirectAux, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _132.SignDocDirectAux;
                fromPartial(object: {
                    bodyBytes?: Uint8Array;
                    publicKey?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                    chainId?: string;
                    accountNumber?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    sequence?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    tip?: {
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        tipper?: string;
                    };
                }): _132.SignDocDirectAux;
            };
            TxBody: {
                encode(message: _132.TxBody, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _132.TxBody;
                fromPartial(object: {
                    messages?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                    memo?: string;
                    timeoutHeight?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    extensionOptions?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                    nonCriticalExtensionOptions?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                }): _132.TxBody;
            };
            AuthInfo: {
                encode(message: _132.AuthInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _132.AuthInfo;
                fromPartial(object: {
                    signerInfos?: {
                        publicKey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        modeInfo?: {
                            single?: {
                                mode?: _130.SignMode;
                            };
                            multi?: {
                                bitarray?: {
                                    extraBitsStored?: number;
                                    elems?: Uint8Array;
                                };
                                modeInfos?: any[];
                            };
                        };
                        sequence?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    }[];
                    fee?: {
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        gasLimit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        payer?: string;
                        granter?: string;
                    };
                    tip?: {
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        tipper?: string;
                    };
                }): _132.AuthInfo;
            };
            SignerInfo: {
                encode(message: _132.SignerInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _132.SignerInfo;
                fromPartial(object: {
                    publicKey?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                    modeInfo?: {
                        single?: {
                            mode?: _130.SignMode;
                        };
                        multi?: {
                            bitarray?: {
                                extraBitsStored?: number;
                                elems?: Uint8Array;
                            };
                            modeInfos?: any[];
                        };
                    };
                    sequence?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }): _132.SignerInfo;
            };
            ModeInfo: {
                encode(message: _132.ModeInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _132.ModeInfo;
                fromPartial(object: {
                    single?: {
                        mode?: _130.SignMode;
                    };
                    multi?: {
                        bitarray?: {
                            extraBitsStored?: number;
                            elems?: Uint8Array;
                        };
                        modeInfos?: any[];
                    };
                }): _132.ModeInfo;
            };
            ModeInfo_Single: {
                encode(message: _132.ModeInfo_Single, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _132.ModeInfo_Single;
                fromPartial(object: {
                    mode?: _130.SignMode;
                }): _132.ModeInfo_Single;
            };
            ModeInfo_Multi: {
                encode(message: _132.ModeInfo_Multi, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _132.ModeInfo_Multi;
                fromPartial(object: {
                    bitarray?: {
                        extraBitsStored?: number;
                        elems?: Uint8Array;
                    };
                    modeInfos?: any[];
                }): _132.ModeInfo_Multi;
            };
            Fee: {
                encode(message: _132.Fee, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _132.Fee;
                fromPartial(object: {
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    gasLimit?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    payer?: string;
                    granter?: string;
                }): _132.Fee;
            };
            Tip: {
                encode(message: _132.Tip, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _132.Tip;
                fromPartial(object: {
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    tipper?: string;
                }): _132.Tip;
            };
            AuxSignerData: {
                encode(message: _132.AuxSignerData, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _132.AuxSignerData;
                fromPartial(object: {
                    address?: string;
                    signDoc?: {
                        bodyBytes?: Uint8Array;
                        publicKey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        chainId?: string;
                        accountNumber?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        sequence?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        tip?: {
                            amount?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            tipper?: string;
                        };
                    };
                    mode?: _130.SignMode;
                    sig?: Uint8Array;
                }): _132.AuxSignerData;
            };
            orderByFromJSON(object: any): _131.OrderBy;
            orderByToJSON(object: _131.OrderBy): string;
            broadcastModeFromJSON(object: any): _131.BroadcastMode;
            broadcastModeToJSON(object: _131.BroadcastMode): string;
            OrderBy: typeof _131.OrderBy;
            OrderBySDKType: typeof _131.OrderBySDKType;
            BroadcastMode: typeof _131.BroadcastMode;
            BroadcastModeSDKType: typeof _131.BroadcastModeSDKType;
            GetTxsEventRequest: {
                encode(message: _131.GetTxsEventRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _131.GetTxsEventRequest;
                fromPartial(object: {
                    events?: string[];
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                    orderBy?: _131.OrderBy;
                }): _131.GetTxsEventRequest;
            };
            GetTxsEventResponse: {
                encode(message: _131.GetTxsEventResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _131.GetTxsEventResponse;
                fromPartial(object: {
                    txs?: {
                        body?: {
                            messages?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            memo?: string;
                            timeoutHeight?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            extensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            nonCriticalExtensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                        };
                        authInfo?: {
                            signerInfos?: {
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                                modeInfo?: {
                                    single?: {
                                        mode?: _130.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                };
                                sequence?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                            }[];
                            fee?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                gasLimit?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                payer?: string;
                                granter?: string;
                            };
                            tip?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                tipper?: string;
                            };
                        };
                        signatures?: Uint8Array[];
                    }[];
                    txResponses?: {
                        height?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        txhash?: string;
                        codespace?: string;
                        code?: number;
                        data?: string;
                        rawLog?: string;
                        logs?: {
                            msgIndex?: number;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[];
                        }[];
                        info?: string;
                        gasWanted?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        gasUsed?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        tx?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        timestamp?: string;
                        events?: {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        }[];
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _131.GetTxsEventResponse;
            };
            BroadcastTxRequest: {
                encode(message: _131.BroadcastTxRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _131.BroadcastTxRequest;
                fromPartial(object: {
                    txBytes?: Uint8Array;
                    mode?: _131.BroadcastMode;
                }): _131.BroadcastTxRequest;
            };
            BroadcastTxResponse: {
                encode(message: _131.BroadcastTxResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _131.BroadcastTxResponse;
                fromPartial(object: {
                    txResponse?: {
                        height?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        txhash?: string;
                        codespace?: string;
                        code?: number;
                        data?: string;
                        rawLog?: string;
                        logs?: {
                            msgIndex?: number;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[];
                        }[];
                        info?: string;
                        gasWanted?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        gasUsed?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        tx?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        timestamp?: string;
                        events?: {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        }[];
                    };
                }): _131.BroadcastTxResponse;
            };
            SimulateRequest: {
                encode(message: _131.SimulateRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _131.SimulateRequest;
                fromPartial(object: {
                    tx?: {
                        body?: {
                            messages?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            memo?: string;
                            timeoutHeight?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            extensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            nonCriticalExtensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                        };
                        authInfo?: {
                            signerInfos?: {
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                                modeInfo?: {
                                    single?: {
                                        mode?: _130.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                };
                                sequence?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                            }[];
                            fee?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                gasLimit?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                payer?: string;
                                granter?: string;
                            };
                            tip?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                tipper?: string;
                            };
                        };
                        signatures?: Uint8Array[];
                    };
                    txBytes?: Uint8Array;
                }): _131.SimulateRequest;
            };
            SimulateResponse: {
                encode(message: _131.SimulateResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _131.SimulateResponse;
                fromPartial(object: {
                    gasInfo?: {
                        gasWanted?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        gasUsed?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                    result?: {
                        data?: Uint8Array;
                        log?: string;
                        events?: {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        }[];
                        msgResponses?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                    };
                }): _131.SimulateResponse;
            };
            GetTxRequest: {
                encode(message: _131.GetTxRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _131.GetTxRequest;
                fromPartial(object: {
                    hash?: string;
                }): _131.GetTxRequest;
            };
            GetTxResponse: {
                encode(message: _131.GetTxResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _131.GetTxResponse;
                fromPartial(object: {
                    tx?: {
                        body?: {
                            messages?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            memo?: string;
                            timeoutHeight?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            extensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            nonCriticalExtensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                        };
                        authInfo?: {
                            signerInfos?: {
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                                modeInfo?: {
                                    single?: {
                                        mode?: _130.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                };
                                sequence?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                            }[];
                            fee?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                gasLimit?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                payer?: string;
                                granter?: string;
                            };
                            tip?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                tipper?: string;
                            };
                        };
                        signatures?: Uint8Array[];
                    };
                    txResponse?: {
                        height?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        txhash?: string;
                        codespace?: string;
                        code?: number;
                        data?: string;
                        rawLog?: string;
                        logs?: {
                            msgIndex?: number;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[];
                        }[];
                        info?: string;
                        gasWanted?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        gasUsed?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        tx?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        timestamp?: string;
                        events?: {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        }[];
                    };
                }): _131.GetTxResponse;
            };
            GetBlockWithTxsRequest: {
                encode(message: _131.GetBlockWithTxsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _131.GetBlockWithTxsRequest;
                fromPartial(object: {
                    height?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _131.GetBlockWithTxsRequest;
            };
            GetBlockWithTxsResponse: {
                encode(message: _131.GetBlockWithTxsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _131.GetBlockWithTxsResponse;
                fromPartial(object: {
                    txs?: {
                        body?: {
                            messages?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            memo?: string;
                            timeoutHeight?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            extensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            nonCriticalExtensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                        };
                        authInfo?: {
                            signerInfos?: {
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                                modeInfo?: {
                                    single?: {
                                        mode?: _130.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                };
                                sequence?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                            }[];
                            fee?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                gasLimit?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                payer?: string;
                                granter?: string;
                            };
                            tip?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                tipper?: string;
                            };
                        };
                        signatures?: Uint8Array[];
                    }[];
                    blockId?: {
                        hash?: Uint8Array;
                        partSetHeader?: {
                            total?: number;
                            hash?: Uint8Array;
                        };
                    };
                    block?: {
                        header?: {
                            version?: {
                                block?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                app?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                            };
                            chainId?: string;
                            height?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            time?: Date;
                            lastBlockId?: {
                                hash?: Uint8Array;
                                partSetHeader?: {
                                    total?: number;
                                    hash?: Uint8Array;
                                };
                            };
                            lastCommitHash?: Uint8Array;
                            dataHash?: Uint8Array;
                            validatorsHash?: Uint8Array;
                            nextValidatorsHash?: Uint8Array;
                            consensusHash?: Uint8Array;
                            appHash?: Uint8Array;
                            lastResultsHash?: Uint8Array;
                            evidenceHash?: Uint8Array;
                            proposerAddress?: Uint8Array;
                        };
                        data?: {
                            txs?: Uint8Array[];
                        };
                        evidence?: {
                            evidence?: {
                                duplicateVoteEvidence?: {
                                    voteA?: {
                                        type?: import("../tendermint/types/types").SignedMsgType;
                                        height?: {
                                            high?: number;
                                            low?: number;
                                            unsigned?: boolean;
                                            add?: (addend: string | number | import("long").default) => import("long").default;
                                            and?: (other: string | number | import("long").default) => import("long").default;
                                            compare?: (other: string | number | import("long").default) => number;
                                            comp?: (other: string | number | import("long").default) => number;
                                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                                            div?: (divisor: string | number | import("long").default) => import("long").default;
                                            equals?: (other: string | number | import("long").default) => boolean;
                                            eq?: (other: string | number | import("long").default) => boolean;
                                            getHighBits?: () => number;
                                            getHighBitsUnsigned?: () => number;
                                            getLowBits?: () => number;
                                            getLowBitsUnsigned?: () => number;
                                            getNumBitsAbs?: () => number;
                                            greaterThan?: (other: string | number | import("long").default) => boolean;
                                            gt?: (other: string | number | import("long").default) => boolean;
                                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            gte?: (other: string | number | import("long").default) => boolean;
                                            ge?: (other: string | number | import("long").default) => boolean;
                                            isEven?: () => boolean;
                                            isNegative?: () => boolean;
                                            isOdd?: () => boolean;
                                            isPositive?: () => boolean;
                                            isZero?: () => boolean;
                                            eqz?: () => boolean;
                                            lessThan?: (other: string | number | import("long").default) => boolean;
                                            lt?: (other: string | number | import("long").default) => boolean;
                                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            lte?: (other: string | number | import("long").default) => boolean;
                                            le?: (other: string | number | import("long").default) => boolean;
                                            modulo?: (other: string | number | import("long").default) => import("long").default;
                                            mod?: (other: string | number | import("long").default) => import("long").default;
                                            rem?: (other: string | number | import("long").default) => import("long").default;
                                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                            negate?: () => import("long").default;
                                            neg?: () => import("long").default;
                                            not?: () => import("long").default;
                                            countLeadingZeros?: () => number;
                                            clz?: () => number;
                                            countTrailingZeros?: () => number;
                                            ctz?: () => number;
                                            notEquals?: (other: string | number | import("long").default) => boolean;
                                            neq?: (other: string | number | import("long").default) => boolean;
                                            ne?: (other: string | number | import("long").default) => boolean;
                                            or?: (other: string | number | import("long").default) => import("long").default;
                                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                            shl?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                            shr?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                            shru?: (numBits: number | import("long").default) => import("long").default;
                                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                            rotl?: (numBits: number | import("long").default) => import("long").default;
                                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                            rotr?: (numBits: number | import("long").default) => import("long").default;
                                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            toInt?: () => number;
                                            toNumber?: () => number;
                                            toBytes?: (le?: boolean) => number[];
                                            toBytesLE?: () => number[];
                                            toBytesBE?: () => number[];
                                            toSigned?: () => import("long").default;
                                            toString?: (radix?: number) => string;
                                            toUnsigned?: () => import("long").default;
                                            xor?: (other: string | number | import("long").default) => import("long").default;
                                        };
                                        round?: number;
                                        blockId?: {
                                            hash?: Uint8Array;
                                            partSetHeader?: {
                                                total?: number;
                                                hash?: Uint8Array;
                                            };
                                        };
                                        timestamp?: Date;
                                        validatorAddress?: Uint8Array;
                                        validatorIndex?: number;
                                        signature?: Uint8Array;
                                    };
                                    voteB?: {
                                        type?: import("../tendermint/types/types").SignedMsgType;
                                        height?: {
                                            high?: number;
                                            low?: number;
                                            unsigned?: boolean;
                                            add?: (addend: string | number | import("long").default) => import("long").default;
                                            and?: (other: string | number | import("long").default) => import("long").default;
                                            compare?: (other: string | number | import("long").default) => number;
                                            comp?: (other: string | number | import("long").default) => number;
                                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                                            div?: (divisor: string | number | import("long").default) => import("long").default;
                                            equals?: (other: string | number | import("long").default) => boolean;
                                            eq?: (other: string | number | import("long").default) => boolean;
                                            getHighBits?: () => number;
                                            getHighBitsUnsigned?: () => number;
                                            getLowBits?: () => number;
                                            getLowBitsUnsigned?: () => number;
                                            getNumBitsAbs?: () => number;
                                            greaterThan?: (other: string | number | import("long").default) => boolean;
                                            gt?: (other: string | number | import("long").default) => boolean;
                                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            gte?: (other: string | number | import("long").default) => boolean;
                                            ge?: (other: string | number | import("long").default) => boolean;
                                            isEven?: () => boolean;
                                            isNegative?: () => boolean;
                                            isOdd?: () => boolean;
                                            isPositive?: () => boolean;
                                            isZero?: () => boolean;
                                            eqz?: () => boolean;
                                            lessThan?: (other: string | number | import("long").default) => boolean;
                                            lt?: (other: string | number | import("long").default) => boolean;
                                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            lte?: (other: string | number | import("long").default) => boolean;
                                            le?: (other: string | number | import("long").default) => boolean;
                                            modulo?: (other: string | number | import("long").default) => import("long").default;
                                            mod?: (other: string | number | import("long").default) => import("long").default;
                                            rem?: (other: string | number | import("long").default) => import("long").default;
                                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                            negate?: () => import("long").default;
                                            neg?: () => import("long").default;
                                            not?: () => import("long").default;
                                            countLeadingZeros?: () => number;
                                            clz?: () => number;
                                            countTrailingZeros?: () => number;
                                            ctz?: () => number;
                                            notEquals?: (other: string | number | import("long").default) => boolean;
                                            neq?: (other: string | number | import("long").default) => boolean;
                                            ne?: (other: string | number | import("long").default) => boolean;
                                            or?: (other: string | number | import("long").default) => import("long").default;
                                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                            shl?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                            shr?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                            shru?: (numBits: number | import("long").default) => import("long").default;
                                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                            rotl?: (numBits: number | import("long").default) => import("long").default;
                                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                            rotr?: (numBits: number | import("long").default) => import("long").default;
                                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            toInt?: () => number;
                                            toNumber?: () => number;
                                            toBytes?: (le?: boolean) => number[];
                                            toBytesLE?: () => number[];
                                            toBytesBE?: () => number[];
                                            toSigned?: () => import("long").default;
                                            toString?: (radix?: number) => string;
                                            toUnsigned?: () => import("long").default;
                                            xor?: (other: string | number | import("long").default) => import("long").default;
                                        };
                                        round?: number;
                                        blockId?: {
                                            hash?: Uint8Array;
                                            partSetHeader?: {
                                                total?: number;
                                                hash?: Uint8Array;
                                            };
                                        };
                                        timestamp?: Date;
                                        validatorAddress?: Uint8Array;
                                        validatorIndex?: number;
                                        signature?: Uint8Array;
                                    };
                                    totalVotingPower?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                        and?: (other: string | number | import("long").default) => import("long").default;
                                        compare?: (other: string | number | import("long").default) => number;
                                        comp?: (other: string | number | import("long").default) => number;
                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                        equals?: (other: string | number | import("long").default) => boolean;
                                        eq?: (other: string | number | import("long").default) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                        gt?: (other: string | number | import("long").default) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        gte?: (other: string | number | import("long").default) => boolean;
                                        ge?: (other: string | number | import("long").default) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                        lt?: (other: string | number | import("long").default) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        lte?: (other: string | number | import("long").default) => boolean;
                                        le?: (other: string | number | import("long").default) => boolean;
                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                        negate?: () => import("long").default;
                                        neg?: () => import("long").default;
                                        not?: () => import("long").default;
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                        neq?: (other: string | number | import("long").default) => boolean;
                                        ne?: (other: string | number | import("long").default) => boolean;
                                        or?: (other: string | number | import("long").default) => import("long").default;
                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long").default;
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long").default;
                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                    };
                                    validatorPower?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                        and?: (other: string | number | import("long").default) => import("long").default;
                                        compare?: (other: string | number | import("long").default) => number;
                                        comp?: (other: string | number | import("long").default) => number;
                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                        equals?: (other: string | number | import("long").default) => boolean;
                                        eq?: (other: string | number | import("long").default) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                        gt?: (other: string | number | import("long").default) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        gte?: (other: string | number | import("long").default) => boolean;
                                        ge?: (other: string | number | import("long").default) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                        lt?: (other: string | number | import("long").default) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        lte?: (other: string | number | import("long").default) => boolean;
                                        le?: (other: string | number | import("long").default) => boolean;
                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                        negate?: () => import("long").default;
                                        neg?: () => import("long").default;
                                        not?: () => import("long").default;
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                        neq?: (other: string | number | import("long").default) => boolean;
                                        ne?: (other: string | number | import("long").default) => boolean;
                                        or?: (other: string | number | import("long").default) => import("long").default;
                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long").default;
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long").default;
                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                    };
                                    timestamp?: Date;
                                };
                                lightClientAttackEvidence?: {
                                    conflictingBlock?: {
                                        signedHeader?: {
                                            header?: {
                                                version?: {
                                                    block?: {
                                                        high?: number;
                                                        low?: number;
                                                        unsigned?: boolean;
                                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                                        and?: (other: string | number | import("long").default) => import("long").default;
                                                        compare?: (other: string | number | import("long").default) => number;
                                                        comp?: (other: string | number | import("long").default) => number;
                                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                                        equals?: (other: string | number | import("long").default) => boolean;
                                                        eq?: (other: string | number | import("long").default) => boolean;
                                                        getHighBits?: () => number;
                                                        getHighBitsUnsigned?: () => number;
                                                        getLowBits?: () => number;
                                                        getLowBitsUnsigned?: () => number;
                                                        getNumBitsAbs?: () => number;
                                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                                        gt?: (other: string | number | import("long").default) => boolean;
                                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                        gte?: (other: string | number | import("long").default) => boolean;
                                                        ge?: (other: string | number | import("long").default) => boolean;
                                                        isEven?: () => boolean;
                                                        isNegative?: () => boolean;
                                                        isOdd?: () => boolean;
                                                        isPositive?: () => boolean;
                                                        isZero?: () => boolean;
                                                        eqz?: () => boolean;
                                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                                        lt?: (other: string | number | import("long").default) => boolean;
                                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                        lte?: (other: string | number | import("long").default) => boolean;
                                                        le?: (other: string | number | import("long").default) => boolean;
                                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                        negate?: () => import("long").default;
                                                        neg?: () => import("long").default;
                                                        not?: () => import("long").default;
                                                        countLeadingZeros?: () => number;
                                                        clz?: () => number;
                                                        countTrailingZeros?: () => number;
                                                        ctz?: () => number;
                                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                                        neq?: (other: string | number | import("long").default) => boolean;
                                                        ne?: (other: string | number | import("long").default) => boolean;
                                                        or?: (other: string | number | import("long").default) => import("long").default;
                                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                        toInt?: () => number;
                                                        toNumber?: () => number;
                                                        toBytes?: (le?: boolean) => number[];
                                                        toBytesLE?: () => number[];
                                                        toBytesBE?: () => number[];
                                                        toSigned?: () => import("long").default;
                                                        toString?: (radix?: number) => string;
                                                        toUnsigned?: () => import("long").default;
                                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                                    };
                                                    app?: {
                                                        high?: number;
                                                        low?: number;
                                                        unsigned?: boolean;
                                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                                        and?: (other: string | number | import("long").default) => import("long").default;
                                                        compare?: (other: string | number | import("long").default) => number;
                                                        comp?: (other: string | number | import("long").default) => number;
                                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                                        equals?: (other: string | number | import("long").default) => boolean;
                                                        eq?: (other: string | number | import("long").default) => boolean;
                                                        getHighBits?: () => number;
                                                        getHighBitsUnsigned?: () => number;
                                                        getLowBits?: () => number;
                                                        getLowBitsUnsigned?: () => number;
                                                        getNumBitsAbs?: () => number;
                                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                                        gt?: (other: string | number | import("long").default) => boolean;
                                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                        gte?: (other: string | number | import("long").default) => boolean;
                                                        ge?: (other: string | number | import("long").default) => boolean;
                                                        isEven?: () => boolean;
                                                        isNegative?: () => boolean;
                                                        isOdd?: () => boolean;
                                                        isPositive?: () => boolean;
                                                        isZero?: () => boolean;
                                                        eqz?: () => boolean;
                                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                                        lt?: (other: string | number | import("long").default) => boolean;
                                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                        lte?: (other: string | number | import("long").default) => boolean;
                                                        le?: (other: string | number | import("long").default) => boolean;
                                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                        negate?: () => import("long").default;
                                                        neg?: () => import("long").default;
                                                        not?: () => import("long").default;
                                                        countLeadingZeros?: () => number;
                                                        clz?: () => number;
                                                        countTrailingZeros?: () => number;
                                                        ctz?: () => number;
                                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                                        neq?: (other: string | number | import("long").default) => boolean;
                                                        ne?: (other: string | number | import("long").default) => boolean;
                                                        or?: (other: string | number | import("long").default) => import("long").default;
                                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                        toInt?: () => number;
                                                        toNumber?: () => number;
                                                        toBytes?: (le?: boolean) => number[];
                                                        toBytesLE?: () => number[];
                                                        toBytesBE?: () => number[];
                                                        toSigned?: () => import("long").default;
                                                        toString?: (radix?: number) => string;
                                                        toUnsigned?: () => import("long").default;
                                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                                    };
                                                };
                                                chainId?: string;
                                                height?: {
                                                    high?: number;
                                                    low?: number;
                                                    unsigned?: boolean;
                                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                                    and?: (other: string | number | import("long").default) => import("long").default;
                                                    compare?: (other: string | number | import("long").default) => number;
                                                    comp?: (other: string | number | import("long").default) => number;
                                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                                    equals?: (other: string | number | import("long").default) => boolean;
                                                    eq?: (other: string | number | import("long").default) => boolean;
                                                    getHighBits?: () => number;
                                                    getHighBitsUnsigned?: () => number;
                                                    getLowBits?: () => number;
                                                    getLowBitsUnsigned?: () => number;
                                                    getNumBitsAbs?: () => number;
                                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                                    gt?: (other: string | number | import("long").default) => boolean;
                                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                    gte?: (other: string | number | import("long").default) => boolean;
                                                    ge?: (other: string | number | import("long").default) => boolean;
                                                    isEven?: () => boolean;
                                                    isNegative?: () => boolean;
                                                    isOdd?: () => boolean;
                                                    isPositive?: () => boolean;
                                                    isZero?: () => boolean;
                                                    eqz?: () => boolean;
                                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                                    lt?: (other: string | number | import("long").default) => boolean;
                                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                    lte?: (other: string | number | import("long").default) => boolean;
                                                    le?: (other: string | number | import("long").default) => boolean;
                                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                    negate?: () => import("long").default;
                                                    neg?: () => import("long").default;
                                                    not?: () => import("long").default;
                                                    countLeadingZeros?: () => number;
                                                    clz?: () => number;
                                                    countTrailingZeros?: () => number;
                                                    ctz?: () => number;
                                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                                    neq?: (other: string | number | import("long").default) => boolean;
                                                    ne?: (other: string | number | import("long").default) => boolean;
                                                    or?: (other: string | number | import("long").default) => import("long").default;
                                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                    toInt?: () => number;
                                                    toNumber?: () => number;
                                                    toBytes?: (le?: boolean) => number[];
                                                    toBytesLE?: () => number[];
                                                    toBytesBE?: () => number[];
                                                    toSigned?: () => import("long").default;
                                                    toString?: (radix?: number) => string;
                                                    toUnsigned?: () => import("long").default;
                                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                                };
                                                time?: Date;
                                                lastBlockId?: {
                                                    hash?: Uint8Array;
                                                    partSetHeader?: {
                                                        total?: number;
                                                        hash?: Uint8Array;
                                                    };
                                                };
                                                lastCommitHash?: Uint8Array;
                                                dataHash?: Uint8Array;
                                                validatorsHash?: Uint8Array;
                                                nextValidatorsHash?: Uint8Array;
                                                consensusHash?: Uint8Array;
                                                appHash?: Uint8Array;
                                                lastResultsHash?: Uint8Array;
                                                evidenceHash?: Uint8Array;
                                                proposerAddress?: Uint8Array;
                                            };
                                            commit?: {
                                                height?: {
                                                    high?: number;
                                                    low?: number;
                                                    unsigned?: boolean;
                                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                                    and?: (other: string | number | import("long").default) => import("long").default;
                                                    compare?: (other: string | number | import("long").default) => number;
                                                    comp?: (other: string | number | import("long").default) => number;
                                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                                    equals?: (other: string | number | import("long").default) => boolean;
                                                    eq?: (other: string | number | import("long").default) => boolean;
                                                    getHighBits?: () => number;
                                                    getHighBitsUnsigned?: () => number;
                                                    getLowBits?: () => number;
                                                    getLowBitsUnsigned?: () => number;
                                                    getNumBitsAbs?: () => number;
                                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                                    gt?: (other: string | number | import("long").default) => boolean;
                                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                    gte?: (other: string | number | import("long").default) => boolean;
                                                    ge?: (other: string | number | import("long").default) => boolean;
                                                    isEven?: () => boolean;
                                                    isNegative?: () => boolean;
                                                    isOdd?: () => boolean;
                                                    isPositive?: () => boolean;
                                                    isZero?: () => boolean;
                                                    eqz?: () => boolean;
                                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                                    lt?: (other: string | number | import("long").default) => boolean;
                                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                    lte?: (other: string | number | import("long").default) => boolean;
                                                    le?: (other: string | number | import("long").default) => boolean;
                                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                    negate?: () => import("long").default;
                                                    neg?: () => import("long").default;
                                                    not?: () => import("long").default;
                                                    countLeadingZeros?: () => number;
                                                    clz?: () => number;
                                                    countTrailingZeros?: () => number;
                                                    ctz?: () => number;
                                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                                    neq?: (other: string | number | import("long").default) => boolean;
                                                    ne?: (other: string | number | import("long").default) => boolean;
                                                    or?: (other: string | number | import("long").default) => import("long").default;
                                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                    toInt?: () => number;
                                                    toNumber?: () => number;
                                                    toBytes?: (le?: boolean) => number[];
                                                    toBytesLE?: () => number[];
                                                    toBytesBE?: () => number[];
                                                    toSigned?: () => import("long").default;
                                                    toString?: (radix?: number) => string;
                                                    toUnsigned?: () => import("long").default;
                                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                                };
                                                round?: number;
                                                blockId?: {
                                                    hash?: Uint8Array;
                                                    partSetHeader?: {
                                                        total?: number;
                                                        hash?: Uint8Array;
                                                    };
                                                };
                                                signatures?: {
                                                    blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                    validatorAddress?: Uint8Array;
                                                    timestamp?: Date;
                                                    signature?: Uint8Array;
                                                }[];
                                            };
                                        };
                                        validatorSet?: {
                                            validators?: {
                                                address?: Uint8Array;
                                                pubKey?: {
                                                    ed25519?: Uint8Array;
                                                    secp256k1?: Uint8Array;
                                                };
                                                votingPower?: {
                                                    high?: number;
                                                    low?: number;
                                                    unsigned?: boolean;
                                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                                    and?: (other: string | number | import("long").default) => import("long").default;
                                                    compare?: (other: string | number | import("long").default) => number;
                                                    comp?: (other: string | number | import("long").default) => number;
                                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                                    equals?: (other: string | number | import("long").default) => boolean;
                                                    eq?: (other: string | number | import("long").default) => boolean;
                                                    getHighBits?: () => number;
                                                    getHighBitsUnsigned?: () => number;
                                                    getLowBits?: () => number;
                                                    getLowBitsUnsigned?: () => number;
                                                    getNumBitsAbs?: () => number;
                                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                                    gt?: (other: string | number | import("long").default) => boolean;
                                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                    gte?: (other: string | number | import("long").default) => boolean;
                                                    ge?: (other: string | number | import("long").default) => boolean;
                                                    isEven?: () => boolean;
                                                    isNegative?: () => boolean;
                                                    isOdd?: () => boolean;
                                                    isPositive?: () => boolean;
                                                    isZero?: () => boolean;
                                                    eqz?: () => boolean;
                                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                                    lt?: (other: string | number | import("long").default) => boolean;
                                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                    lte?: (other: string | number | import("long").default) => boolean;
                                                    le?: (other: string | number | import("long").default) => boolean;
                                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                    negate?: () => import("long").default;
                                                    neg?: () => import("long").default;
                                                    not?: () => import("long").default;
                                                    countLeadingZeros?: () => number;
                                                    clz?: () => number;
                                                    countTrailingZeros?: () => number;
                                                    ctz?: () => number;
                                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                                    neq?: (other: string | number | import("long").default) => boolean;
                                                    ne?: (other: string | number | import("long").default) => boolean;
                                                    or?: (other: string | number | import("long").default) => import("long").default;
                                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                    toInt?: () => number;
                                                    toNumber?: () => number;
                                                    toBytes?: (le?: boolean) => number[];
                                                    toBytesLE?: () => number[];
                                                    toBytesBE?: () => number[];
                                                    toSigned?: () => import("long").default;
                                                    toString?: (radix?: number) => string;
                                                    toUnsigned?: () => import("long").default;
                                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                                };
                                                proposerPriority?: {
                                                    high?: number;
                                                    low?: number;
                                                    unsigned?: boolean;
                                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                                    and?: (other: string | number | import("long").default) => import("long").default;
                                                    compare?: (other: string | number | import("long").default) => number;
                                                    comp?: (other: string | number | import("long").default) => number;
                                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                                    equals?: (other: string | number | import("long").default) => boolean;
                                                    eq?: (other: string | number | import("long").default) => boolean;
                                                    getHighBits?: () => number;
                                                    getHighBitsUnsigned?: () => number;
                                                    getLowBits?: () => number;
                                                    getLowBitsUnsigned?: () => number;
                                                    getNumBitsAbs?: () => number;
                                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                                    gt?: (other: string | number | import("long").default) => boolean;
                                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                    gte?: (other: string | number | import("long").default) => boolean;
                                                    ge?: (other: string | number | import("long").default) => boolean;
                                                    isEven?: () => boolean;
                                                    isNegative?: () => boolean;
                                                    isOdd?: () => boolean;
                                                    isPositive?: () => boolean;
                                                    isZero?: () => boolean;
                                                    eqz?: () => boolean;
                                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                                    lt?: (other: string | number | import("long").default) => boolean;
                                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                    lte?: (other: string | number | import("long").default) => boolean;
                                                    le?: (other: string | number | import("long").default) => boolean;
                                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                    negate?: () => import("long").default;
                                                    neg?: () => import("long").default;
                                                    not?: () => import("long").default;
                                                    countLeadingZeros?: () => number;
                                                    clz?: () => number;
                                                    countTrailingZeros?: () => number;
                                                    ctz?: () => number;
                                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                                    neq?: (other: string | number | import("long").default) => boolean;
                                                    ne?: (other: string | number | import("long").default) => boolean;
                                                    or?: (other: string | number | import("long").default) => import("long").default;
                                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                    toInt?: () => number;
                                                    toNumber?: () => number;
                                                    toBytes?: (le?: boolean) => number[];
                                                    toBytesLE?: () => number[];
                                                    toBytesBE?: () => number[];
                                                    toSigned?: () => import("long").default;
                                                    toString?: (radix?: number) => string;
                                                    toUnsigned?: () => import("long").default;
                                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                                };
                                            }[];
                                            proposer?: {
                                                address?: Uint8Array;
                                                pubKey?: {
                                                    ed25519?: Uint8Array;
                                                    secp256k1?: Uint8Array;
                                                };
                                                votingPower?: {
                                                    high?: number;
                                                    low?: number;
                                                    unsigned?: boolean;
                                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                                    and?: (other: string | number | import("long").default) => import("long").default;
                                                    compare?: (other: string | number | import("long").default) => number;
                                                    comp?: (other: string | number | import("long").default) => number;
                                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                                    equals?: (other: string | number | import("long").default) => boolean;
                                                    eq?: (other: string | number | import("long").default) => boolean;
                                                    getHighBits?: () => number;
                                                    getHighBitsUnsigned?: () => number;
                                                    getLowBits?: () => number;
                                                    getLowBitsUnsigned?: () => number;
                                                    getNumBitsAbs?: () => number;
                                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                                    gt?: (other: string | number | import("long").default) => boolean;
                                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                    gte?: (other: string | number | import("long").default) => boolean;
                                                    ge?: (other: string | number | import("long").default) => boolean;
                                                    isEven?: () => boolean;
                                                    isNegative?: () => boolean;
                                                    isOdd?: () => boolean;
                                                    isPositive?: () => boolean;
                                                    isZero?: () => boolean;
                                                    eqz?: () => boolean;
                                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                                    lt?: (other: string | number | import("long").default) => boolean;
                                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                    lte?: (other: string | number | import("long").default) => boolean;
                                                    le?: (other: string | number | import("long").default) => boolean;
                                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                    negate?: () => import("long").default;
                                                    neg?: () => import("long").default;
                                                    not?: () => import("long").default;
                                                    countLeadingZeros?: () => number;
                                                    clz?: () => number;
                                                    countTrailingZeros?: () => number;
                                                    ctz?: () => number;
                                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                                    neq?: (other: string | number | import("long").default) => boolean;
                                                    ne?: (other: string | number | import("long").default) => boolean;
                                                    or?: (other: string | number | import("long").default) => import("long").default;
                                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                    toInt?: () => number;
                                                    toNumber?: () => number;
                                                    toBytes?: (le?: boolean) => number[];
                                                    toBytesLE?: () => number[];
                                                    toBytesBE?: () => number[];
                                                    toSigned?: () => import("long").default;
                                                    toString?: (radix?: number) => string;
                                                    toUnsigned?: () => import("long").default;
                                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                                };
                                                proposerPriority?: {
                                                    high?: number;
                                                    low?: number;
                                                    unsigned?: boolean;
                                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                                    and?: (other: string | number | import("long").default) => import("long").default;
                                                    compare?: (other: string | number | import("long").default) => number;
                                                    comp?: (other: string | number | import("long").default) => number;
                                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                                    equals?: (other: string | number | import("long").default) => boolean;
                                                    eq?: (other: string | number | import("long").default) => boolean;
                                                    getHighBits?: () => number;
                                                    getHighBitsUnsigned?: () => number;
                                                    getLowBits?: () => number;
                                                    getLowBitsUnsigned?: () => number;
                                                    getNumBitsAbs?: () => number;
                                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                                    gt?: (other: string | number | import("long").default) => boolean;
                                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                    gte?: (other: string | number | import("long").default) => boolean;
                                                    ge?: (other: string | number | import("long").default) => boolean;
                                                    isEven?: () => boolean;
                                                    isNegative?: () => boolean;
                                                    isOdd?: () => boolean;
                                                    isPositive?: () => boolean;
                                                    isZero?: () => boolean;
                                                    eqz?: () => boolean;
                                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                                    lt?: (other: string | number | import("long").default) => boolean;
                                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                    lte?: (other: string | number | import("long").default) => boolean;
                                                    le?: (other: string | number | import("long").default) => boolean;
                                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                    negate?: () => import("long").default;
                                                    neg?: () => import("long").default;
                                                    not?: () => import("long").default;
                                                    countLeadingZeros?: () => number;
                                                    clz?: () => number;
                                                    countTrailingZeros?: () => number;
                                                    ctz?: () => number;
                                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                                    neq?: (other: string | number | import("long").default) => boolean;
                                                    ne?: (other: string | number | import("long").default) => boolean;
                                                    or?: (other: string | number | import("long").default) => import("long").default;
                                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                    toInt?: () => number;
                                                    toNumber?: () => number;
                                                    toBytes?: (le?: boolean) => number[];
                                                    toBytesLE?: () => number[];
                                                    toBytesBE?: () => number[];
                                                    toSigned?: () => import("long").default;
                                                    toString?: (radix?: number) => string;
                                                    toUnsigned?: () => import("long").default;
                                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                                };
                                            };
                                            totalVotingPower?: {
                                                high?: number;
                                                low?: number;
                                                unsigned?: boolean;
                                                add?: (addend: string | number | import("long").default) => import("long").default;
                                                and?: (other: string | number | import("long").default) => import("long").default;
                                                compare?: (other: string | number | import("long").default) => number;
                                                comp?: (other: string | number | import("long").default) => number;
                                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                                equals?: (other: string | number | import("long").default) => boolean;
                                                eq?: (other: string | number | import("long").default) => boolean;
                                                getHighBits?: () => number;
                                                getHighBitsUnsigned?: () => number;
                                                getLowBits?: () => number;
                                                getLowBitsUnsigned?: () => number;
                                                getNumBitsAbs?: () => number;
                                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                                gt?: (other: string | number | import("long").default) => boolean;
                                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                gte?: (other: string | number | import("long").default) => boolean;
                                                ge?: (other: string | number | import("long").default) => boolean;
                                                isEven?: () => boolean;
                                                isNegative?: () => boolean;
                                                isOdd?: () => boolean;
                                                isPositive?: () => boolean;
                                                isZero?: () => boolean;
                                                eqz?: () => boolean;
                                                lessThan?: (other: string | number | import("long").default) => boolean;
                                                lt?: (other: string | number | import("long").default) => boolean;
                                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                                lte?: (other: string | number | import("long").default) => boolean;
                                                le?: (other: string | number | import("long").default) => boolean;
                                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                                mod?: (other: string | number | import("long").default) => import("long").default;
                                                rem?: (other: string | number | import("long").default) => import("long").default;
                                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                                negate?: () => import("long").default;
                                                neg?: () => import("long").default;
                                                not?: () => import("long").default;
                                                countLeadingZeros?: () => number;
                                                clz?: () => number;
                                                countTrailingZeros?: () => number;
                                                ctz?: () => number;
                                                notEquals?: (other: string | number | import("long").default) => boolean;
                                                neq?: (other: string | number | import("long").default) => boolean;
                                                ne?: (other: string | number | import("long").default) => boolean;
                                                or?: (other: string | number | import("long").default) => import("long").default;
                                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                                shl?: (numBits: number | import("long").default) => import("long").default;
                                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                                shr?: (numBits: number | import("long").default) => import("long").default;
                                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                                shru?: (numBits: number | import("long").default) => import("long").default;
                                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                                toInt?: () => number;
                                                toNumber?: () => number;
                                                toBytes?: (le?: boolean) => number[];
                                                toBytesLE?: () => number[];
                                                toBytesBE?: () => number[];
                                                toSigned?: () => import("long").default;
                                                toString?: (radix?: number) => string;
                                                toUnsigned?: () => import("long").default;
                                                xor?: (other: string | number | import("long").default) => import("long").default;
                                            };
                                        };
                                    };
                                    commonHeight?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                        and?: (other: string | number | import("long").default) => import("long").default;
                                        compare?: (other: string | number | import("long").default) => number;
                                        comp?: (other: string | number | import("long").default) => number;
                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                        equals?: (other: string | number | import("long").default) => boolean;
                                        eq?: (other: string | number | import("long").default) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                        gt?: (other: string | number | import("long").default) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        gte?: (other: string | number | import("long").default) => boolean;
                                        ge?: (other: string | number | import("long").default) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                        lt?: (other: string | number | import("long").default) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        lte?: (other: string | number | import("long").default) => boolean;
                                        le?: (other: string | number | import("long").default) => boolean;
                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                        negate?: () => import("long").default;
                                        neg?: () => import("long").default;
                                        not?: () => import("long").default;
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                        neq?: (other: string | number | import("long").default) => boolean;
                                        ne?: (other: string | number | import("long").default) => boolean;
                                        or?: (other: string | number | import("long").default) => import("long").default;
                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long").default;
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long").default;
                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                    };
                                    byzantineValidators?: {
                                        address?: Uint8Array;
                                        pubKey?: {
                                            ed25519?: Uint8Array;
                                            secp256k1?: Uint8Array;
                                        };
                                        votingPower?: {
                                            high?: number;
                                            low?: number;
                                            unsigned?: boolean;
                                            add?: (addend: string | number | import("long").default) => import("long").default;
                                            and?: (other: string | number | import("long").default) => import("long").default;
                                            compare?: (other: string | number | import("long").default) => number;
                                            comp?: (other: string | number | import("long").default) => number;
                                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                                            div?: (divisor: string | number | import("long").default) => import("long").default;
                                            equals?: (other: string | number | import("long").default) => boolean;
                                            eq?: (other: string | number | import("long").default) => boolean;
                                            getHighBits?: () => number;
                                            getHighBitsUnsigned?: () => number;
                                            getLowBits?: () => number;
                                            getLowBitsUnsigned?: () => number;
                                            getNumBitsAbs?: () => number;
                                            greaterThan?: (other: string | number | import("long").default) => boolean;
                                            gt?: (other: string | number | import("long").default) => boolean;
                                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            gte?: (other: string | number | import("long").default) => boolean;
                                            ge?: (other: string | number | import("long").default) => boolean;
                                            isEven?: () => boolean;
                                            isNegative?: () => boolean;
                                            isOdd?: () => boolean;
                                            isPositive?: () => boolean;
                                            isZero?: () => boolean;
                                            eqz?: () => boolean;
                                            lessThan?: (other: string | number | import("long").default) => boolean;
                                            lt?: (other: string | number | import("long").default) => boolean;
                                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            lte?: (other: string | number | import("long").default) => boolean;
                                            le?: (other: string | number | import("long").default) => boolean;
                                            modulo?: (other: string | number | import("long").default) => import("long").default;
                                            mod?: (other: string | number | import("long").default) => import("long").default;
                                            rem?: (other: string | number | import("long").default) => import("long").default;
                                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                            negate?: () => import("long").default;
                                            neg?: () => import("long").default;
                                            not?: () => import("long").default;
                                            countLeadingZeros?: () => number;
                                            clz?: () => number;
                                            countTrailingZeros?: () => number;
                                            ctz?: () => number;
                                            notEquals?: (other: string | number | import("long").default) => boolean;
                                            neq?: (other: string | number | import("long").default) => boolean;
                                            ne?: (other: string | number | import("long").default) => boolean;
                                            or?: (other: string | number | import("long").default) => import("long").default;
                                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                            shl?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                            shr?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                            shru?: (numBits: number | import("long").default) => import("long").default;
                                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                            rotl?: (numBits: number | import("long").default) => import("long").default;
                                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                            rotr?: (numBits: number | import("long").default) => import("long").default;
                                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            toInt?: () => number;
                                            toNumber?: () => number;
                                            toBytes?: (le?: boolean) => number[];
                                            toBytesLE?: () => number[];
                                            toBytesBE?: () => number[];
                                            toSigned?: () => import("long").default;
                                            toString?: (radix?: number) => string;
                                            toUnsigned?: () => import("long").default;
                                            xor?: (other: string | number | import("long").default) => import("long").default;
                                        };
                                        proposerPriority?: {
                                            high?: number;
                                            low?: number;
                                            unsigned?: boolean;
                                            add?: (addend: string | number | import("long").default) => import("long").default;
                                            and?: (other: string | number | import("long").default) => import("long").default;
                                            compare?: (other: string | number | import("long").default) => number;
                                            comp?: (other: string | number | import("long").default) => number;
                                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                                            div?: (divisor: string | number | import("long").default) => import("long").default;
                                            equals?: (other: string | number | import("long").default) => boolean;
                                            eq?: (other: string | number | import("long").default) => boolean;
                                            getHighBits?: () => number;
                                            getHighBitsUnsigned?: () => number;
                                            getLowBits?: () => number;
                                            getLowBitsUnsigned?: () => number;
                                            getNumBitsAbs?: () => number;
                                            greaterThan?: (other: string | number | import("long").default) => boolean;
                                            gt?: (other: string | number | import("long").default) => boolean;
                                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            gte?: (other: string | number | import("long").default) => boolean;
                                            ge?: (other: string | number | import("long").default) => boolean;
                                            isEven?: () => boolean;
                                            isNegative?: () => boolean;
                                            isOdd?: () => boolean;
                                            isPositive?: () => boolean;
                                            isZero?: () => boolean;
                                            eqz?: () => boolean;
                                            lessThan?: (other: string | number | import("long").default) => boolean;
                                            lt?: (other: string | number | import("long").default) => boolean;
                                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            lte?: (other: string | number | import("long").default) => boolean;
                                            le?: (other: string | number | import("long").default) => boolean;
                                            modulo?: (other: string | number | import("long").default) => import("long").default;
                                            mod?: (other: string | number | import("long").default) => import("long").default;
                                            rem?: (other: string | number | import("long").default) => import("long").default;
                                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                            negate?: () => import("long").default;
                                            neg?: () => import("long").default;
                                            not?: () => import("long").default;
                                            countLeadingZeros?: () => number;
                                            clz?: () => number;
                                            countTrailingZeros?: () => number;
                                            ctz?: () => number;
                                            notEquals?: (other: string | number | import("long").default) => boolean;
                                            neq?: (other: string | number | import("long").default) => boolean;
                                            ne?: (other: string | number | import("long").default) => boolean;
                                            or?: (other: string | number | import("long").default) => import("long").default;
                                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                            shl?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                            shr?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                            shru?: (numBits: number | import("long").default) => import("long").default;
                                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                            rotl?: (numBits: number | import("long").default) => import("long").default;
                                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                            rotr?: (numBits: number | import("long").default) => import("long").default;
                                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            toInt?: () => number;
                                            toNumber?: () => number;
                                            toBytes?: (le?: boolean) => number[];
                                            toBytesLE?: () => number[];
                                            toBytesBE?: () => number[];
                                            toSigned?: () => import("long").default;
                                            toString?: (radix?: number) => string;
                                            toUnsigned?: () => import("long").default;
                                            xor?: (other: string | number | import("long").default) => import("long").default;
                                        };
                                    }[];
                                    totalVotingPower?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                        and?: (other: string | number | import("long").default) => import("long").default;
                                        compare?: (other: string | number | import("long").default) => number;
                                        comp?: (other: string | number | import("long").default) => number;
                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                        equals?: (other: string | number | import("long").default) => boolean;
                                        eq?: (other: string | number | import("long").default) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                        gt?: (other: string | number | import("long").default) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        gte?: (other: string | number | import("long").default) => boolean;
                                        ge?: (other: string | number | import("long").default) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                        lt?: (other: string | number | import("long").default) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        lte?: (other: string | number | import("long").default) => boolean;
                                        le?: (other: string | number | import("long").default) => boolean;
                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                        negate?: () => import("long").default;
                                        neg?: () => import("long").default;
                                        not?: () => import("long").default;
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                        neq?: (other: string | number | import("long").default) => boolean;
                                        ne?: (other: string | number | import("long").default) => boolean;
                                        or?: (other: string | number | import("long").default) => import("long").default;
                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long").default;
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long").default;
                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                    };
                                    timestamp?: Date;
                                };
                            }[];
                        };
                        lastCommit?: {
                            height?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            round?: number;
                            blockId?: {
                                hash?: Uint8Array;
                                partSetHeader?: {
                                    total?: number;
                                    hash?: Uint8Array;
                                };
                            };
                            signatures?: {
                                blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                validatorAddress?: Uint8Array;
                                timestamp?: Date;
                                signature?: Uint8Array;
                            }[];
                        };
                    };
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _131.GetBlockWithTxsResponse;
            };
        };
    }
    namespace upgrade {
        const v1beta1: {
            MsgClientImpl: typeof _283.MsgClientImpl;
            QueryClientImpl: typeof _270.QueryClientImpl;
            createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                currentPlan(request?: _133.QueryCurrentPlanRequest): Promise<_133.QueryCurrentPlanResponse>;
                appliedPlan(request: _133.QueryAppliedPlanRequest): Promise<_133.QueryAppliedPlanResponse>;
                upgradedConsensusState(request: _133.QueryUpgradedConsensusStateRequest): Promise<_133.QueryUpgradedConsensusStateResponse>;
                moduleVersions(request: _133.QueryModuleVersionsRequest): Promise<_133.QueryModuleVersionsResponse>;
                authority(request?: _133.QueryAuthorityRequest): Promise<_133.QueryAuthorityResponse>;
            };
            LCDQueryClient: typeof _252.LCDQueryClient;
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    softwareUpgrade(value: _134.MsgSoftwareUpgrade): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    cancelUpgrade(value: _134.MsgCancelUpgrade): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    softwareUpgrade(value: _134.MsgSoftwareUpgrade): {
                        typeUrl: string;
                        value: _134.MsgSoftwareUpgrade;
                    };
                    cancelUpgrade(value: _134.MsgCancelUpgrade): {
                        typeUrl: string;
                        value: _134.MsgCancelUpgrade;
                    };
                };
                fromPartial: {
                    softwareUpgrade(value: _134.MsgSoftwareUpgrade): {
                        typeUrl: string;
                        value: _134.MsgSoftwareUpgrade;
                    };
                    cancelUpgrade(value: _134.MsgCancelUpgrade): {
                        typeUrl: string;
                        value: _134.MsgCancelUpgrade;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.upgrade.v1beta1.MsgSoftwareUpgrade": {
                    aminoType: string;
                    toAmino: ({ authority, plan }: _134.MsgSoftwareUpgrade) => {
                        authority: string;
                        plan: {
                            name: string;
                            time: {
                                seconds: string;
                                nanos: number;
                            };
                            height: string;
                            info: string;
                            upgraded_client_state: {
                                type_url: string;
                                value: Uint8Array;
                            };
                        };
                    };
                    fromAmino: ({ authority, plan }: {
                        authority: string;
                        plan: {
                            name: string;
                            time: {
                                seconds: string;
                                nanos: number;
                            };
                            height: string;
                            info: string;
                            upgraded_client_state: {
                                type_url: string;
                                value: Uint8Array;
                            };
                        };
                    }) => _134.MsgSoftwareUpgrade;
                };
                "/cosmos.upgrade.v1beta1.MsgCancelUpgrade": {
                    aminoType: string;
                    toAmino: ({ authority }: _134.MsgCancelUpgrade) => {
                        authority: string;
                    };
                    fromAmino: ({ authority }: {
                        authority: string;
                    }) => _134.MsgCancelUpgrade;
                };
            };
            Plan: {
                encode(message: _135.Plan, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _135.Plan;
                fromPartial(object: {
                    name?: string;
                    time?: Date;
                    height?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    info?: string;
                    upgradedClientState?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                }): _135.Plan;
            };
            SoftwareUpgradeProposal: {
                encode(message: _135.SoftwareUpgradeProposal, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _135.SoftwareUpgradeProposal;
                fromPartial(object: {
                    title?: string;
                    description?: string;
                    plan?: {
                        name?: string;
                        time?: Date;
                        height?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        info?: string;
                        upgradedClientState?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    };
                }): _135.SoftwareUpgradeProposal;
            };
            CancelSoftwareUpgradeProposal: {
                encode(message: _135.CancelSoftwareUpgradeProposal, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _135.CancelSoftwareUpgradeProposal;
                fromPartial(object: {
                    title?: string;
                    description?: string;
                }): _135.CancelSoftwareUpgradeProposal;
            };
            ModuleVersion: {
                encode(message: _135.ModuleVersion, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _135.ModuleVersion;
                fromPartial(object: {
                    name?: string;
                    version?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }): _135.ModuleVersion;
            };
            MsgSoftwareUpgrade: {
                encode(message: _134.MsgSoftwareUpgrade, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _134.MsgSoftwareUpgrade;
                fromPartial(object: {
                    authority?: string;
                    plan?: {
                        name?: string;
                        time?: Date;
                        height?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        info?: string;
                        upgradedClientState?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    };
                }): _134.MsgSoftwareUpgrade;
            };
            MsgSoftwareUpgradeResponse: {
                encode(_: _134.MsgSoftwareUpgradeResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _134.MsgSoftwareUpgradeResponse;
                fromPartial(_: {}): _134.MsgSoftwareUpgradeResponse;
            };
            MsgCancelUpgrade: {
                encode(message: _134.MsgCancelUpgrade, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _134.MsgCancelUpgrade;
                fromPartial(object: {
                    authority?: string;
                }): _134.MsgCancelUpgrade;
            };
            MsgCancelUpgradeResponse: {
                encode(_: _134.MsgCancelUpgradeResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _134.MsgCancelUpgradeResponse;
                fromPartial(_: {}): _134.MsgCancelUpgradeResponse;
            };
            QueryCurrentPlanRequest: {
                encode(_: _133.QueryCurrentPlanRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _133.QueryCurrentPlanRequest;
                fromPartial(_: {}): _133.QueryCurrentPlanRequest;
            };
            QueryCurrentPlanResponse: {
                encode(message: _133.QueryCurrentPlanResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _133.QueryCurrentPlanResponse;
                fromPartial(object: {
                    plan?: {
                        name?: string;
                        time?: Date;
                        height?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        info?: string;
                        upgradedClientState?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    };
                }): _133.QueryCurrentPlanResponse;
            };
            QueryAppliedPlanRequest: {
                encode(message: _133.QueryAppliedPlanRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _133.QueryAppliedPlanRequest;
                fromPartial(object: {
                    name?: string;
                }): _133.QueryAppliedPlanRequest;
            };
            QueryAppliedPlanResponse: {
                encode(message: _133.QueryAppliedPlanResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _133.QueryAppliedPlanResponse;
                fromPartial(object: {
                    height?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }): _133.QueryAppliedPlanResponse;
            };
            QueryUpgradedConsensusStateRequest: {
                encode(message: _133.QueryUpgradedConsensusStateRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _133.QueryUpgradedConsensusStateRequest;
                fromPartial(object: {
                    lastHeight?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }): _133.QueryUpgradedConsensusStateRequest;
            };
            QueryUpgradedConsensusStateResponse: {
                encode(message: _133.QueryUpgradedConsensusStateResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _133.QueryUpgradedConsensusStateResponse;
                fromPartial(object: {
                    upgradedConsensusState?: Uint8Array;
                }): _133.QueryUpgradedConsensusStateResponse;
            };
            QueryModuleVersionsRequest: {
                encode(message: _133.QueryModuleVersionsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _133.QueryModuleVersionsRequest;
                fromPartial(object: {
                    moduleName?: string;
                }): _133.QueryModuleVersionsRequest;
            };
            QueryModuleVersionsResponse: {
                encode(message: _133.QueryModuleVersionsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _133.QueryModuleVersionsResponse;
                fromPartial(object: {
                    moduleVersions?: {
                        name?: string;
                        version?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    }[];
                }): _133.QueryModuleVersionsResponse;
            };
            QueryAuthorityRequest: {
                encode(_: _133.QueryAuthorityRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _133.QueryAuthorityRequest;
                fromPartial(_: {}): _133.QueryAuthorityRequest;
            };
            QueryAuthorityResponse: {
                encode(message: _133.QueryAuthorityResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _133.QueryAuthorityResponse;
                fromPartial(object: {
                    address?: string;
                }): _133.QueryAuthorityResponse;
            };
        };
    }
    namespace vesting {
        const v1beta1: {
            MsgClientImpl: typeof _284.MsgClientImpl;
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    createVestingAccount(value: _136.MsgCreateVestingAccount): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    createPermanentLockedAccount(value: _136.MsgCreatePermanentLockedAccount): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    createPeriodicVestingAccount(value: _136.MsgCreatePeriodicVestingAccount): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    createVestingAccount(value: _136.MsgCreateVestingAccount): {
                        typeUrl: string;
                        value: _136.MsgCreateVestingAccount;
                    };
                    createPermanentLockedAccount(value: _136.MsgCreatePermanentLockedAccount): {
                        typeUrl: string;
                        value: _136.MsgCreatePermanentLockedAccount;
                    };
                    createPeriodicVestingAccount(value: _136.MsgCreatePeriodicVestingAccount): {
                        typeUrl: string;
                        value: _136.MsgCreatePeriodicVestingAccount;
                    };
                };
                fromPartial: {
                    createVestingAccount(value: _136.MsgCreateVestingAccount): {
                        typeUrl: string;
                        value: _136.MsgCreateVestingAccount;
                    };
                    createPermanentLockedAccount(value: _136.MsgCreatePermanentLockedAccount): {
                        typeUrl: string;
                        value: _136.MsgCreatePermanentLockedAccount;
                    };
                    createPeriodicVestingAccount(value: _136.MsgCreatePeriodicVestingAccount): {
                        typeUrl: string;
                        value: _136.MsgCreatePeriodicVestingAccount;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.vesting.v1beta1.MsgCreateVestingAccount": {
                    aminoType: string;
                    toAmino: ({ fromAddress, toAddress, amount, endTime, delayed }: _136.MsgCreateVestingAccount) => {
                        from_address: string;
                        to_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        }[];
                        end_time: string;
                        delayed: boolean;
                    };
                    fromAmino: ({ from_address, to_address, amount, end_time, delayed }: {
                        from_address: string;
                        to_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        }[];
                        end_time: string;
                        delayed: boolean;
                    }) => _136.MsgCreateVestingAccount;
                };
                "/cosmos.vesting.v1beta1.MsgCreatePermanentLockedAccount": {
                    aminoType: string;
                    toAmino: ({ fromAddress, toAddress, amount }: _136.MsgCreatePermanentLockedAccount) => {
                        from_address: string;
                        to_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        }[];
                    };
                    fromAmino: ({ from_address, to_address, amount }: {
                        from_address: string;
                        to_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        }[];
                    }) => _136.MsgCreatePermanentLockedAccount;
                };
                "/cosmos.vesting.v1beta1.MsgCreatePeriodicVestingAccount": {
                    aminoType: string;
                    toAmino: ({ fromAddress, toAddress, startTime, vestingPeriods }: _136.MsgCreatePeriodicVestingAccount) => {
                        from_address: string;
                        to_address: string;
                        start_time: string;
                        vesting_periods: {
                            length: string;
                            amount: {
                                denom: string;
                                amount: string;
                            }[];
                        }[];
                    };
                    fromAmino: ({ from_address, to_address, start_time, vesting_periods }: {
                        from_address: string;
                        to_address: string;
                        start_time: string;
                        vesting_periods: {
                            length: string;
                            amount: {
                                denom: string;
                                amount: string;
                            }[];
                        }[];
                    }) => _136.MsgCreatePeriodicVestingAccount;
                };
            };
            BaseVestingAccount: {
                encode(message: _137.BaseVestingAccount, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _137.BaseVestingAccount;
                fromPartial(object: {
                    baseAccount?: {
                        address?: string;
                        pubKey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        accountNumber?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        sequence?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                    originalVesting?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    delegatedFree?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    delegatedVesting?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    endTime?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }): _137.BaseVestingAccount;
            };
            ContinuousVestingAccount: {
                encode(message: _137.ContinuousVestingAccount, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _137.ContinuousVestingAccount;
                fromPartial(object: {
                    baseVestingAccount?: {
                        baseAccount?: {
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            accountNumber?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            sequence?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                        };
                        originalVesting?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        delegatedFree?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        delegatedVesting?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        endTime?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                    startTime?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                }): _137.ContinuousVestingAccount;
            };
            DelayedVestingAccount: {
                encode(message: _137.DelayedVestingAccount, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _137.DelayedVestingAccount;
                fromPartial(object: {
                    baseVestingAccount?: {
                        baseAccount?: {
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            accountNumber?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            sequence?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                        };
                        originalVesting?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        delegatedFree?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        delegatedVesting?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        endTime?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _137.DelayedVestingAccount;
            };
            Period: {
                encode(message: _137.Period, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _137.Period;
                fromPartial(object: {
                    length?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _137.Period;
            };
            PeriodicVestingAccount: {
                encode(message: _137.PeriodicVestingAccount, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _137.PeriodicVestingAccount;
                fromPartial(object: {
                    baseVestingAccount?: {
                        baseAccount?: {
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            accountNumber?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            sequence?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                        };
                        originalVesting?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        delegatedFree?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        delegatedVesting?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        endTime?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                    startTime?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    vestingPeriods?: {
                        length?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[];
                }): _137.PeriodicVestingAccount;
            };
            PermanentLockedAccount: {
                encode(message: _137.PermanentLockedAccount, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _137.PermanentLockedAccount;
                fromPartial(object: {
                    baseVestingAccount?: {
                        baseAccount?: {
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            accountNumber?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            sequence?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                        };
                        originalVesting?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        delegatedFree?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        delegatedVesting?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        endTime?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                    };
                }): _137.PermanentLockedAccount;
            };
            MsgCreateVestingAccount: {
                encode(message: _136.MsgCreateVestingAccount, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _136.MsgCreateVestingAccount;
                fromPartial(object: {
                    fromAddress?: string;
                    toAddress?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    endTime?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    delayed?: boolean;
                }): _136.MsgCreateVestingAccount;
            };
            MsgCreateVestingAccountResponse: {
                encode(_: _136.MsgCreateVestingAccountResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _136.MsgCreateVestingAccountResponse;
                fromPartial(_: {}): _136.MsgCreateVestingAccountResponse;
            };
            MsgCreatePermanentLockedAccount: {
                encode(message: _136.MsgCreatePermanentLockedAccount, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _136.MsgCreatePermanentLockedAccount;
                fromPartial(object: {
                    fromAddress?: string;
                    toAddress?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _136.MsgCreatePermanentLockedAccount;
            };
            MsgCreatePermanentLockedAccountResponse: {
                encode(_: _136.MsgCreatePermanentLockedAccountResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _136.MsgCreatePermanentLockedAccountResponse;
                fromPartial(_: {}): _136.MsgCreatePermanentLockedAccountResponse;
            };
            MsgCreatePeriodicVestingAccount: {
                encode(message: _136.MsgCreatePeriodicVestingAccount, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _136.MsgCreatePeriodicVestingAccount;
                fromPartial(object: {
                    fromAddress?: string;
                    toAddress?: string;
                    startTime?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    vestingPeriods?: {
                        length?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[];
                }): _136.MsgCreatePeriodicVestingAccount;
            };
            MsgCreatePeriodicVestingAccountResponse: {
                encode(_: _136.MsgCreatePeriodicVestingAccountResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _136.MsgCreatePeriodicVestingAccountResponse;
                fromPartial(_: {}): _136.MsgCreatePeriodicVestingAccountResponse;
            };
        };
    }
    const ClientFactory: {
        createRPCMsgClient: ({ rpc }: {
            rpc: import("../helpers").Rpc;
        }) => Promise<{
            cosmos: {
                authz: {
                    v1beta1: _271.MsgClientImpl;
                };
                bank: {
                    v1beta1: _272.MsgClientImpl;
                };
                crisis: {
                    v1beta1: _273.MsgClientImpl;
                };
                distribution: {
                    v1beta1: _274.MsgClientImpl;
                };
                evidence: {
                    v1beta1: _275.MsgClientImpl;
                };
                feegrant: {
                    v1beta1: _276.MsgClientImpl;
                };
                gov: {
                    v1: _277.MsgClientImpl;
                    v1beta1: _278.MsgClientImpl;
                };
                group: {
                    v1: _279.MsgClientImpl;
                };
                nft: {
                    v1beta1: _280.MsgClientImpl;
                };
                slashing: {
                    v1beta1: _281.MsgClientImpl;
                };
                staking: {
                    v1beta1: _282.MsgClientImpl;
                };
                upgrade: {
                    v1beta1: _283.MsgClientImpl;
                };
                vesting: {
                    v1beta1: _284.MsgClientImpl;
                };
            };
        }>;
        createRPCQueryClient: ({ rpcEndpoint }: {
            rpcEndpoint: string | import("@cosmjs/tendermint-rpc").HttpEndpoint;
        }) => Promise<{
            cosmos: {
                app: {
                    v1alpha1: {
                        config(request?: _48.QueryConfigRequest): Promise<_48.QueryConfigResponse>;
                    };
                };
                auth: {
                    v1beta1: {
                        accounts(request?: _51.QueryAccountsRequest): Promise<_51.QueryAccountsResponse>;
                        account(request: _51.QueryAccountRequest): Promise<_51.QueryAccountResponse>;
                        params(request?: _51.QueryParamsRequest): Promise<_51.QueryParamsResponse>;
                        moduleAccounts(request?: _51.QueryModuleAccountsRequest): Promise<_51.QueryModuleAccountsResponse>;
                        bech32Prefix(request?: _51.Bech32PrefixRequest): Promise<_51.Bech32PrefixResponse>;
                        addressBytesToString(request: _51.AddressBytesToStringRequest): Promise<_51.AddressBytesToStringResponse>;
                        addressStringToBytes(request: _51.AddressStringToBytesRequest): Promise<_51.AddressStringToBytesResponse>;
                    };
                };
                authz: {
                    v1beta1: {
                        grants(request: _55.QueryGrantsRequest): Promise<_55.QueryGrantsResponse>;
                        granterGrants(request: _55.QueryGranterGrantsRequest): Promise<_55.QueryGranterGrantsResponse>;
                        granteeGrants(request: _55.QueryGranteeGrantsRequest): Promise<_55.QueryGranteeGrantsResponse>;
                    };
                };
                bank: {
                    v1beta1: {
                        balance(request: _60.QueryBalanceRequest): Promise<_60.QueryBalanceResponse>;
                        allBalances(request: _60.QueryAllBalancesRequest): Promise<_60.QueryAllBalancesResponse>;
                        spendableBalances(request: _60.QuerySpendableBalancesRequest): Promise<_60.QuerySpendableBalancesResponse>;
                        totalSupply(request?: _60.QueryTotalSupplyRequest): Promise<_60.QueryTotalSupplyResponse>;
                        supplyOf(request: _60.QuerySupplyOfRequest): Promise<_60.QuerySupplyOfResponse>;
                        params(request?: _60.QueryParamsRequest): Promise<_60.QueryParamsResponse>;
                        denomMetadata(request: _60.QueryDenomMetadataRequest): Promise<_60.QueryDenomMetadataResponse>;
                        denomsMetadata(request?: _60.QueryDenomsMetadataRequest): Promise<_60.QueryDenomsMetadataResponse>;
                        denomOwners(request: _60.QueryDenomOwnersRequest): Promise<_60.QueryDenomOwnersResponse>;
                    };
                };
                base: {
                    tendermint: {
                        v1beta1: {
                            getNodeInfo(request?: _70.GetNodeInfoRequest): Promise<_70.GetNodeInfoResponse>;
                            getSyncing(request?: _70.GetSyncingRequest): Promise<_70.GetSyncingResponse>;
                            getLatestBlock(request?: _70.GetLatestBlockRequest): Promise<_70.GetLatestBlockResponse>;
                            getBlockByHeight(request: _70.GetBlockByHeightRequest): Promise<_70.GetBlockByHeightResponse>;
                            getLatestValidatorSet(request?: _70.GetLatestValidatorSetRequest): Promise<_70.GetLatestValidatorSetResponse>;
                            getValidatorSetByHeight(request: _70.GetValidatorSetByHeightRequest): Promise<_70.GetValidatorSetByHeightResponse>;
                        };
                    };
                };
                distribution: {
                    v1beta1: {
                        params(request?: _84.QueryParamsRequest): Promise<_84.QueryParamsResponse>;
                        validatorOutstandingRewards(request: _84.QueryValidatorOutstandingRewardsRequest): Promise<_84.QueryValidatorOutstandingRewardsResponse>;
                        validatorCommission(request: _84.QueryValidatorCommissionRequest): Promise<_84.QueryValidatorCommissionResponse>;
                        validatorSlashes(request: _84.QueryValidatorSlashesRequest): Promise<_84.QueryValidatorSlashesResponse>;
                        delegationRewards(request: _84.QueryDelegationRewardsRequest): Promise<_84.QueryDelegationRewardsResponse>;
                        delegationTotalRewards(request: _84.QueryDelegationTotalRewardsRequest): Promise<_84.QueryDelegationTotalRewardsResponse>;
                        delegatorValidators(request: _84.QueryDelegatorValidatorsRequest): Promise<_84.QueryDelegatorValidatorsResponse>;
                        delegatorWithdrawAddress(request: _84.QueryDelegatorWithdrawAddressRequest): Promise<_84.QueryDelegatorWithdrawAddressResponse>;
                        communityPool(request?: _84.QueryCommunityPoolRequest): Promise<_84.QueryCommunityPoolResponse>;
                    };
                };
                evidence: {
                    v1beta1: {
                        evidence(request: _88.QueryEvidenceRequest): Promise<_88.QueryEvidenceResponse>;
                        allEvidence(request?: _88.QueryAllEvidenceRequest): Promise<_88.QueryAllEvidenceResponse>;
                    };
                };
                feegrant: {
                    v1beta1: {
                        allowance(request: _92.QueryAllowanceRequest): Promise<_92.QueryAllowanceResponse>;
                        allowances(request: _92.QueryAllowancesRequest): Promise<_92.QueryAllowancesResponse>;
                        allowancesByGranter(request: _92.QueryAllowancesByGranterRequest): Promise<_92.QueryAllowancesByGranterResponse>;
                    };
                };
                gov: {
                    v1: {
                        proposal(request: _97.QueryProposalRequest): Promise<_97.QueryProposalResponse>;
                        proposals(request: _97.QueryProposalsRequest): Promise<_97.QueryProposalsResponse>;
                        vote(request: _97.QueryVoteRequest): Promise<_97.QueryVoteResponse>;
                        votes(request: _97.QueryVotesRequest): Promise<_97.QueryVotesResponse>;
                        params(request: _97.QueryParamsRequest): Promise<_97.QueryParamsResponse>;
                        deposit(request: _97.QueryDepositRequest): Promise<_97.QueryDepositResponse>;
                        deposits(request: _97.QueryDepositsRequest): Promise<_97.QueryDepositsResponse>;
                        tallyResult(request: _97.QueryTallyResultRequest): Promise<_97.QueryTallyResultResponse>;
                    };
                    v1beta1: {
                        proposal(request: _101.QueryProposalRequest): Promise<_101.QueryProposalResponse>;
                        proposals(request: _101.QueryProposalsRequest): Promise<_101.QueryProposalsResponse>;
                        vote(request: _101.QueryVoteRequest): Promise<_101.QueryVoteResponse>;
                        votes(request: _101.QueryVotesRequest): Promise<_101.QueryVotesResponse>;
                        params(request: _101.QueryParamsRequest): Promise<_101.QueryParamsResponse>;
                        deposit(request: _101.QueryDepositRequest): Promise<_101.QueryDepositResponse>;
                        deposits(request: _101.QueryDepositsRequest): Promise<_101.QueryDepositsResponse>;
                        tallyResult(request: _101.QueryTallyResultRequest): Promise<_101.QueryTallyResultResponse>;
                    };
                };
                group: {
                    v1: {
                        groupInfo(request: _105.QueryGroupInfoRequest): Promise<_105.QueryGroupInfoResponse>;
                        groupPolicyInfo(request: _105.QueryGroupPolicyInfoRequest): Promise<_105.QueryGroupPolicyInfoResponse>;
                        groupMembers(request: _105.QueryGroupMembersRequest): Promise<_105.QueryGroupMembersResponse>;
                        groupsByAdmin(request: _105.QueryGroupsByAdminRequest): Promise<_105.QueryGroupsByAdminResponse>;
                        groupPoliciesByGroup(request: _105.QueryGroupPoliciesByGroupRequest): Promise<_105.QueryGroupPoliciesByGroupResponse>;
                        groupPoliciesByAdmin(request: _105.QueryGroupPoliciesByAdminRequest): Promise<_105.QueryGroupPoliciesByAdminResponse>;
                        proposal(request: _105.QueryProposalRequest): Promise<_105.QueryProposalResponse>;
                        proposalsByGroupPolicy(request: _105.QueryProposalsByGroupPolicyRequest): Promise<_105.QueryProposalsByGroupPolicyResponse>;
                        voteByProposalVoter(request: _105.QueryVoteByProposalVoterRequest): Promise<_105.QueryVoteByProposalVoterResponse>;
                        votesByProposal(request: _105.QueryVotesByProposalRequest): Promise<_105.QueryVotesByProposalResponse>;
                        votesByVoter(request: _105.QueryVotesByVoterRequest): Promise<_105.QueryVotesByVoterResponse>;
                        groupsByMember(request: _105.QueryGroupsByMemberRequest): Promise<_105.QueryGroupsByMemberResponse>;
                        tallyResult(request: _105.QueryTallyResultRequest): Promise<_105.QueryTallyResultResponse>;
                    };
                };
                mint: {
                    v1beta1: {
                        params(request?: _110.QueryParamsRequest): Promise<_110.QueryParamsResponse>;
                        inflation(request?: _110.QueryInflationRequest): Promise<_110.QueryInflationResponse>;
                        annualProvisions(request?: _110.QueryAnnualProvisionsRequest): Promise<_110.QueryAnnualProvisionsResponse>;
                    };
                };
                nft: {
                    v1beta1: {
                        balance(request: _115.QueryBalanceRequest): Promise<_115.QueryBalanceResponse>;
                        owner(request: _115.QueryOwnerRequest): Promise<_115.QueryOwnerResponse>;
                        supply(request: _115.QuerySupplyRequest): Promise<_115.QuerySupplyResponse>;
                        nFTs(request: _115.QueryNFTsRequest): Promise<_115.QueryNFTsResponse>;
                        nFT(request: _115.QueryNFTRequest): Promise<_115.QueryNFTResponse>;
                        class(request: _115.QueryClassRequest): Promise<_115.QueryClassResponse>;
                        classes(request?: _115.QueryClassesRequest): Promise<_115.QueryClassesResponse>;
                    };
                };
                params: {
                    v1beta1: {
                        params(request: _120.QueryParamsRequest): Promise<_120.QueryParamsResponse>;
                        subspaces(request?: _120.QuerySubspacesRequest): Promise<_120.QuerySubspacesResponse>;
                    };
                };
                slashing: {
                    v1beta1: {
                        params(request?: _122.QueryParamsRequest): Promise<_122.QueryParamsResponse>;
                        signingInfo(request: _122.QuerySigningInfoRequest): Promise<_122.QuerySigningInfoResponse>;
                        signingInfos(request?: _122.QuerySigningInfosRequest): Promise<_122.QuerySigningInfosResponse>;
                    };
                };
                staking: {
                    v1beta1: {
                        validators(request: _127.QueryValidatorsRequest): Promise<_127.QueryValidatorsResponse>;
                        validator(request: _127.QueryValidatorRequest): Promise<_127.QueryValidatorResponse>;
                        validatorDelegations(request: _127.QueryValidatorDelegationsRequest): Promise<_127.QueryValidatorDelegationsResponse>;
                        validatorUnbondingDelegations(request: _127.QueryValidatorUnbondingDelegationsRequest): Promise<_127.QueryValidatorUnbondingDelegationsResponse>;
                        delegation(request: _127.QueryDelegationRequest): Promise<_127.QueryDelegationResponse>;
                        unbondingDelegation(request: _127.QueryUnbondingDelegationRequest): Promise<_127.QueryUnbondingDelegationResponse>;
                        delegatorDelegations(request: _127.QueryDelegatorDelegationsRequest): Promise<_127.QueryDelegatorDelegationsResponse>;
                        delegatorUnbondingDelegations(request: _127.QueryDelegatorUnbondingDelegationsRequest): Promise<_127.QueryDelegatorUnbondingDelegationsResponse>;
                        redelegations(request: _127.QueryRedelegationsRequest): Promise<_127.QueryRedelegationsResponse>;
                        delegatorValidators(request: _127.QueryDelegatorValidatorsRequest): Promise<_127.QueryDelegatorValidatorsResponse>;
                        delegatorValidator(request: _127.QueryDelegatorValidatorRequest): Promise<_127.QueryDelegatorValidatorResponse>;
                        historicalInfo(request: _127.QueryHistoricalInfoRequest): Promise<_127.QueryHistoricalInfoResponse>;
                        pool(request?: _127.QueryPoolRequest): Promise<_127.QueryPoolResponse>;
                        params(request?: _127.QueryParamsRequest): Promise<_127.QueryParamsResponse>;
                    };
                };
                tx: {
                    v1beta1: {
                        simulate(request: _131.SimulateRequest): Promise<_131.SimulateResponse>;
                        getTx(request: _131.GetTxRequest): Promise<_131.GetTxResponse>;
                        broadcastTx(request: _131.BroadcastTxRequest): Promise<_131.BroadcastTxResponse>;
                        getTxsEvent(request: _131.GetTxsEventRequest): Promise<_131.GetTxsEventResponse>;
                        getBlockWithTxs(request: _131.GetBlockWithTxsRequest): Promise<_131.GetBlockWithTxsResponse>;
                    };
                };
                upgrade: {
                    v1beta1: {
                        currentPlan(request?: _133.QueryCurrentPlanRequest): Promise<_133.QueryCurrentPlanResponse>;
                        appliedPlan(request: _133.QueryAppliedPlanRequest): Promise<_133.QueryAppliedPlanResponse>;
                        upgradedConsensusState(request: _133.QueryUpgradedConsensusStateRequest): Promise<_133.QueryUpgradedConsensusStateResponse>;
                        moduleVersions(request: _133.QueryModuleVersionsRequest): Promise<_133.QueryModuleVersionsResponse>;
                        authority(request?: _133.QueryAuthorityRequest): Promise<_133.QueryAuthorityResponse>;
                    };
                };
            };
        }>;
        createLCDClient: ({ restEndpoint }: {
            restEndpoint: string;
        }) => Promise<{
            cosmos: {
                auth: {
                    v1beta1: _236.LCDQueryClient;
                };
                authz: {
                    v1beta1: _237.LCDQueryClient;
                };
                bank: {
                    v1beta1: _238.LCDQueryClient;
                };
                base: {
                    tendermint: {
                        v1beta1: _239.LCDQueryClient;
                    };
                };
                distribution: {
                    v1beta1: _240.LCDQueryClient;
                };
                evidence: {
                    v1beta1: _241.LCDQueryClient;
                };
                feegrant: {
                    v1beta1: _242.LCDQueryClient;
                };
                gov: {
                    v1: _243.LCDQueryClient;
                    v1beta1: _244.LCDQueryClient;
                };
                group: {
                    v1: _245.LCDQueryClient;
                };
                mint: {
                    v1beta1: _246.LCDQueryClient;
                };
                nft: {
                    v1beta1: _247.LCDQueryClient;
                };
                params: {
                    v1beta1: _248.LCDQueryClient;
                };
                slashing: {
                    v1beta1: _249.LCDQueryClient;
                };
                staking: {
                    v1beta1: _250.LCDQueryClient;
                };
                tx: {
                    v1beta1: _251.LCDQueryClient;
                };
                upgrade: {
                    v1beta1: _252.LCDQueryClient;
                };
            };
        }>;
    };
}
