import * as _141 from "./api/http";
import * as _142 from "./protobuf/any";
import * as _143 from "./protobuf/descriptor";
import * as _144 from "./protobuf/duration";
import * as _145 from "./protobuf/empty";
import * as _146 from "./protobuf/timestamp";
export declare namespace google {
    const api: {
        Http: {
            encode(message: _141.Http, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _141.Http;
            fromPartial(object: {
                rules?: {
                    selector?: string;
                    get?: string;
                    put?: string;
                    post?: string;
                    delete?: string;
                    patch?: string;
                    custom?: {
                        kind?: string;
                        path?: string;
                    };
                    body?: string;
                    responseBody?: string;
                    additionalBindings?: any[];
                }[];
                fullyDecodeReservedExpansion?: boolean;
            }): _141.Http;
        };
        HttpRule: {
            encode(message: _141.HttpRule, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _141.HttpRule;
            fromPartial(object: {
                selector?: string;
                get?: string;
                put?: string;
                post?: string;
                delete?: string;
                patch?: string;
                custom?: {
                    kind?: string;
                    path?: string;
                };
                body?: string;
                responseBody?: string;
                additionalBindings?: any[];
            }): _141.HttpRule;
        };
        CustomHttpPattern: {
            encode(message: _141.CustomHttpPattern, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _141.CustomHttpPattern;
            fromPartial(object: {
                kind?: string;
                path?: string;
            }): _141.CustomHttpPattern;
        };
    };
    const protobuf: {
        Timestamp: {
            encode(message: _146.Timestamp, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _146.Timestamp;
            fromPartial(object: {
                seconds?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                nanos?: number;
            }): _146.Timestamp;
        };
        Empty: {
            encode(_: _145.Empty, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _145.Empty;
            fromPartial(_: {}): _145.Empty;
        };
        Duration: {
            encode(message: _144.Duration, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _144.Duration;
            fromPartial(object: {
                seconds?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                nanos?: number;
            }): _144.Duration;
        };
        fieldDescriptorProto_TypeFromJSON(object: any): _143.FieldDescriptorProto_Type;
        fieldDescriptorProto_TypeToJSON(object: _143.FieldDescriptorProto_Type): string;
        fieldDescriptorProto_LabelFromJSON(object: any): _143.FieldDescriptorProto_Label;
        fieldDescriptorProto_LabelToJSON(object: _143.FieldDescriptorProto_Label): string;
        fileOptions_OptimizeModeFromJSON(object: any): _143.FileOptions_OptimizeMode;
        fileOptions_OptimizeModeToJSON(object: _143.FileOptions_OptimizeMode): string;
        fieldOptions_CTypeFromJSON(object: any): _143.FieldOptions_CType;
        fieldOptions_CTypeToJSON(object: _143.FieldOptions_CType): string;
        fieldOptions_JSTypeFromJSON(object: any): _143.FieldOptions_JSType;
        fieldOptions_JSTypeToJSON(object: _143.FieldOptions_JSType): string;
        methodOptions_IdempotencyLevelFromJSON(object: any): _143.MethodOptions_IdempotencyLevel;
        methodOptions_IdempotencyLevelToJSON(object: _143.MethodOptions_IdempotencyLevel): string;
        FieldDescriptorProto_Type: typeof _143.FieldDescriptorProto_Type;
        FieldDescriptorProto_TypeSDKType: typeof _143.FieldDescriptorProto_TypeSDKType;
        FieldDescriptorProto_Label: typeof _143.FieldDescriptorProto_Label;
        FieldDescriptorProto_LabelSDKType: typeof _143.FieldDescriptorProto_LabelSDKType;
        FileOptions_OptimizeMode: typeof _143.FileOptions_OptimizeMode;
        FileOptions_OptimizeModeSDKType: typeof _143.FileOptions_OptimizeModeSDKType;
        FieldOptions_CType: typeof _143.FieldOptions_CType;
        FieldOptions_CTypeSDKType: typeof _143.FieldOptions_CTypeSDKType;
        FieldOptions_JSType: typeof _143.FieldOptions_JSType;
        FieldOptions_JSTypeSDKType: typeof _143.FieldOptions_JSTypeSDKType;
        MethodOptions_IdempotencyLevel: typeof _143.MethodOptions_IdempotencyLevel;
        MethodOptions_IdempotencyLevelSDKType: typeof _143.MethodOptions_IdempotencyLevelSDKType;
        FileDescriptorSet: {
            encode(message: _143.FileDescriptorSet, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _143.FileDescriptorSet;
            fromPartial(object: {
                file?: {
                    name?: string;
                    package?: string;
                    dependency?: string[];
                    publicDependency?: number[];
                    weakDependency?: number[];
                    messageType?: {
                        name?: string;
                        field?: {
                            name?: string;
                            number?: number;
                            label?: _143.FieldDescriptorProto_Label;
                            type?: _143.FieldDescriptorProto_Type;
                            typeName?: string;
                            extendee?: string;
                            defaultValue?: string;
                            oneofIndex?: number;
                            jsonName?: string;
                            options?: {
                                ctype?: _143.FieldOptions_CType;
                                packed?: boolean;
                                jstype?: _143.FieldOptions_JSType;
                                lazy?: boolean;
                                deprecated?: boolean;
                                weak?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                        and?: (other: string | number | import("long").default) => import("long").default;
                                        compare?: (other: string | number | import("long").default) => number;
                                        comp?: (other: string | number | import("long").default) => number;
                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                        equals?: (other: string | number | import("long").default) => boolean;
                                        eq?: (other: string | number | import("long").default) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                        gt?: (other: string | number | import("long").default) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        gte?: (other: string | number | import("long").default) => boolean;
                                        ge?: (other: string | number | import("long").default) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                        lt?: (other: string | number | import("long").default) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        lte?: (other: string | number | import("long").default) => boolean;
                                        le?: (other: string | number | import("long").default) => boolean;
                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                        negate?: () => import("long").default;
                                        neg?: () => import("long").default;
                                        not?: () => import("long").default;
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                        neq?: (other: string | number | import("long").default) => boolean;
                                        ne?: (other: string | number | import("long").default) => boolean;
                                        or?: (other: string | number | import("long").default) => import("long").default;
                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long").default;
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long").default;
                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                    };
                                    negativeIntValue?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                        and?: (other: string | number | import("long").default) => import("long").default;
                                        compare?: (other: string | number | import("long").default) => number;
                                        comp?: (other: string | number | import("long").default) => number;
                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                        equals?: (other: string | number | import("long").default) => boolean;
                                        eq?: (other: string | number | import("long").default) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                        gt?: (other: string | number | import("long").default) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        gte?: (other: string | number | import("long").default) => boolean;
                                        ge?: (other: string | number | import("long").default) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                        lt?: (other: string | number | import("long").default) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        lte?: (other: string | number | import("long").default) => boolean;
                                        le?: (other: string | number | import("long").default) => boolean;
                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                        negate?: () => import("long").default;
                                        neg?: () => import("long").default;
                                        not?: () => import("long").default;
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                        neq?: (other: string | number | import("long").default) => boolean;
                                        ne?: (other: string | number | import("long").default) => boolean;
                                        or?: (other: string | number | import("long").default) => import("long").default;
                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long").default;
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long").default;
                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                    };
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[];
                        extension?: {
                            name?: string;
                            number?: number;
                            label?: _143.FieldDescriptorProto_Label;
                            type?: _143.FieldDescriptorProto_Type;
                            typeName?: string;
                            extendee?: string;
                            defaultValue?: string;
                            oneofIndex?: number;
                            jsonName?: string;
                            options?: {
                                ctype?: _143.FieldOptions_CType;
                                packed?: boolean;
                                jstype?: _143.FieldOptions_JSType;
                                lazy?: boolean;
                                deprecated?: boolean;
                                weak?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                        and?: (other: string | number | import("long").default) => import("long").default;
                                        compare?: (other: string | number | import("long").default) => number;
                                        comp?: (other: string | number | import("long").default) => number;
                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                        equals?: (other: string | number | import("long").default) => boolean;
                                        eq?: (other: string | number | import("long").default) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                        gt?: (other: string | number | import("long").default) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        gte?: (other: string | number | import("long").default) => boolean;
                                        ge?: (other: string | number | import("long").default) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                        lt?: (other: string | number | import("long").default) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        lte?: (other: string | number | import("long").default) => boolean;
                                        le?: (other: string | number | import("long").default) => boolean;
                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                        negate?: () => import("long").default;
                                        neg?: () => import("long").default;
                                        not?: () => import("long").default;
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                        neq?: (other: string | number | import("long").default) => boolean;
                                        ne?: (other: string | number | import("long").default) => boolean;
                                        or?: (other: string | number | import("long").default) => import("long").default;
                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long").default;
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long").default;
                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                    };
                                    negativeIntValue?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                        and?: (other: string | number | import("long").default) => import("long").default;
                                        compare?: (other: string | number | import("long").default) => number;
                                        comp?: (other: string | number | import("long").default) => number;
                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                        equals?: (other: string | number | import("long").default) => boolean;
                                        eq?: (other: string | number | import("long").default) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                        gt?: (other: string | number | import("long").default) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        gte?: (other: string | number | import("long").default) => boolean;
                                        ge?: (other: string | number | import("long").default) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                        lt?: (other: string | number | import("long").default) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        lte?: (other: string | number | import("long").default) => boolean;
                                        le?: (other: string | number | import("long").default) => boolean;
                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                        negate?: () => import("long").default;
                                        neg?: () => import("long").default;
                                        not?: () => import("long").default;
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                        neq?: (other: string | number | import("long").default) => boolean;
                                        ne?: (other: string | number | import("long").default) => boolean;
                                        or?: (other: string | number | import("long").default) => import("long").default;
                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long").default;
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long").default;
                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                    };
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[];
                        nestedType?: any[];
                        enumType?: {
                            name?: string;
                            value?: {
                                name?: string;
                                number?: number;
                                options?: {
                                    deprecated?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: {
                                            high?: number;
                                            low?: number;
                                            unsigned?: boolean;
                                            add?: (addend: string | number | import("long").default) => import("long").default;
                                            and?: (other: string | number | import("long").default) => import("long").default;
                                            compare?: (other: string | number | import("long").default) => number;
                                            comp?: (other: string | number | import("long").default) => number;
                                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                                            div?: (divisor: string | number | import("long").default) => import("long").default;
                                            equals?: (other: string | number | import("long").default) => boolean;
                                            eq?: (other: string | number | import("long").default) => boolean;
                                            getHighBits?: () => number;
                                            getHighBitsUnsigned?: () => number;
                                            getLowBits?: () => number;
                                            getLowBitsUnsigned?: () => number;
                                            getNumBitsAbs?: () => number;
                                            greaterThan?: (other: string | number | import("long").default) => boolean;
                                            gt?: (other: string | number | import("long").default) => boolean;
                                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            gte?: (other: string | number | import("long").default) => boolean;
                                            ge?: (other: string | number | import("long").default) => boolean;
                                            isEven?: () => boolean;
                                            isNegative?: () => boolean;
                                            isOdd?: () => boolean;
                                            isPositive?: () => boolean;
                                            isZero?: () => boolean;
                                            eqz?: () => boolean;
                                            lessThan?: (other: string | number | import("long").default) => boolean;
                                            lt?: (other: string | number | import("long").default) => boolean;
                                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            lte?: (other: string | number | import("long").default) => boolean;
                                            le?: (other: string | number | import("long").default) => boolean;
                                            modulo?: (other: string | number | import("long").default) => import("long").default;
                                            mod?: (other: string | number | import("long").default) => import("long").default;
                                            rem?: (other: string | number | import("long").default) => import("long").default;
                                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                            negate?: () => import("long").default;
                                            neg?: () => import("long").default;
                                            not?: () => import("long").default;
                                            countLeadingZeros?: () => number;
                                            clz?: () => number;
                                            countTrailingZeros?: () => number;
                                            ctz?: () => number;
                                            notEquals?: (other: string | number | import("long").default) => boolean;
                                            neq?: (other: string | number | import("long").default) => boolean;
                                            ne?: (other: string | number | import("long").default) => boolean;
                                            or?: (other: string | number | import("long").default) => import("long").default;
                                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                            shl?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                            shr?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                            shru?: (numBits: number | import("long").default) => import("long").default;
                                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                            rotl?: (numBits: number | import("long").default) => import("long").default;
                                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                            rotr?: (numBits: number | import("long").default) => import("long").default;
                                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            toInt?: () => number;
                                            toNumber?: () => number;
                                            toBytes?: (le?: boolean) => number[];
                                            toBytesLE?: () => number[];
                                            toBytesBE?: () => number[];
                                            toSigned?: () => import("long").default;
                                            toString?: (radix?: number) => string;
                                            toUnsigned?: () => import("long").default;
                                            xor?: (other: string | number | import("long").default) => import("long").default;
                                        };
                                        negativeIntValue?: {
                                            high?: number;
                                            low?: number;
                                            unsigned?: boolean;
                                            add?: (addend: string | number | import("long").default) => import("long").default;
                                            and?: (other: string | number | import("long").default) => import("long").default;
                                            compare?: (other: string | number | import("long").default) => number;
                                            comp?: (other: string | number | import("long").default) => number;
                                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                                            div?: (divisor: string | number | import("long").default) => import("long").default;
                                            equals?: (other: string | number | import("long").default) => boolean;
                                            eq?: (other: string | number | import("long").default) => boolean;
                                            getHighBits?: () => number;
                                            getHighBitsUnsigned?: () => number;
                                            getLowBits?: () => number;
                                            getLowBitsUnsigned?: () => number;
                                            getNumBitsAbs?: () => number;
                                            greaterThan?: (other: string | number | import("long").default) => boolean;
                                            gt?: (other: string | number | import("long").default) => boolean;
                                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            gte?: (other: string | number | import("long").default) => boolean;
                                            ge?: (other: string | number | import("long").default) => boolean;
                                            isEven?: () => boolean;
                                            isNegative?: () => boolean;
                                            isOdd?: () => boolean;
                                            isPositive?: () => boolean;
                                            isZero?: () => boolean;
                                            eqz?: () => boolean;
                                            lessThan?: (other: string | number | import("long").default) => boolean;
                                            lt?: (other: string | number | import("long").default) => boolean;
                                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                            lte?: (other: string | number | import("long").default) => boolean;
                                            le?: (other: string | number | import("long").default) => boolean;
                                            modulo?: (other: string | number | import("long").default) => import("long").default;
                                            mod?: (other: string | number | import("long").default) => import("long").default;
                                            rem?: (other: string | number | import("long").default) => import("long").default;
                                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                            negate?: () => import("long").default;
                                            neg?: () => import("long").default;
                                            not?: () => import("long").default;
                                            countLeadingZeros?: () => number;
                                            clz?: () => number;
                                            countTrailingZeros?: () => number;
                                            ctz?: () => number;
                                            notEquals?: (other: string | number | import("long").default) => boolean;
                                            neq?: (other: string | number | import("long").default) => boolean;
                                            ne?: (other: string | number | import("long").default) => boolean;
                                            or?: (other: string | number | import("long").default) => import("long").default;
                                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                            shl?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                            shr?: (numBits: number | import("long").default) => import("long").default;
                                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                            shru?: (numBits: number | import("long").default) => import("long").default;
                                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                            rotl?: (numBits: number | import("long").default) => import("long").default;
                                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                            rotr?: (numBits: number | import("long").default) => import("long").default;
                                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                            toInt?: () => number;
                                            toNumber?: () => number;
                                            toBytes?: (le?: boolean) => number[];
                                            toBytesLE?: () => number[];
                                            toBytesBE?: () => number[];
                                            toSigned?: () => import("long").default;
                                            toString?: (radix?: number) => string;
                                            toUnsigned?: () => import("long").default;
                                            xor?: (other: string | number | import("long").default) => import("long").default;
                                        };
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[];
                            options?: {
                                allowAlias?: boolean;
                                deprecated?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                        and?: (other: string | number | import("long").default) => import("long").default;
                                        compare?: (other: string | number | import("long").default) => number;
                                        comp?: (other: string | number | import("long").default) => number;
                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                        equals?: (other: string | number | import("long").default) => boolean;
                                        eq?: (other: string | number | import("long").default) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                        gt?: (other: string | number | import("long").default) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        gte?: (other: string | number | import("long").default) => boolean;
                                        ge?: (other: string | number | import("long").default) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                        lt?: (other: string | number | import("long").default) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        lte?: (other: string | number | import("long").default) => boolean;
                                        le?: (other: string | number | import("long").default) => boolean;
                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                        negate?: () => import("long").default;
                                        neg?: () => import("long").default;
                                        not?: () => import("long").default;
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                        neq?: (other: string | number | import("long").default) => boolean;
                                        ne?: (other: string | number | import("long").default) => boolean;
                                        or?: (other: string | number | import("long").default) => import("long").default;
                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long").default;
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long").default;
                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                    };
                                    negativeIntValue?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                        and?: (other: string | number | import("long").default) => import("long").default;
                                        compare?: (other: string | number | import("long").default) => number;
                                        comp?: (other: string | number | import("long").default) => number;
                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                        equals?: (other: string | number | import("long").default) => boolean;
                                        eq?: (other: string | number | import("long").default) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                        gt?: (other: string | number | import("long").default) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        gte?: (other: string | number | import("long").default) => boolean;
                                        ge?: (other: string | number | import("long").default) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                        lt?: (other: string | number | import("long").default) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        lte?: (other: string | number | import("long").default) => boolean;
                                        le?: (other: string | number | import("long").default) => boolean;
                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                        negate?: () => import("long").default;
                                        neg?: () => import("long").default;
                                        not?: () => import("long").default;
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                        neq?: (other: string | number | import("long").default) => boolean;
                                        ne?: (other: string | number | import("long").default) => boolean;
                                        or?: (other: string | number | import("long").default) => import("long").default;
                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long").default;
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long").default;
                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                    };
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                            reservedRange?: {
                                start?: number;
                                end?: number;
                            }[];
                            reservedName?: string[];
                        }[];
                        extensionRange?: {
                            start?: number;
                            end?: number;
                            options?: {
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                        and?: (other: string | number | import("long").default) => import("long").default;
                                        compare?: (other: string | number | import("long").default) => number;
                                        comp?: (other: string | number | import("long").default) => number;
                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                        equals?: (other: string | number | import("long").default) => boolean;
                                        eq?: (other: string | number | import("long").default) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                        gt?: (other: string | number | import("long").default) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        gte?: (other: string | number | import("long").default) => boolean;
                                        ge?: (other: string | number | import("long").default) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                        lt?: (other: string | number | import("long").default) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        lte?: (other: string | number | import("long").default) => boolean;
                                        le?: (other: string | number | import("long").default) => boolean;
                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                        negate?: () => import("long").default;
                                        neg?: () => import("long").default;
                                        not?: () => import("long").default;
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                        neq?: (other: string | number | import("long").default) => boolean;
                                        ne?: (other: string | number | import("long").default) => boolean;
                                        or?: (other: string | number | import("long").default) => import("long").default;
                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long").default;
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long").default;
                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                    };
                                    negativeIntValue?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                        and?: (other: string | number | import("long").default) => import("long").default;
                                        compare?: (other: string | number | import("long").default) => number;
                                        comp?: (other: string | number | import("long").default) => number;
                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                        equals?: (other: string | number | import("long").default) => boolean;
                                        eq?: (other: string | number | import("long").default) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                        gt?: (other: string | number | import("long").default) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        gte?: (other: string | number | import("long").default) => boolean;
                                        ge?: (other: string | number | import("long").default) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                        lt?: (other: string | number | import("long").default) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        lte?: (other: string | number | import("long").default) => boolean;
                                        le?: (other: string | number | import("long").default) => boolean;
                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                        negate?: () => import("long").default;
                                        neg?: () => import("long").default;
                                        not?: () => import("long").default;
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                        neq?: (other: string | number | import("long").default) => boolean;
                                        ne?: (other: string | number | import("long").default) => boolean;
                                        or?: (other: string | number | import("long").default) => import("long").default;
                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long").default;
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long").default;
                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                    };
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[];
                        oneofDecl?: {
                            name?: string;
                            options?: {
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                        and?: (other: string | number | import("long").default) => import("long").default;
                                        compare?: (other: string | number | import("long").default) => number;
                                        comp?: (other: string | number | import("long").default) => number;
                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                        equals?: (other: string | number | import("long").default) => boolean;
                                        eq?: (other: string | number | import("long").default) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                        gt?: (other: string | number | import("long").default) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        gte?: (other: string | number | import("long").default) => boolean;
                                        ge?: (other: string | number | import("long").default) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                        lt?: (other: string | number | import("long").default) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        lte?: (other: string | number | import("long").default) => boolean;
                                        le?: (other: string | number | import("long").default) => boolean;
                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                        negate?: () => import("long").default;
                                        neg?: () => import("long").default;
                                        not?: () => import("long").default;
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                        neq?: (other: string | number | import("long").default) => boolean;
                                        ne?: (other: string | number | import("long").default) => boolean;
                                        or?: (other: string | number | import("long").default) => import("long").default;
                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long").default;
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long").default;
                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                    };
                                    negativeIntValue?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                        and?: (other: string | number | import("long").default) => import("long").default;
                                        compare?: (other: string | number | import("long").default) => number;
                                        comp?: (other: string | number | import("long").default) => number;
                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                        equals?: (other: string | number | import("long").default) => boolean;
                                        eq?: (other: string | number | import("long").default) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                        gt?: (other: string | number | import("long").default) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        gte?: (other: string | number | import("long").default) => boolean;
                                        ge?: (other: string | number | import("long").default) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                        lt?: (other: string | number | import("long").default) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        lte?: (other: string | number | import("long").default) => boolean;
                                        le?: (other: string | number | import("long").default) => boolean;
                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                        negate?: () => import("long").default;
                                        neg?: () => import("long").default;
                                        not?: () => import("long").default;
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                        neq?: (other: string | number | import("long").default) => boolean;
                                        ne?: (other: string | number | import("long").default) => boolean;
                                        or?: (other: string | number | import("long").default) => import("long").default;
                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long").default;
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long").default;
                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                    };
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[];
                        options?: {
                            messageSetWireFormat?: boolean;
                            noStandardDescriptorAccessor?: boolean;
                            deprecated?: boolean;
                            mapEntry?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                negativeIntValue?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                        reservedRange?: {
                            start?: number;
                            end?: number;
                        }[];
                        reservedName?: string[];
                    }[];
                    enumType?: {
                        name?: string;
                        value?: {
                            name?: string;
                            number?: number;
                            options?: {
                                deprecated?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                        and?: (other: string | number | import("long").default) => import("long").default;
                                        compare?: (other: string | number | import("long").default) => number;
                                        comp?: (other: string | number | import("long").default) => number;
                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                        equals?: (other: string | number | import("long").default) => boolean;
                                        eq?: (other: string | number | import("long").default) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                        gt?: (other: string | number | import("long").default) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        gte?: (other: string | number | import("long").default) => boolean;
                                        ge?: (other: string | number | import("long").default) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                        lt?: (other: string | number | import("long").default) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        lte?: (other: string | number | import("long").default) => boolean;
                                        le?: (other: string | number | import("long").default) => boolean;
                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                        negate?: () => import("long").default;
                                        neg?: () => import("long").default;
                                        not?: () => import("long").default;
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                        neq?: (other: string | number | import("long").default) => boolean;
                                        ne?: (other: string | number | import("long").default) => boolean;
                                        or?: (other: string | number | import("long").default) => import("long").default;
                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long").default;
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long").default;
                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                    };
                                    negativeIntValue?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                        and?: (other: string | number | import("long").default) => import("long").default;
                                        compare?: (other: string | number | import("long").default) => number;
                                        comp?: (other: string | number | import("long").default) => number;
                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                        equals?: (other: string | number | import("long").default) => boolean;
                                        eq?: (other: string | number | import("long").default) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                        gt?: (other: string | number | import("long").default) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        gte?: (other: string | number | import("long").default) => boolean;
                                        ge?: (other: string | number | import("long").default) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                        lt?: (other: string | number | import("long").default) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        lte?: (other: string | number | import("long").default) => boolean;
                                        le?: (other: string | number | import("long").default) => boolean;
                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                        negate?: () => import("long").default;
                                        neg?: () => import("long").default;
                                        not?: () => import("long").default;
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                        neq?: (other: string | number | import("long").default) => boolean;
                                        ne?: (other: string | number | import("long").default) => boolean;
                                        or?: (other: string | number | import("long").default) => import("long").default;
                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long").default;
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long").default;
                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                    };
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[];
                        options?: {
                            allowAlias?: boolean;
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                negativeIntValue?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                        reservedRange?: {
                            start?: number;
                            end?: number;
                        }[];
                        reservedName?: string[];
                    }[];
                    service?: {
                        name?: string;
                        method?: {
                            name?: string;
                            inputType?: string;
                            outputType?: string;
                            options?: {
                                deprecated?: boolean;
                                idempotencyLevel?: _143.MethodOptions_IdempotencyLevel;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                        and?: (other: string | number | import("long").default) => import("long").default;
                                        compare?: (other: string | number | import("long").default) => number;
                                        comp?: (other: string | number | import("long").default) => number;
                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                        equals?: (other: string | number | import("long").default) => boolean;
                                        eq?: (other: string | number | import("long").default) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                        gt?: (other: string | number | import("long").default) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        gte?: (other: string | number | import("long").default) => boolean;
                                        ge?: (other: string | number | import("long").default) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                        lt?: (other: string | number | import("long").default) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        lte?: (other: string | number | import("long").default) => boolean;
                                        le?: (other: string | number | import("long").default) => boolean;
                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                        negate?: () => import("long").default;
                                        neg?: () => import("long").default;
                                        not?: () => import("long").default;
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                        neq?: (other: string | number | import("long").default) => boolean;
                                        ne?: (other: string | number | import("long").default) => boolean;
                                        or?: (other: string | number | import("long").default) => import("long").default;
                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long").default;
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long").default;
                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                    };
                                    negativeIntValue?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                        and?: (other: string | number | import("long").default) => import("long").default;
                                        compare?: (other: string | number | import("long").default) => number;
                                        comp?: (other: string | number | import("long").default) => number;
                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                        equals?: (other: string | number | import("long").default) => boolean;
                                        eq?: (other: string | number | import("long").default) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                        gt?: (other: string | number | import("long").default) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        gte?: (other: string | number | import("long").default) => boolean;
                                        ge?: (other: string | number | import("long").default) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                        lt?: (other: string | number | import("long").default) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        lte?: (other: string | number | import("long").default) => boolean;
                                        le?: (other: string | number | import("long").default) => boolean;
                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                        negate?: () => import("long").default;
                                        neg?: () => import("long").default;
                                        not?: () => import("long").default;
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                        neq?: (other: string | number | import("long").default) => boolean;
                                        ne?: (other: string | number | import("long").default) => boolean;
                                        or?: (other: string | number | import("long").default) => import("long").default;
                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long").default;
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long").default;
                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                    };
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                            clientStreaming?: boolean;
                            serverStreaming?: boolean;
                        }[];
                        options?: {
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                negativeIntValue?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    extension?: {
                        name?: string;
                        number?: number;
                        label?: _143.FieldDescriptorProto_Label;
                        type?: _143.FieldDescriptorProto_Type;
                        typeName?: string;
                        extendee?: string;
                        defaultValue?: string;
                        oneofIndex?: number;
                        jsonName?: string;
                        options?: {
                            ctype?: _143.FieldOptions_CType;
                            packed?: boolean;
                            jstype?: _143.FieldOptions_JSType;
                            lazy?: boolean;
                            deprecated?: boolean;
                            weak?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                negativeIntValue?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    options?: {
                        javaPackage?: string;
                        javaOuterClassname?: string;
                        javaMultipleFiles?: boolean;
                        javaGenerateEqualsAndHash?: boolean;
                        javaStringCheckUtf8?: boolean;
                        optimizeFor?: _143.FileOptions_OptimizeMode;
                        goPackage?: string;
                        ccGenericServices?: boolean;
                        javaGenericServices?: boolean;
                        pyGenericServices?: boolean;
                        phpGenericServices?: boolean;
                        deprecated?: boolean;
                        ccEnableArenas?: boolean;
                        objcClassPrefix?: string;
                        csharpNamespace?: string;
                        swiftPrefix?: string;
                        phpClassPrefix?: string;
                        phpNamespace?: string;
                        phpMetadataNamespace?: string;
                        rubyPackage?: string;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            negativeIntValue?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    sourceCodeInfo?: {
                        location?: {
                            path?: number[];
                            span?: number[];
                            leadingComments?: string;
                            trailingComments?: string;
                            leadingDetachedComments?: string[];
                        }[];
                    };
                    syntax?: string;
                }[];
            }): _143.FileDescriptorSet;
        };
        FileDescriptorProto: {
            encode(message: _143.FileDescriptorProto, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _143.FileDescriptorProto;
            fromPartial(object: {
                name?: string;
                package?: string;
                dependency?: string[];
                publicDependency?: number[];
                weakDependency?: number[];
                messageType?: {
                    name?: string;
                    field?: {
                        name?: string;
                        number?: number;
                        label?: _143.FieldDescriptorProto_Label;
                        type?: _143.FieldDescriptorProto_Type;
                        typeName?: string;
                        extendee?: string;
                        defaultValue?: string;
                        oneofIndex?: number;
                        jsonName?: string;
                        options?: {
                            ctype?: _143.FieldOptions_CType;
                            packed?: boolean;
                            jstype?: _143.FieldOptions_JSType;
                            lazy?: boolean;
                            deprecated?: boolean;
                            weak?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                negativeIntValue?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    extension?: {
                        name?: string;
                        number?: number;
                        label?: _143.FieldDescriptorProto_Label;
                        type?: _143.FieldDescriptorProto_Type;
                        typeName?: string;
                        extendee?: string;
                        defaultValue?: string;
                        oneofIndex?: number;
                        jsonName?: string;
                        options?: {
                            ctype?: _143.FieldOptions_CType;
                            packed?: boolean;
                            jstype?: _143.FieldOptions_JSType;
                            lazy?: boolean;
                            deprecated?: boolean;
                            weak?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                negativeIntValue?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    nestedType?: any[];
                    enumType?: {
                        name?: string;
                        value?: {
                            name?: string;
                            number?: number;
                            options?: {
                                deprecated?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                        and?: (other: string | number | import("long").default) => import("long").default;
                                        compare?: (other: string | number | import("long").default) => number;
                                        comp?: (other: string | number | import("long").default) => number;
                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                        equals?: (other: string | number | import("long").default) => boolean;
                                        eq?: (other: string | number | import("long").default) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                        gt?: (other: string | number | import("long").default) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        gte?: (other: string | number | import("long").default) => boolean;
                                        ge?: (other: string | number | import("long").default) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                        lt?: (other: string | number | import("long").default) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        lte?: (other: string | number | import("long").default) => boolean;
                                        le?: (other: string | number | import("long").default) => boolean;
                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                        negate?: () => import("long").default;
                                        neg?: () => import("long").default;
                                        not?: () => import("long").default;
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                        neq?: (other: string | number | import("long").default) => boolean;
                                        ne?: (other: string | number | import("long").default) => boolean;
                                        or?: (other: string | number | import("long").default) => import("long").default;
                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long").default;
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long").default;
                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                    };
                                    negativeIntValue?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long").default) => import("long").default;
                                        and?: (other: string | number | import("long").default) => import("long").default;
                                        compare?: (other: string | number | import("long").default) => number;
                                        comp?: (other: string | number | import("long").default) => number;
                                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                                        div?: (divisor: string | number | import("long").default) => import("long").default;
                                        equals?: (other: string | number | import("long").default) => boolean;
                                        eq?: (other: string | number | import("long").default) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long").default) => boolean;
                                        gt?: (other: string | number | import("long").default) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        gte?: (other: string | number | import("long").default) => boolean;
                                        ge?: (other: string | number | import("long").default) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long").default) => boolean;
                                        lt?: (other: string | number | import("long").default) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                        lte?: (other: string | number | import("long").default) => boolean;
                                        le?: (other: string | number | import("long").default) => boolean;
                                        modulo?: (other: string | number | import("long").default) => import("long").default;
                                        mod?: (other: string | number | import("long").default) => import("long").default;
                                        rem?: (other: string | number | import("long").default) => import("long").default;
                                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                        negate?: () => import("long").default;
                                        neg?: () => import("long").default;
                                        not?: () => import("long").default;
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long").default) => boolean;
                                        neq?: (other: string | number | import("long").default) => boolean;
                                        ne?: (other: string | number | import("long").default) => boolean;
                                        or?: (other: string | number | import("long").default) => import("long").default;
                                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                        shl?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                        shr?: (numBits: number | import("long").default) => import("long").default;
                                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                        shru?: (numBits: number | import("long").default) => import("long").default;
                                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                        rotl?: (numBits: number | import("long").default) => import("long").default;
                                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                        rotr?: (numBits: number | import("long").default) => import("long").default;
                                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long").default;
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long").default;
                                        xor?: (other: string | number | import("long").default) => import("long").default;
                                    };
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[];
                        options?: {
                            allowAlias?: boolean;
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                negativeIntValue?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                        reservedRange?: {
                            start?: number;
                            end?: number;
                        }[];
                        reservedName?: string[];
                    }[];
                    extensionRange?: {
                        start?: number;
                        end?: number;
                        options?: {
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                negativeIntValue?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    oneofDecl?: {
                        name?: string;
                        options?: {
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                negativeIntValue?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    options?: {
                        messageSetWireFormat?: boolean;
                        noStandardDescriptorAccessor?: boolean;
                        deprecated?: boolean;
                        mapEntry?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            negativeIntValue?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    reservedRange?: {
                        start?: number;
                        end?: number;
                    }[];
                    reservedName?: string[];
                }[];
                enumType?: {
                    name?: string;
                    value?: {
                        name?: string;
                        number?: number;
                        options?: {
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                negativeIntValue?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    options?: {
                        allowAlias?: boolean;
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            negativeIntValue?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    reservedRange?: {
                        start?: number;
                        end?: number;
                    }[];
                    reservedName?: string[];
                }[];
                service?: {
                    name?: string;
                    method?: {
                        name?: string;
                        inputType?: string;
                        outputType?: string;
                        options?: {
                            deprecated?: boolean;
                            idempotencyLevel?: _143.MethodOptions_IdempotencyLevel;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                negativeIntValue?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                        clientStreaming?: boolean;
                        serverStreaming?: boolean;
                    }[];
                    options?: {
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            negativeIntValue?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                extension?: {
                    name?: string;
                    number?: number;
                    label?: _143.FieldDescriptorProto_Label;
                    type?: _143.FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: _143.FieldOptions_CType;
                        packed?: boolean;
                        jstype?: _143.FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            negativeIntValue?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                options?: {
                    javaPackage?: string;
                    javaOuterClassname?: string;
                    javaMultipleFiles?: boolean;
                    javaGenerateEqualsAndHash?: boolean;
                    javaStringCheckUtf8?: boolean;
                    optimizeFor?: _143.FileOptions_OptimizeMode;
                    goPackage?: string;
                    ccGenericServices?: boolean;
                    javaGenericServices?: boolean;
                    pyGenericServices?: boolean;
                    phpGenericServices?: boolean;
                    deprecated?: boolean;
                    ccEnableArenas?: boolean;
                    objcClassPrefix?: string;
                    csharpNamespace?: string;
                    swiftPrefix?: string;
                    phpClassPrefix?: string;
                    phpNamespace?: string;
                    phpMetadataNamespace?: string;
                    rubyPackage?: string;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        negativeIntValue?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
                sourceCodeInfo?: {
                    location?: {
                        path?: number[];
                        span?: number[];
                        leadingComments?: string;
                        trailingComments?: string;
                        leadingDetachedComments?: string[];
                    }[];
                };
                syntax?: string;
            }): _143.FileDescriptorProto;
        };
        DescriptorProto: {
            encode(message: _143.DescriptorProto, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _143.DescriptorProto;
            fromPartial(object: {
                name?: string;
                field?: {
                    name?: string;
                    number?: number;
                    label?: _143.FieldDescriptorProto_Label;
                    type?: _143.FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: _143.FieldOptions_CType;
                        packed?: boolean;
                        jstype?: _143.FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            negativeIntValue?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                extension?: {
                    name?: string;
                    number?: number;
                    label?: _143.FieldDescriptorProto_Label;
                    type?: _143.FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: _143.FieldOptions_CType;
                        packed?: boolean;
                        jstype?: _143.FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            negativeIntValue?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                nestedType?: any[];
                enumType?: {
                    name?: string;
                    value?: {
                        name?: string;
                        number?: number;
                        options?: {
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                negativeIntValue?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long").default) => import("long").default;
                                    and?: (other: string | number | import("long").default) => import("long").default;
                                    compare?: (other: string | number | import("long").default) => number;
                                    comp?: (other: string | number | import("long").default) => number;
                                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                                    div?: (divisor: string | number | import("long").default) => import("long").default;
                                    equals?: (other: string | number | import("long").default) => boolean;
                                    eq?: (other: string | number | import("long").default) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long").default) => boolean;
                                    gt?: (other: string | number | import("long").default) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    gte?: (other: string | number | import("long").default) => boolean;
                                    ge?: (other: string | number | import("long").default) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long").default) => boolean;
                                    lt?: (other: string | number | import("long").default) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                    lte?: (other: string | number | import("long").default) => boolean;
                                    le?: (other: string | number | import("long").default) => boolean;
                                    modulo?: (other: string | number | import("long").default) => import("long").default;
                                    mod?: (other: string | number | import("long").default) => import("long").default;
                                    rem?: (other: string | number | import("long").default) => import("long").default;
                                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                    negate?: () => import("long").default;
                                    neg?: () => import("long").default;
                                    not?: () => import("long").default;
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long").default) => boolean;
                                    neq?: (other: string | number | import("long").default) => boolean;
                                    ne?: (other: string | number | import("long").default) => boolean;
                                    or?: (other: string | number | import("long").default) => import("long").default;
                                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                    shl?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                    shr?: (numBits: number | import("long").default) => import("long").default;
                                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                    shru?: (numBits: number | import("long").default) => import("long").default;
                                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                    rotl?: (numBits: number | import("long").default) => import("long").default;
                                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                    rotr?: (numBits: number | import("long").default) => import("long").default;
                                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long").default;
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long").default;
                                    xor?: (other: string | number | import("long").default) => import("long").default;
                                };
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    options?: {
                        allowAlias?: boolean;
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            negativeIntValue?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    reservedRange?: {
                        start?: number;
                        end?: number;
                    }[];
                    reservedName?: string[];
                }[];
                extensionRange?: {
                    start?: number;
                    end?: number;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            negativeIntValue?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                oneofDecl?: {
                    name?: string;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            negativeIntValue?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                options?: {
                    messageSetWireFormat?: boolean;
                    noStandardDescriptorAccessor?: boolean;
                    deprecated?: boolean;
                    mapEntry?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        negativeIntValue?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
                reservedRange?: {
                    start?: number;
                    end?: number;
                }[];
                reservedName?: string[];
            }): _143.DescriptorProto;
        };
        DescriptorProto_ExtensionRange: {
            encode(message: _143.DescriptorProto_ExtensionRange, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _143.DescriptorProto_ExtensionRange;
            fromPartial(object: {
                start?: number;
                end?: number;
                options?: {
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        negativeIntValue?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
            }): _143.DescriptorProto_ExtensionRange;
        };
        DescriptorProto_ReservedRange: {
            encode(message: _143.DescriptorProto_ReservedRange, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _143.DescriptorProto_ReservedRange;
            fromPartial(object: {
                start?: number;
                end?: number;
            }): _143.DescriptorProto_ReservedRange;
        };
        ExtensionRangeOptions: {
            encode(message: _143.ExtensionRangeOptions, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _143.ExtensionRangeOptions;
            fromPartial(object: {
                uninterpretedOption?: {
                    name?: {
                        namePart?: string;
                        isExtension?: boolean;
                    }[];
                    identifierValue?: string;
                    positiveIntValue?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    negativeIntValue?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    doubleValue?: number;
                    stringValue?: Uint8Array;
                    aggregateValue?: string;
                }[];
            }): _143.ExtensionRangeOptions;
        };
        FieldDescriptorProto: {
            encode(message: _143.FieldDescriptorProto, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _143.FieldDescriptorProto;
            fromPartial(object: {
                name?: string;
                number?: number;
                label?: _143.FieldDescriptorProto_Label;
                type?: _143.FieldDescriptorProto_Type;
                typeName?: string;
                extendee?: string;
                defaultValue?: string;
                oneofIndex?: number;
                jsonName?: string;
                options?: {
                    ctype?: _143.FieldOptions_CType;
                    packed?: boolean;
                    jstype?: _143.FieldOptions_JSType;
                    lazy?: boolean;
                    deprecated?: boolean;
                    weak?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        negativeIntValue?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
            }): _143.FieldDescriptorProto;
        };
        OneofDescriptorProto: {
            encode(message: _143.OneofDescriptorProto, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _143.OneofDescriptorProto;
            fromPartial(object: {
                name?: string;
                options?: {
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        negativeIntValue?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
            }): _143.OneofDescriptorProto;
        };
        EnumDescriptorProto: {
            encode(message: _143.EnumDescriptorProto, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _143.EnumDescriptorProto;
            fromPartial(object: {
                name?: string;
                value?: {
                    name?: string;
                    number?: number;
                    options?: {
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            negativeIntValue?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                options?: {
                    allowAlias?: boolean;
                    deprecated?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        negativeIntValue?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
                reservedRange?: {
                    start?: number;
                    end?: number;
                }[];
                reservedName?: string[];
            }): _143.EnumDescriptorProto;
        };
        EnumDescriptorProto_EnumReservedRange: {
            encode(message: _143.EnumDescriptorProto_EnumReservedRange, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _143.EnumDescriptorProto_EnumReservedRange;
            fromPartial(object: {
                start?: number;
                end?: number;
            }): _143.EnumDescriptorProto_EnumReservedRange;
        };
        EnumValueDescriptorProto: {
            encode(message: _143.EnumValueDescriptorProto, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _143.EnumValueDescriptorProto;
            fromPartial(object: {
                name?: string;
                number?: number;
                options?: {
                    deprecated?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        negativeIntValue?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
            }): _143.EnumValueDescriptorProto;
        };
        ServiceDescriptorProto: {
            encode(message: _143.ServiceDescriptorProto, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _143.ServiceDescriptorProto;
            fromPartial(object: {
                name?: string;
                method?: {
                    name?: string;
                    inputType?: string;
                    outputType?: string;
                    options?: {
                        deprecated?: boolean;
                        idempotencyLevel?: _143.MethodOptions_IdempotencyLevel;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            negativeIntValue?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long").default) => import("long").default;
                                and?: (other: string | number | import("long").default) => import("long").default;
                                compare?: (other: string | number | import("long").default) => number;
                                comp?: (other: string | number | import("long").default) => number;
                                divide?: (divisor: string | number | import("long").default) => import("long").default;
                                div?: (divisor: string | number | import("long").default) => import("long").default;
                                equals?: (other: string | number | import("long").default) => boolean;
                                eq?: (other: string | number | import("long").default) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long").default) => boolean;
                                gt?: (other: string | number | import("long").default) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                gte?: (other: string | number | import("long").default) => boolean;
                                ge?: (other: string | number | import("long").default) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long").default) => boolean;
                                lt?: (other: string | number | import("long").default) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                                lte?: (other: string | number | import("long").default) => boolean;
                                le?: (other: string | number | import("long").default) => boolean;
                                modulo?: (other: string | number | import("long").default) => import("long").default;
                                mod?: (other: string | number | import("long").default) => import("long").default;
                                rem?: (other: string | number | import("long").default) => import("long").default;
                                multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                                mul?: (multiplier: string | number | import("long").default) => import("long").default;
                                negate?: () => import("long").default;
                                neg?: () => import("long").default;
                                not?: () => import("long").default;
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long").default) => boolean;
                                neq?: (other: string | number | import("long").default) => boolean;
                                ne?: (other: string | number | import("long").default) => boolean;
                                or?: (other: string | number | import("long").default) => import("long").default;
                                shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                                shl?: (numBits: number | import("long").default) => import("long").default;
                                shiftRight?: (numBits: number | import("long").default) => import("long").default;
                                shr?: (numBits: number | import("long").default) => import("long").default;
                                shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                                shru?: (numBits: number | import("long").default) => import("long").default;
                                shr_u?: (numBits: number | import("long").default) => import("long").default;
                                rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                                rotl?: (numBits: number | import("long").default) => import("long").default;
                                rotateRight?: (numBits: number | import("long").default) => import("long").default;
                                rotr?: (numBits: number | import("long").default) => import("long").default;
                                subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                                sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long").default;
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long").default;
                                xor?: (other: string | number | import("long").default) => import("long").default;
                            };
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    clientStreaming?: boolean;
                    serverStreaming?: boolean;
                }[];
                options?: {
                    deprecated?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        negativeIntValue?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
            }): _143.ServiceDescriptorProto;
        };
        MethodDescriptorProto: {
            encode(message: _143.MethodDescriptorProto, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _143.MethodDescriptorProto;
            fromPartial(object: {
                name?: string;
                inputType?: string;
                outputType?: string;
                options?: {
                    deprecated?: boolean;
                    idempotencyLevel?: _143.MethodOptions_IdempotencyLevel;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        negativeIntValue?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long").default) => import("long").default;
                            and?: (other: string | number | import("long").default) => import("long").default;
                            compare?: (other: string | number | import("long").default) => number;
                            comp?: (other: string | number | import("long").default) => number;
                            divide?: (divisor: string | number | import("long").default) => import("long").default;
                            div?: (divisor: string | number | import("long").default) => import("long").default;
                            equals?: (other: string | number | import("long").default) => boolean;
                            eq?: (other: string | number | import("long").default) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long").default) => boolean;
                            gt?: (other: string | number | import("long").default) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            gte?: (other: string | number | import("long").default) => boolean;
                            ge?: (other: string | number | import("long").default) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long").default) => boolean;
                            lt?: (other: string | number | import("long").default) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                            lte?: (other: string | number | import("long").default) => boolean;
                            le?: (other: string | number | import("long").default) => boolean;
                            modulo?: (other: string | number | import("long").default) => import("long").default;
                            mod?: (other: string | number | import("long").default) => import("long").default;
                            rem?: (other: string | number | import("long").default) => import("long").default;
                            multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                            mul?: (multiplier: string | number | import("long").default) => import("long").default;
                            negate?: () => import("long").default;
                            neg?: () => import("long").default;
                            not?: () => import("long").default;
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long").default) => boolean;
                            neq?: (other: string | number | import("long").default) => boolean;
                            ne?: (other: string | number | import("long").default) => boolean;
                            or?: (other: string | number | import("long").default) => import("long").default;
                            shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                            shl?: (numBits: number | import("long").default) => import("long").default;
                            shiftRight?: (numBits: number | import("long").default) => import("long").default;
                            shr?: (numBits: number | import("long").default) => import("long").default;
                            shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                            shru?: (numBits: number | import("long").default) => import("long").default;
                            shr_u?: (numBits: number | import("long").default) => import("long").default;
                            rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                            rotl?: (numBits: number | import("long").default) => import("long").default;
                            rotateRight?: (numBits: number | import("long").default) => import("long").default;
                            rotr?: (numBits: number | import("long").default) => import("long").default;
                            subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                            sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long").default;
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long").default;
                            xor?: (other: string | number | import("long").default) => import("long").default;
                        };
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
                clientStreaming?: boolean;
                serverStreaming?: boolean;
            }): _143.MethodDescriptorProto;
        };
        FileOptions: {
            encode(message: _143.FileOptions, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _143.FileOptions;
            fromPartial(object: {
                javaPackage?: string;
                javaOuterClassname?: string;
                javaMultipleFiles?: boolean;
                javaGenerateEqualsAndHash?: boolean;
                javaStringCheckUtf8?: boolean;
                optimizeFor?: _143.FileOptions_OptimizeMode;
                goPackage?: string;
                ccGenericServices?: boolean;
                javaGenericServices?: boolean;
                pyGenericServices?: boolean;
                phpGenericServices?: boolean;
                deprecated?: boolean;
                ccEnableArenas?: boolean;
                objcClassPrefix?: string;
                csharpNamespace?: string;
                swiftPrefix?: string;
                phpClassPrefix?: string;
                phpNamespace?: string;
                phpMetadataNamespace?: string;
                rubyPackage?: string;
                uninterpretedOption?: {
                    name?: {
                        namePart?: string;
                        isExtension?: boolean;
                    }[];
                    identifierValue?: string;
                    positiveIntValue?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    negativeIntValue?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    doubleValue?: number;
                    stringValue?: Uint8Array;
                    aggregateValue?: string;
                }[];
            }): _143.FileOptions;
        };
        MessageOptions: {
            encode(message: _143.MessageOptions, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _143.MessageOptions;
            fromPartial(object: {
                messageSetWireFormat?: boolean;
                noStandardDescriptorAccessor?: boolean;
                deprecated?: boolean;
                mapEntry?: boolean;
                uninterpretedOption?: {
                    name?: {
                        namePart?: string;
                        isExtension?: boolean;
                    }[];
                    identifierValue?: string;
                    positiveIntValue?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    negativeIntValue?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    doubleValue?: number;
                    stringValue?: Uint8Array;
                    aggregateValue?: string;
                }[];
            }): _143.MessageOptions;
        };
        FieldOptions: {
            encode(message: _143.FieldOptions, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _143.FieldOptions;
            fromPartial(object: {
                ctype?: _143.FieldOptions_CType;
                packed?: boolean;
                jstype?: _143.FieldOptions_JSType;
                lazy?: boolean;
                deprecated?: boolean;
                weak?: boolean;
                uninterpretedOption?: {
                    name?: {
                        namePart?: string;
                        isExtension?: boolean;
                    }[];
                    identifierValue?: string;
                    positiveIntValue?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    negativeIntValue?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    doubleValue?: number;
                    stringValue?: Uint8Array;
                    aggregateValue?: string;
                }[];
            }): _143.FieldOptions;
        };
        OneofOptions: {
            encode(message: _143.OneofOptions, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _143.OneofOptions;
            fromPartial(object: {
                uninterpretedOption?: {
                    name?: {
                        namePart?: string;
                        isExtension?: boolean;
                    }[];
                    identifierValue?: string;
                    positiveIntValue?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    negativeIntValue?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    doubleValue?: number;
                    stringValue?: Uint8Array;
                    aggregateValue?: string;
                }[];
            }): _143.OneofOptions;
        };
        EnumOptions: {
            encode(message: _143.EnumOptions, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _143.EnumOptions;
            fromPartial(object: {
                allowAlias?: boolean;
                deprecated?: boolean;
                uninterpretedOption?: {
                    name?: {
                        namePart?: string;
                        isExtension?: boolean;
                    }[];
                    identifierValue?: string;
                    positiveIntValue?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    negativeIntValue?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    doubleValue?: number;
                    stringValue?: Uint8Array;
                    aggregateValue?: string;
                }[];
            }): _143.EnumOptions;
        };
        EnumValueOptions: {
            encode(message: _143.EnumValueOptions, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _143.EnumValueOptions;
            fromPartial(object: {
                deprecated?: boolean;
                uninterpretedOption?: {
                    name?: {
                        namePart?: string;
                        isExtension?: boolean;
                    }[];
                    identifierValue?: string;
                    positiveIntValue?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    negativeIntValue?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    doubleValue?: number;
                    stringValue?: Uint8Array;
                    aggregateValue?: string;
                }[];
            }): _143.EnumValueOptions;
        };
        ServiceOptions: {
            encode(message: _143.ServiceOptions, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _143.ServiceOptions;
            fromPartial(object: {
                deprecated?: boolean;
                uninterpretedOption?: {
                    name?: {
                        namePart?: string;
                        isExtension?: boolean;
                    }[];
                    identifierValue?: string;
                    positiveIntValue?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    negativeIntValue?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    doubleValue?: number;
                    stringValue?: Uint8Array;
                    aggregateValue?: string;
                }[];
            }): _143.ServiceOptions;
        };
        MethodOptions: {
            encode(message: _143.MethodOptions, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _143.MethodOptions;
            fromPartial(object: {
                deprecated?: boolean;
                idempotencyLevel?: _143.MethodOptions_IdempotencyLevel;
                uninterpretedOption?: {
                    name?: {
                        namePart?: string;
                        isExtension?: boolean;
                    }[];
                    identifierValue?: string;
                    positiveIntValue?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    negativeIntValue?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long").default) => import("long").default;
                        and?: (other: string | number | import("long").default) => import("long").default;
                        compare?: (other: string | number | import("long").default) => number;
                        comp?: (other: string | number | import("long").default) => number;
                        divide?: (divisor: string | number | import("long").default) => import("long").default;
                        div?: (divisor: string | number | import("long").default) => import("long").default;
                        equals?: (other: string | number | import("long").default) => boolean;
                        eq?: (other: string | number | import("long").default) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long").default) => boolean;
                        gt?: (other: string | number | import("long").default) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        gte?: (other: string | number | import("long").default) => boolean;
                        ge?: (other: string | number | import("long").default) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long").default) => boolean;
                        lt?: (other: string | number | import("long").default) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                        lte?: (other: string | number | import("long").default) => boolean;
                        le?: (other: string | number | import("long").default) => boolean;
                        modulo?: (other: string | number | import("long").default) => import("long").default;
                        mod?: (other: string | number | import("long").default) => import("long").default;
                        rem?: (other: string | number | import("long").default) => import("long").default;
                        multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                        mul?: (multiplier: string | number | import("long").default) => import("long").default;
                        negate?: () => import("long").default;
                        neg?: () => import("long").default;
                        not?: () => import("long").default;
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long").default) => boolean;
                        neq?: (other: string | number | import("long").default) => boolean;
                        ne?: (other: string | number | import("long").default) => boolean;
                        or?: (other: string | number | import("long").default) => import("long").default;
                        shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                        shl?: (numBits: number | import("long").default) => import("long").default;
                        shiftRight?: (numBits: number | import("long").default) => import("long").default;
                        shr?: (numBits: number | import("long").default) => import("long").default;
                        shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                        shru?: (numBits: number | import("long").default) => import("long").default;
                        shr_u?: (numBits: number | import("long").default) => import("long").default;
                        rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                        rotl?: (numBits: number | import("long").default) => import("long").default;
                        rotateRight?: (numBits: number | import("long").default) => import("long").default;
                        rotr?: (numBits: number | import("long").default) => import("long").default;
                        subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                        sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long").default;
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long").default;
                        xor?: (other: string | number | import("long").default) => import("long").default;
                    };
                    doubleValue?: number;
                    stringValue?: Uint8Array;
                    aggregateValue?: string;
                }[];
            }): _143.MethodOptions;
        };
        UninterpretedOption: {
            encode(message: _143.UninterpretedOption, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _143.UninterpretedOption;
            fromPartial(object: {
                name?: {
                    namePart?: string;
                    isExtension?: boolean;
                }[];
                identifierValue?: string;
                positiveIntValue?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                negativeIntValue?: {
                    high?: number;
                    low?: number;
                    unsigned?: boolean;
                    add?: (addend: string | number | import("long").default) => import("long").default;
                    and?: (other: string | number | import("long").default) => import("long").default;
                    compare?: (other: string | number | import("long").default) => number;
                    comp?: (other: string | number | import("long").default) => number;
                    divide?: (divisor: string | number | import("long").default) => import("long").default;
                    div?: (divisor: string | number | import("long").default) => import("long").default;
                    equals?: (other: string | number | import("long").default) => boolean;
                    eq?: (other: string | number | import("long").default) => boolean;
                    getHighBits?: () => number;
                    getHighBitsUnsigned?: () => number;
                    getLowBits?: () => number;
                    getLowBitsUnsigned?: () => number;
                    getNumBitsAbs?: () => number;
                    greaterThan?: (other: string | number | import("long").default) => boolean;
                    gt?: (other: string | number | import("long").default) => boolean;
                    greaterThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    gte?: (other: string | number | import("long").default) => boolean;
                    ge?: (other: string | number | import("long").default) => boolean;
                    isEven?: () => boolean;
                    isNegative?: () => boolean;
                    isOdd?: () => boolean;
                    isPositive?: () => boolean;
                    isZero?: () => boolean;
                    eqz?: () => boolean;
                    lessThan?: (other: string | number | import("long").default) => boolean;
                    lt?: (other: string | number | import("long").default) => boolean;
                    lessThanOrEqual?: (other: string | number | import("long").default) => boolean;
                    lte?: (other: string | number | import("long").default) => boolean;
                    le?: (other: string | number | import("long").default) => boolean;
                    modulo?: (other: string | number | import("long").default) => import("long").default;
                    mod?: (other: string | number | import("long").default) => import("long").default;
                    rem?: (other: string | number | import("long").default) => import("long").default;
                    multiply?: (multiplier: string | number | import("long").default) => import("long").default;
                    mul?: (multiplier: string | number | import("long").default) => import("long").default;
                    negate?: () => import("long").default;
                    neg?: () => import("long").default;
                    not?: () => import("long").default;
                    countLeadingZeros?: () => number;
                    clz?: () => number;
                    countTrailingZeros?: () => number;
                    ctz?: () => number;
                    notEquals?: (other: string | number | import("long").default) => boolean;
                    neq?: (other: string | number | import("long").default) => boolean;
                    ne?: (other: string | number | import("long").default) => boolean;
                    or?: (other: string | number | import("long").default) => import("long").default;
                    shiftLeft?: (numBits: number | import("long").default) => import("long").default;
                    shl?: (numBits: number | import("long").default) => import("long").default;
                    shiftRight?: (numBits: number | import("long").default) => import("long").default;
                    shr?: (numBits: number | import("long").default) => import("long").default;
                    shiftRightUnsigned?: (numBits: number | import("long").default) => import("long").default;
                    shru?: (numBits: number | import("long").default) => import("long").default;
                    shr_u?: (numBits: number | import("long").default) => import("long").default;
                    rotateLeft?: (numBits: number | import("long").default) => import("long").default;
                    rotl?: (numBits: number | import("long").default) => import("long").default;
                    rotateRight?: (numBits: number | import("long").default) => import("long").default;
                    rotr?: (numBits: number | import("long").default) => import("long").default;
                    subtract?: (subtrahend: string | number | import("long").default) => import("long").default;
                    sub?: (subtrahend: string | number | import("long").default) => import("long").default;
                    toInt?: () => number;
                    toNumber?: () => number;
                    toBytes?: (le?: boolean) => number[];
                    toBytesLE?: () => number[];
                    toBytesBE?: () => number[];
                    toSigned?: () => import("long").default;
                    toString?: (radix?: number) => string;
                    toUnsigned?: () => import("long").default;
                    xor?: (other: string | number | import("long").default) => import("long").default;
                };
                doubleValue?: number;
                stringValue?: Uint8Array;
                aggregateValue?: string;
            }): _143.UninterpretedOption;
        };
        UninterpretedOption_NamePart: {
            encode(message: _143.UninterpretedOption_NamePart, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _143.UninterpretedOption_NamePart;
            fromPartial(object: {
                namePart?: string;
                isExtension?: boolean;
            }): _143.UninterpretedOption_NamePart;
        };
        SourceCodeInfo: {
            encode(message: _143.SourceCodeInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _143.SourceCodeInfo;
            fromPartial(object: {
                location?: {
                    path?: number[];
                    span?: number[];
                    leadingComments?: string;
                    trailingComments?: string;
                    leadingDetachedComments?: string[];
                }[];
            }): _143.SourceCodeInfo;
        };
        SourceCodeInfo_Location: {
            encode(message: _143.SourceCodeInfo_Location, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _143.SourceCodeInfo_Location;
            fromPartial(object: {
                path?: number[];
                span?: number[];
                leadingComments?: string;
                trailingComments?: string;
                leadingDetachedComments?: string[];
            }): _143.SourceCodeInfo_Location;
        };
        GeneratedCodeInfo: {
            encode(message: _143.GeneratedCodeInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _143.GeneratedCodeInfo;
            fromPartial(object: {
                annotation?: {
                    path?: number[];
                    sourceFile?: string;
                    begin?: number;
                    end?: number;
                }[];
            }): _143.GeneratedCodeInfo;
        };
        GeneratedCodeInfo_Annotation: {
            encode(message: _143.GeneratedCodeInfo_Annotation, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _143.GeneratedCodeInfo_Annotation;
            fromPartial(object: {
                path?: number[];
                sourceFile?: string;
                begin?: number;
                end?: number;
            }): _143.GeneratedCodeInfo_Annotation;
        };
        Any: {
            encode(message: _142.Any, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
            decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _142.Any;
            fromPartial(object: {
                typeUrl?: string;
                value?: Uint8Array;
            }): _142.Any;
        };
    };
}
